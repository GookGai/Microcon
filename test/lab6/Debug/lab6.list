
lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004084  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004284  08004284  00014284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042e0  080042e0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042e8  080042e8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e8  080042e8  000142e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042ec  080042ec  000142ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080042f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000007c  0800436c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  0800436c  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f930  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021df  00000000  00000000  0002f9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00031bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00032900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027dca  00000000  00000000  00033558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f87f  00000000  00000000  0005b322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa07a  00000000  00000000  0006aba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00164c1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a54  00000000  00000000  00164c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800426c 	.word	0x0800426c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	0800426c 	.word	0x0800426c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <MX_GPIO_Init+0xbc>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a28      	ldr	r2, [pc, #160]	; (80006a4 <MX_GPIO_Init+0xbc>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <MX_GPIO_Init+0xbc>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <MX_GPIO_Init+0xbc>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a22      	ldr	r2, [pc, #136]	; (80006a4 <MX_GPIO_Init+0xbc>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_GPIO_Init+0xbc>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_GPIO_Init+0xbc>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <MX_GPIO_Init+0xbc>)
 8000634:	f043 0308 	orr.w	r3, r3, #8
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_GPIO_Init+0xbc>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0308 	and.w	r3, r3, #8
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f244 0181 	movw	r1, #16513	; 0x4081
 800064c:	4816      	ldr	r0, [pc, #88]	; (80006a8 <MX_GPIO_Init+0xc0>)
 800064e:	f000 ff05 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_GPIO_Init+0xc4>)
 800065a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	4619      	mov	r1, r3
 8000666:	4812      	ldr	r0, [pc, #72]	; (80006b0 <MX_GPIO_Init+0xc8>)
 8000668:	f000 fd4c 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 800066c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000670:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	4619      	mov	r1, r3
 8000684:	4808      	ldr	r0, [pc, #32]	; (80006a8 <MX_GPIO_Init+0xc0>)
 8000686:	f000 fd3d 	bl	8001104 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2101      	movs	r1, #1
 800068e:	2028      	movs	r0, #40	; 0x28
 8000690:	f000 fd01 	bl	8001096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000694:	2028      	movs	r0, #40	; 0x28
 8000696:	f000 fd1a 	bl	80010ce <HAL_NVIC_EnableIRQ>

}
 800069a:	bf00      	nop
 800069c:	3720      	adds	r7, #32
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020400 	.word	0x40020400
 80006ac:	10110000 	.word	0x10110000
 80006b0:	40020800 	.word	0x40020800

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fb91 	bl	8000dde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f82a 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f7ff ff92 	bl	80005e8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006c4:	f000 fa0c 	bl	8000ae0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006c8:	f000 fa5e 	bl	8000b88 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80006cc:	f000 faea 	bl	8000ca4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim1);
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <main+0x4c>)
 80006d2:	f002 f849 	bl	8002768 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim2);
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <main+0x50>)
 80006d8:	f002 f846 	bl	8002768 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_Delay(400);
//	  displayNumber2(count);
	  while(st){
 80006dc:	e00b      	b.n	80006f6 <main+0x42>

		  if(count2 == 1){
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <main+0x54>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d107      	bne.n	80006f6 <main+0x42>
		  	displayNumber2(count);
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <main+0x58>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f8a8 	bl	8000840 <displayNumber2>
		  	count2 = 0;
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <main+0x54>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
	  while(st){
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <main+0x5c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d1ef      	bne.n	80006de <main+0x2a>
 80006fe:	e7fa      	b.n	80006f6 <main+0x42>
 8000700:	200000ac 	.word	0x200000ac
 8000704:	200000f8 	.word	0x200000f8
 8000708:	2000009c 	.word	0x2000009c
 800070c:	20000098 	.word	0x20000098
 8000710:	20000004 	.word	0x20000004

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b0b8      	sub	sp, #224	; 0xe0
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800071e:	2234      	movs	r2, #52	; 0x34
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f003 f96c 	bl	8003a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2290      	movs	r2, #144	; 0x90
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f003 f95d 	bl	8003a00 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b3c      	ldr	r3, [pc, #240]	; (8000838 <SystemClock_Config+0x124>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	4a3b      	ldr	r2, [pc, #236]	; (8000838 <SystemClock_Config+0x124>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6413      	str	r3, [r2, #64]	; 0x40
 8000752:	4b39      	ldr	r3, [pc, #228]	; (8000838 <SystemClock_Config+0x124>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800075e:	4b37      	ldr	r3, [pc, #220]	; (800083c <SystemClock_Config+0x128>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000766:	4a35      	ldr	r2, [pc, #212]	; (800083c <SystemClock_Config+0x128>)
 8000768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076c:	6013      	str	r3, [r2, #0]
 800076e:	4b33      	ldr	r3, [pc, #204]	; (800083c <SystemClock_Config+0x128>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077a:	2302      	movs	r3, #2
 800077c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000786:	2310      	movs	r3, #16
 8000788:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078c:	2302      	movs	r3, #2
 800078e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000792:	2300      	movs	r3, #0
 8000794:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000798:	2308      	movs	r3, #8
 800079a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 108;
 800079e:	236c      	movs	r3, #108	; 0x6c
 80007a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fed0 	bl	8001560 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007c6:	f000 f8c7 	bl	8000958 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007ca:	f000 fe79 	bl	80014c0 <HAL_PWREx_EnableOverDrive>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007d4:	f000 f8c0 	bl	8000958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2302      	movs	r3, #2
 80007e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007fe:	2103      	movs	r1, #3
 8000800:	4618      	mov	r0, r3
 8000802:	f001 f95b 	bl	8001abc <HAL_RCC_ClockConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800080c:	f000 f8a4 	bl	8000958 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000814:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000816:	2300      	movs	r3, #0
 8000818:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fb22 	bl	8001e68 <HAL_RCCEx_PeriphCLKConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x11a>
  {
    Error_Handler();
 800082a:	f000 f895 	bl	8000958 <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	37e0      	adds	r7, #224	; 0xe0
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <displayNumber2>:
	HAL_UART_Transmit(&huart3, (uint32_t*) "\n\r", 4,1000);
	HAL_UART_Transmit(&huart3, (uint32_t*)num,strlen(num),1000);

}
void displayNumber2(uint32_t x)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
//	x = x/1000;
	count3 += 2;
 8000848:	4b24      	ldr	r3, [pc, #144]	; (80008dc <displayNumber2+0x9c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	3302      	adds	r3, #2
 800084e:	4a23      	ldr	r2, [pc, #140]	; (80008dc <displayNumber2+0x9c>)
 8000850:	6013      	str	r3, [r2, #0]

//	if(x>59){
//		count = 0;
//		t++;
//		x = 0;}
	sprintf(num,"%d",count3);
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <displayNumber2+0x9c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	4921      	ldr	r1, [pc, #132]	; (80008e0 <displayNumber2+0xa0>)
 800085a:	4822      	ldr	r0, [pc, #136]	; (80008e4 <displayNumber2+0xa4>)
 800085c:	f003 f8d8 	bl	8003a10 <siprintf>
//	sprintf(num,"%.2d",x);
//	sprintf(num1,"%.2d",t);
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000860:	bf00      	nop
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <displayNumber2+0xa8>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	69db      	ldr	r3, [r3, #28]
 8000868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086c:	2b40      	cmp	r3, #64	; 0x40
 800086e:	d1f8      	bne.n	8000862 <displayNumber2+0x22>
	HAL_UART_Transmit(&huart3, (uint32_t*) "\n\r", 4,1000);
 8000870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000874:	2204      	movs	r2, #4
 8000876:	491d      	ldr	r1, [pc, #116]	; (80008ec <displayNumber2+0xac>)
 8000878:	481b      	ldr	r0, [pc, #108]	; (80008e8 <displayNumber2+0xa8>)
 800087a:	f002 fc39 	bl	80030f0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint32_t*)num,strlen(num),1000);
 800087e:	4819      	ldr	r0, [pc, #100]	; (80008e4 <displayNumber2+0xa4>)
 8000880:	f7ff fcde 	bl	8000240 <strlen>
 8000884:	4603      	mov	r3, r0
 8000886:	b29a      	uxth	r2, r3
 8000888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088c:	4915      	ldr	r1, [pc, #84]	; (80008e4 <displayNumber2+0xa4>)
 800088e:	4816      	ldr	r0, [pc, #88]	; (80008e8 <displayNumber2+0xa8>)
 8000890:	f002 fc2e 	bl	80030f0 <HAL_UART_Transmit>
	if(count3 == 3029){
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <displayNumber2+0x9c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f640 32d5 	movw	r2, #3029	; 0xbd5
 800089c:	4293      	cmp	r3, r2
 800089e:	d118      	bne.n	80008d2 <displayNumber2+0x92>
			while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80008a0:	bf00      	nop
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <displayNumber2+0xa8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ac:	2b40      	cmp	r3, #64	; 0x40
 80008ae:	d1f8      	bne.n	80008a2 <displayNumber2+0x62>
				HAL_UART_Transmit(&huart3, (uint32_t*) "\n\r", 4,1000);
 80008b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b4:	2204      	movs	r2, #4
 80008b6:	490d      	ldr	r1, [pc, #52]	; (80008ec <displayNumber2+0xac>)
 80008b8:	480b      	ldr	r0, [pc, #44]	; (80008e8 <displayNumber2+0xa8>)
 80008ba:	f002 fc19 	bl	80030f0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint32_t*)"stop",4,1000);
 80008be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c2:	2204      	movs	r2, #4
 80008c4:	490a      	ldr	r1, [pc, #40]	; (80008f0 <displayNumber2+0xb0>)
 80008c6:	4808      	ldr	r0, [pc, #32]	; (80008e8 <displayNumber2+0xa8>)
 80008c8:	f002 fc12 	bl	80030f0 <HAL_UART_Transmit>
				st = 0;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <displayNumber2+0xb4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
		}
//	HAL_UART_Transmit(&huart3, (uint32_t*) ":", 1,1000);
//	HAL_UART_Transmit(&huart3, (uint32_t*)num,strlen(num),1000);

}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000000 	.word	0x20000000
 80008e0:	08004284 	.word	0x08004284
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000144 	.word	0x20000144
 80008ec:	08004288 	.word	0x08004288
 80008f0:	0800428c 	.word	0x0800428c
 80008f4:	20000004 	.word	0x20000004

080008f8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000908:	d11f      	bne.n	800094a <HAL_GPIO_EXTI_Callback+0x52>
		HAL_Delay(1000);
 800090a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800090e:	f000 fac3 	bl	8000e98 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000912:	2201      	movs	r2, #1
 8000914:	2101      	movs	r1, #1
 8000916:	480f      	ldr	r0, [pc, #60]	; (8000954 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000918:	f000 fda0 	bl	800145c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800091c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000920:	f000 faba 	bl	8000e98 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000924:	2201      	movs	r2, #1
 8000926:	2180      	movs	r1, #128	; 0x80
 8000928:	480a      	ldr	r0, [pc, #40]	; (8000954 <HAL_GPIO_EXTI_Callback+0x5c>)
 800092a:	f000 fd97 	bl	800145c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800092e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000932:	f000 fab1 	bl	8000e98 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <HAL_GPIO_EXTI_Callback+0x5c>)
 800093c:	f000 fd8e 	bl	800145c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2101      	movs	r1, #1
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000946:	f000 fd89 	bl	800145c <HAL_GPIO_WritePin>
	}

}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40020400 	.word	0x40020400

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x44>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_MspInit+0x44>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_MspInit+0x44>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_MspInit+0x44>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_MspInit+0x44>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_MspInit+0x44>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800099a:	2005      	movs	r0, #5
 800099c:	f000 fb70 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f000 fa2e 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000a06:	f001 ff27 	bl	8002858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  	 count++ ;
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	4a02      	ldr	r2, [pc, #8]	; (8000a1c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000a12:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200000ac 	.word	0x200000ac
 8000a1c:	20000098 	.word	0x20000098

08000a20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <TIM2_IRQHandler+0x18>)
 8000a26:	f001 ff17 	bl	8002858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  count2++;
 8000a2a:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <TIM2_IRQHandler+0x1c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	4a02      	ldr	r2, [pc, #8]	; (8000a3c <TIM2_IRQHandler+0x1c>)
 8000a32:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000f8 	.word	0x200000f8
 8000a3c:	2000009c 	.word	0x2000009c

08000a40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a48:	f000 fd22 	bl	8001490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <_sbrk+0x5c>)
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <_sbrk+0x60>)
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <_sbrk+0x64>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <_sbrk+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d207      	bcs.n	8000a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a80:	f002 ff94 	bl	80039ac <__errno>
 8000a84:	4603      	mov	r3, r0
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e009      	b.n	8000aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <_sbrk+0x64>)
 8000aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20080000 	.word	0x20080000
 8000ab0:	00000400 	.word	0x00000400
 8000ab4:	200000a0 	.word	0x200000a0
 8000ab8:	200001e0 	.word	0x200001e0

08000abc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <SystemInit+0x20>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <SystemInit+0x20>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b00:	4a20      	ldr	r2, [pc, #128]	; (8000b84 <MX_TIM1_Init+0xa4>)
 8000b02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 108-1;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b06:	226b      	movs	r2, #107	; 0x6b
 8000b08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b2a:	4815      	ldr	r0, [pc, #84]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b2c:	f001 fdc4 	bl	80026b8 <HAL_TIM_Base_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b36:	f7ff ff0f 	bl	8000958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	4619      	mov	r1, r3
 8000b46:	480e      	ldr	r0, [pc, #56]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b48:	f001 ffa6 	bl	8002a98 <HAL_TIM_ConfigClockSource>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b52:	f7ff ff01 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_TIM1_Init+0xa0>)
 8000b68:	f002 f9c8 	bl	8002efc <HAL_TIMEx_MasterConfigSynchronization>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b72:	f7ff fef1 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	3720      	adds	r7, #32
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000ac 	.word	0x200000ac
 8000b84:	40010000 	.word	0x40010000

08000b88 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000ba8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bb0:	226b      	movs	r2, #107	; 0x6b
 8000bb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb4:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bbc:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <MX_TIM2_Init+0x98>)
 8000bbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bce:	f001 fd73 	bl	80026b8 <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bd8:	f7ff febe 	bl	8000958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	4619      	mov	r1, r3
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bea:	f001 ff55 	bl	8002a98 <HAL_TIM_ConfigClockSource>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bf4:	f7ff feb0 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000c06:	f002 f979 	bl	8002efc <HAL_TIMEx_MasterConfigSynchronization>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f7ff fea2 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	3720      	adds	r7, #32
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200000f8 	.word	0x200000f8
 8000c20:	000f423f 	.word	0x000f423f

08000c24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a1a      	ldr	r2, [pc, #104]	; (8000c9c <HAL_TIM_Base_MspInit+0x78>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d114      	bne.n	8000c60 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <HAL_TIM_Base_MspInit+0x7c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_TIM_Base_MspInit+0x7c>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_TIM_Base_MspInit+0x7c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2101      	movs	r1, #1
 8000c52:	2019      	movs	r0, #25
 8000c54:	f000 fa1f 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c58:	2019      	movs	r0, #25
 8000c5a:	f000 fa38 	bl	80010ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c5e:	e018      	b.n	8000c92 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c68:	d113      	bne.n	8000c92 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <HAL_TIM_Base_MspInit+0x7c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <HAL_TIM_Base_MspInit+0x7c>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_TIM_Base_MspInit+0x7c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2102      	movs	r1, #2
 8000c86:	201c      	movs	r0, #28
 8000c88:	f000 fa05 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c8c:	201c      	movs	r0, #28
 8000c8e:	f000 fa1e 	bl	80010ce <HAL_NVIC_EnableIRQ>
}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40010000 	.word	0x40010000
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_USART3_UART_Init+0x58>)
 8000caa:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <MX_USART3_UART_Init+0x5c>)
 8000cac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_USART3_UART_Init+0x58>)
 8000cb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_USART3_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_USART3_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_USART3_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_USART3_UART_Init+0x58>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <MX_USART3_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_USART3_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <MX_USART3_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_USART3_UART_Init+0x58>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_USART3_UART_Init+0x58>)
 8000ce8:	f002 f9b4 	bl	8003054 <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cf2:	f7ff fe31 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000144 	.word	0x20000144
 8000d00:	40004800 	.word	0x40004800

08000d04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <HAL_UART_MspInit+0x7c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d128      	bne.n	8000d78 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_UART_MspInit+0x80>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a16      	ldr	r2, [pc, #88]	; (8000d84 <HAL_UART_MspInit+0x80>)
 8000d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <HAL_UART_MspInit+0x80>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_UART_MspInit+0x80>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <HAL_UART_MspInit+0x80>)
 8000d44:	f043 0308 	orr.w	r3, r3, #8
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_UART_MspInit+0x80>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d68:	2307      	movs	r3, #7
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <HAL_UART_MspInit+0x84>)
 8000d74:	f000 f9c6 	bl	8001104 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	; 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40004800 	.word	0x40004800
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020c00 	.word	0x40020c00

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d92:	490e      	ldr	r1, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d94:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da8:	4c0b      	ldr	r4, [pc, #44]	; (8000dd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db6:	f7ff fe81 	bl	8000abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f002 fdfd 	bl	80039b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fc79 	bl	80006b4 <main>
  bx  lr    
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000dd0:	080042f0 	.word	0x080042f0
  ldr r2, =_sbss
 8000dd4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000dd8:	200001dc 	.word	0x200001dc

08000ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC_IRQHandler>

08000dde <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de2:	2003      	movs	r0, #3
 8000de4:	f000 f94c 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f000 f805 	bl	8000df8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000dee:	f7ff fdb9 	bl	8000964 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_InitTick+0x54>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x58>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f967 	bl	80010ea <HAL_SYSTICK_Config>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00e      	b.n	8000e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d80a      	bhi.n	8000e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f000 f92f 	bl	8001096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e38:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <HAL_InitTick+0x5c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2000000c 	.word	0x2000000c
 8000e50:	20000014 	.word	0x20000014
 8000e54:	20000010 	.word	0x20000010

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000014 	.word	0x20000014
 8000e7c:	200001c8 	.word	0x200001c8

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200001c8 	.word	0x200001c8

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff ffee 	bl	8000e80 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffde 	bl	8000e80 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000014 	.word	0x20000014

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x40>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00
 8000f24:	05fa0000 	.word	0x05fa0000

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4907      	ldr	r1, [pc, #28]	; (8000f7c <__NVIC_EnableIRQ+0x38>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f7ff ff8e 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff29 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff3e 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff8e 	bl	8000fd4 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5d 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff31 	bl	8000f44 <__NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffa2 	bl	800103c <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	e175      	b.n	8001410 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001124:	2201      	movs	r2, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	429a      	cmp	r2, r3
 800113e:	f040 8164 	bne.w	800140a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d00b      	beq.n	8001162 <HAL_GPIO_Init+0x5e>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b02      	cmp	r3, #2
 8001150:	d007      	beq.n	8001162 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001156:	2b11      	cmp	r3, #17
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b12      	cmp	r3, #18
 8001160:	d130      	bne.n	80011c4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	091b      	lsrs	r3, r3, #4
 80011ae:	f003 0201 	and.w	r2, r3, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x100>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b12      	cmp	r3, #18
 8001202:	d123      	bne.n	800124c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	08da      	lsrs	r2, r3, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3208      	adds	r2, #8
 800120c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	220f      	movs	r2, #15
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	08da      	lsrs	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3208      	adds	r2, #8
 8001246:	69b9      	ldr	r1, [r7, #24]
 8001248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0203 	and.w	r2, r3, #3
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80be 	beq.w	800140a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	4b66      	ldr	r3, [pc, #408]	; (8001428 <HAL_GPIO_Init+0x324>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a65      	ldr	r2, [pc, #404]	; (8001428 <HAL_GPIO_Init+0x324>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b63      	ldr	r3, [pc, #396]	; (8001428 <HAL_GPIO_Init+0x324>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012a6:	4a61      	ldr	r2, [pc, #388]	; (800142c <HAL_GPIO_Init+0x328>)
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a58      	ldr	r2, [pc, #352]	; (8001430 <HAL_GPIO_Init+0x32c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d037      	beq.n	8001342 <HAL_GPIO_Init+0x23e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a57      	ldr	r2, [pc, #348]	; (8001434 <HAL_GPIO_Init+0x330>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d031      	beq.n	800133e <HAL_GPIO_Init+0x23a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a56      	ldr	r2, [pc, #344]	; (8001438 <HAL_GPIO_Init+0x334>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d02b      	beq.n	800133a <HAL_GPIO_Init+0x236>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a55      	ldr	r2, [pc, #340]	; (800143c <HAL_GPIO_Init+0x338>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d025      	beq.n	8001336 <HAL_GPIO_Init+0x232>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a54      	ldr	r2, [pc, #336]	; (8001440 <HAL_GPIO_Init+0x33c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d01f      	beq.n	8001332 <HAL_GPIO_Init+0x22e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a53      	ldr	r2, [pc, #332]	; (8001444 <HAL_GPIO_Init+0x340>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d019      	beq.n	800132e <HAL_GPIO_Init+0x22a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a52      	ldr	r2, [pc, #328]	; (8001448 <HAL_GPIO_Init+0x344>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d013      	beq.n	800132a <HAL_GPIO_Init+0x226>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a51      	ldr	r2, [pc, #324]	; (800144c <HAL_GPIO_Init+0x348>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d00d      	beq.n	8001326 <HAL_GPIO_Init+0x222>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a50      	ldr	r2, [pc, #320]	; (8001450 <HAL_GPIO_Init+0x34c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d007      	beq.n	8001322 <HAL_GPIO_Init+0x21e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4f      	ldr	r2, [pc, #316]	; (8001454 <HAL_GPIO_Init+0x350>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d101      	bne.n	800131e <HAL_GPIO_Init+0x21a>
 800131a:	2309      	movs	r3, #9
 800131c:	e012      	b.n	8001344 <HAL_GPIO_Init+0x240>
 800131e:	230a      	movs	r3, #10
 8001320:	e010      	b.n	8001344 <HAL_GPIO_Init+0x240>
 8001322:	2308      	movs	r3, #8
 8001324:	e00e      	b.n	8001344 <HAL_GPIO_Init+0x240>
 8001326:	2307      	movs	r3, #7
 8001328:	e00c      	b.n	8001344 <HAL_GPIO_Init+0x240>
 800132a:	2306      	movs	r3, #6
 800132c:	e00a      	b.n	8001344 <HAL_GPIO_Init+0x240>
 800132e:	2305      	movs	r3, #5
 8001330:	e008      	b.n	8001344 <HAL_GPIO_Init+0x240>
 8001332:	2304      	movs	r3, #4
 8001334:	e006      	b.n	8001344 <HAL_GPIO_Init+0x240>
 8001336:	2303      	movs	r3, #3
 8001338:	e004      	b.n	8001344 <HAL_GPIO_Init+0x240>
 800133a:	2302      	movs	r3, #2
 800133c:	e002      	b.n	8001344 <HAL_GPIO_Init+0x240>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <HAL_GPIO_Init+0x240>
 8001342:	2300      	movs	r3, #0
 8001344:	69fa      	ldr	r2, [r7, #28]
 8001346:	f002 0203 	and.w	r2, r2, #3
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	4093      	lsls	r3, r2
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001354:	4935      	ldr	r1, [pc, #212]	; (800142c <HAL_GPIO_Init+0x328>)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	3302      	adds	r3, #2
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001362:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <HAL_GPIO_Init+0x354>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001386:	4a34      	ldr	r2, [pc, #208]	; (8001458 <HAL_GPIO_Init+0x354>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800138c:	4b32      	ldr	r3, [pc, #200]	; (8001458 <HAL_GPIO_Init+0x354>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013b0:	4a29      	ldr	r2, [pc, #164]	; (8001458 <HAL_GPIO_Init+0x354>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b6:	4b28      	ldr	r3, [pc, #160]	; (8001458 <HAL_GPIO_Init+0x354>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013da:	4a1f      	ldr	r2, [pc, #124]	; (8001458 <HAL_GPIO_Init+0x354>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_GPIO_Init+0x354>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001404:	4a14      	ldr	r2, [pc, #80]	; (8001458 <HAL_GPIO_Init+0x354>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3301      	adds	r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	f67f ae86 	bls.w	8001124 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40013800 	.word	0x40013800
 8001430:	40020000 	.word	0x40020000
 8001434:	40020400 	.word	0x40020400
 8001438:	40020800 	.word	0x40020800
 800143c:	40020c00 	.word	0x40020c00
 8001440:	40021000 	.word	0x40021000
 8001444:	40021400 	.word	0x40021400
 8001448:	40021800 	.word	0x40021800
 800144c:	40021c00 	.word	0x40021c00
 8001450:	40022000 	.word	0x40022000
 8001454:	40022400 	.word	0x40022400
 8001458:	40013c00 	.word	0x40013c00

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
 8001468:	4613      	mov	r3, r2
 800146a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800146c:	787b      	ldrb	r3, [r7, #1]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001478:	e003      	b.n	8001482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	041a      	lsls	r2, r3, #16
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	619a      	str	r2, [r3, #24]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d006      	beq.n	80014b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fa22 	bl	80008f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40013c00 	.word	0x40013c00

080014c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_PWREx_EnableOverDrive+0x98>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a22      	ldr	r2, [pc, #136]	; (8001558 <HAL_PWREx_EnableOverDrive+0x98>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_PWREx_EnableOverDrive+0x98>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <HAL_PWREx_EnableOverDrive+0x9c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a1d      	ldr	r2, [pc, #116]	; (800155c <HAL_PWREx_EnableOverDrive+0x9c>)
 80014e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ee:	f7ff fcc7 	bl	8000e80 <HAL_GetTick>
 80014f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014f4:	e009      	b.n	800150a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014f6:	f7ff fcc3 	bl	8000e80 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001504:	d901      	bls.n	800150a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e022      	b.n	8001550 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_PWREx_EnableOverDrive+0x9c>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001516:	d1ee      	bne.n	80014f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_PWREx_EnableOverDrive+0x9c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0f      	ldr	r2, [pc, #60]	; (800155c <HAL_PWREx_EnableOverDrive+0x9c>)
 800151e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001522:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001524:	f7ff fcac 	bl	8000e80 <HAL_GetTick>
 8001528:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800152a:	e009      	b.n	8001540 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800152c:	f7ff fca8 	bl	8000e80 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800153a:	d901      	bls.n	8001540 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e007      	b.n	8001550 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800154c:	d1ee      	bne.n	800152c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	40007000 	.word	0x40007000

08001560 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e29b      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 8087 	beq.w	8001692 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001584:	4b96      	ldr	r3, [pc, #600]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 030c 	and.w	r3, r3, #12
 800158c:	2b04      	cmp	r3, #4
 800158e:	d00c      	beq.n	80015aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001590:	4b93      	ldr	r3, [pc, #588]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 030c 	and.w	r3, r3, #12
 8001598:	2b08      	cmp	r3, #8
 800159a:	d112      	bne.n	80015c2 <HAL_RCC_OscConfig+0x62>
 800159c:	4b90      	ldr	r3, [pc, #576]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015a8:	d10b      	bne.n	80015c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015aa:	4b8d      	ldr	r3, [pc, #564]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d06c      	beq.n	8001690 <HAL_RCC_OscConfig+0x130>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d168      	bne.n	8001690 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e275      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ca:	d106      	bne.n	80015da <HAL_RCC_OscConfig+0x7a>
 80015cc:	4b84      	ldr	r3, [pc, #528]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a83      	ldr	r2, [pc, #524]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80015d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	e02e      	b.n	8001638 <HAL_RCC_OscConfig+0xd8>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0x9c>
 80015e2:	4b7f      	ldr	r3, [pc, #508]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a7e      	ldr	r2, [pc, #504]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80015e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b7c      	ldr	r3, [pc, #496]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a7b      	ldr	r2, [pc, #492]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80015f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e01d      	b.n	8001638 <HAL_RCC_OscConfig+0xd8>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0xc0>
 8001606:	4b76      	ldr	r3, [pc, #472]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a75      	ldr	r2, [pc, #468]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 800160c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b73      	ldr	r3, [pc, #460]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a72      	ldr	r2, [pc, #456]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e00b      	b.n	8001638 <HAL_RCC_OscConfig+0xd8>
 8001620:	4b6f      	ldr	r3, [pc, #444]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a6e      	ldr	r2, [pc, #440]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b6c      	ldr	r3, [pc, #432]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a6b      	ldr	r2, [pc, #428]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d013      	beq.n	8001668 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff fc1e 	bl	8000e80 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff fc1a 	bl	8000e80 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e229      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	4b61      	ldr	r3, [pc, #388]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0xe8>
 8001666:	e014      	b.n	8001692 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fc0a 	bl	8000e80 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fc06 	bl	8000e80 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e215      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	4b57      	ldr	r3, [pc, #348]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x110>
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d069      	beq.n	8001772 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800169e:	4b50      	ldr	r3, [pc, #320]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00b      	beq.n	80016c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016aa:	4b4d      	ldr	r3, [pc, #308]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d11c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x190>
 80016b6:	4b4a      	ldr	r3, [pc, #296]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d116      	bne.n	80016f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c2:	4b47      	ldr	r3, [pc, #284]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <HAL_RCC_OscConfig+0x17a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d001      	beq.n	80016da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e1e9      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016da:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	493d      	ldr	r1, [pc, #244]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ee:	e040      	b.n	8001772 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d023      	beq.n	8001740 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f8:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a38      	ldr	r2, [pc, #224]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fbbc 	bl	8000e80 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff fbb8 	bl	8000e80 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e1c7      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171e:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4929      	ldr	r1, [pc, #164]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]
 800173e:	e018      	b.n	8001772 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001740:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a26      	ldr	r2, [pc, #152]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fb98 	bl	8000e80 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001754:	f7ff fb94 	bl	8000e80 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e1a3      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d038      	beq.n	80017f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d019      	beq.n	80017ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 8001788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800178a:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff fb75 	bl	8000e80 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179a:	f7ff fb71 	bl	8000e80 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e180      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80017ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x23a>
 80017b8:	e01a      	b.n	80017f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80017bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017be:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <HAL_RCC_OscConfig+0x280>)
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c6:	f7ff fb5b 	bl	8000e80 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ce:	f7ff fb57 	bl	8000e80 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d903      	bls.n	80017e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e166      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
 80017e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e4:	4b92      	ldr	r3, [pc, #584]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80017e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1ee      	bne.n	80017ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80a4 	beq.w	8001946 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017fe:	4b8c      	ldr	r3, [pc, #560]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10d      	bne.n	8001826 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b89      	ldr	r3, [pc, #548]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a88      	ldr	r2, [pc, #544]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b86      	ldr	r3, [pc, #536]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001822:	2301      	movs	r3, #1
 8001824:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001826:	4b83      	ldr	r3, [pc, #524]	; (8001a34 <HAL_RCC_OscConfig+0x4d4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182e:	2b00      	cmp	r3, #0
 8001830:	d118      	bne.n	8001864 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001832:	4b80      	ldr	r3, [pc, #512]	; (8001a34 <HAL_RCC_OscConfig+0x4d4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a7f      	ldr	r2, [pc, #508]	; (8001a34 <HAL_RCC_OscConfig+0x4d4>)
 8001838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183e:	f7ff fb1f 	bl	8000e80 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001846:	f7ff fb1b 	bl	8000e80 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b64      	cmp	r3, #100	; 0x64
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e12a      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001858:	4b76      	ldr	r3, [pc, #472]	; (8001a34 <HAL_RCC_OscConfig+0x4d4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x31a>
 800186c:	4b70      	ldr	r3, [pc, #448]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001870:	4a6f      	ldr	r2, [pc, #444]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6713      	str	r3, [r2, #112]	; 0x70
 8001878:	e02d      	b.n	80018d6 <HAL_RCC_OscConfig+0x376>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x33c>
 8001882:	4b6b      	ldr	r3, [pc, #428]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	4a6a      	ldr	r2, [pc, #424]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	6713      	str	r3, [r2, #112]	; 0x70
 800188e:	4b68      	ldr	r3, [pc, #416]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	4a67      	ldr	r2, [pc, #412]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001894:	f023 0304 	bic.w	r3, r3, #4
 8001898:	6713      	str	r3, [r2, #112]	; 0x70
 800189a:	e01c      	b.n	80018d6 <HAL_RCC_OscConfig+0x376>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	d10c      	bne.n	80018be <HAL_RCC_OscConfig+0x35e>
 80018a4:	4b62      	ldr	r3, [pc, #392]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a8:	4a61      	ldr	r2, [pc, #388]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	6713      	str	r3, [r2, #112]	; 0x70
 80018b0:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b4:	4a5e      	ldr	r2, [pc, #376]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6713      	str	r3, [r2, #112]	; 0x70
 80018bc:	e00b      	b.n	80018d6 <HAL_RCC_OscConfig+0x376>
 80018be:	4b5c      	ldr	r3, [pc, #368]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c2:	4a5b      	ldr	r2, [pc, #364]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ca:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ce:	4a58      	ldr	r2, [pc, #352]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018d0:	f023 0304 	bic.w	r3, r3, #4
 80018d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d015      	beq.n	800190a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018de:	f7ff facf 	bl	8000e80 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e4:	e00a      	b.n	80018fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7ff facb 	bl	8000e80 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e0d8      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fc:	4b4c      	ldr	r3, [pc, #304]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0ee      	beq.n	80018e6 <HAL_RCC_OscConfig+0x386>
 8001908:	e014      	b.n	8001934 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190a:	f7ff fab9 	bl	8000e80 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001910:	e00a      	b.n	8001928 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f7ff fab5 	bl	8000e80 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e0c2      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001928:	4b41      	ldr	r3, [pc, #260]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1ee      	bne.n	8001912 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d105      	bne.n	8001946 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800193a:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a3c      	ldr	r2, [pc, #240]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 80ae 	beq.w	8001aac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001950:	4b37      	ldr	r3, [pc, #220]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b08      	cmp	r3, #8
 800195a:	d06d      	beq.n	8001a38 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d14b      	bne.n	80019fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001964:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a31      	ldr	r2, [pc, #196]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 800196a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800196e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff fa86 	bl	8000e80 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff fa82 	bl	8000e80 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e091      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69da      	ldr	r2, [r3, #28]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	019b      	lsls	r3, r3, #6
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	3b01      	subs	r3, #1
 80019b0:	041b      	lsls	r3, r3, #16
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	061b      	lsls	r3, r3, #24
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	071b      	lsls	r3, r3, #28
 80019c2:	491b      	ldr	r1, [pc, #108]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c8:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80019ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff fa54 	bl	8000e80 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff fa50 	bl	8000e80 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e05f      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x47c>
 80019fa:	e057      	b.n	8001aac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a08:	f7ff fa3a 	bl	8000e80 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff fa36 	bl	8000e80 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e045      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a22:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_RCC_OscConfig+0x4d0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x4b0>
 8001a2e:	e03d      	b.n	8001aac <HAL_RCC_OscConfig+0x54c>
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a38:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <HAL_RCC_OscConfig+0x558>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d030      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d129      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d122      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a68:	4013      	ands	r3, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d119      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	085b      	lsrs	r3, r3, #1
 8001a80:	3b01      	subs	r3, #1
 8001a82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d10f      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d107      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800

08001abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0d0      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b6a      	ldr	r3, [pc, #424]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 030f 	and.w	r3, r3, #15
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d910      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b67      	ldr	r3, [pc, #412]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 020f 	bic.w	r2, r3, #15
 8001aea:	4965      	ldr	r1, [pc, #404]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b63      	ldr	r3, [pc, #396]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0b8      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b1c:	4b59      	ldr	r3, [pc, #356]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a58      	ldr	r2, [pc, #352]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b34:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a52      	ldr	r2, [pc, #328]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	494d      	ldr	r1, [pc, #308]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d040      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d115      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e07f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7e:	4b41      	ldr	r3, [pc, #260]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e073      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e06b      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b9e:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f023 0203 	bic.w	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4936      	ldr	r1, [pc, #216]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bb0:	f7ff f966 	bl	8000e80 <HAL_GetTick>
 8001bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb8:	f7ff f962 	bl	8000e80 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e053      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 020c 	and.w	r2, r3, #12
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d1eb      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d210      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 020f 	bic.w	r2, r3, #15
 8001bf6:	4922      	ldr	r1, [pc, #136]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e032      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4916      	ldr	r1, [pc, #88]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	490e      	ldr	r1, [pc, #56]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4e:	f000 f821 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCC_ClockConfig+0x1c8>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	490a      	ldr	r1, [pc, #40]	; (8001c88 <HAL_RCC_ClockConfig+0x1cc>)
 8001c60:	5ccb      	ldrb	r3, [r1, r3]
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <HAL_RCC_ClockConfig+0x1d0>)
 8001c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_RCC_ClockConfig+0x1d4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f8c2 	bl	8000df8 <HAL_InitTick>

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023c00 	.word	0x40023c00
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08004294 	.word	0x08004294
 8001c8c:	2000000c 	.word	0x2000000c
 8001c90:	20000010 	.word	0x20000010

08001c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	b5b0      	push	{r4, r5, r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	6079      	str	r1, [r7, #4]
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	60f9      	str	r1, [r7, #12]
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001caa:	4952      	ldr	r1, [pc, #328]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cac:	6889      	ldr	r1, [r1, #8]
 8001cae:	f001 010c 	and.w	r1, r1, #12
 8001cb2:	2908      	cmp	r1, #8
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x3e>
 8001cb6:	2908      	cmp	r1, #8
 8001cb8:	f200 8094 	bhi.w	8001de4 <HAL_RCC_GetSysClockFreq+0x150>
 8001cbc:	2900      	cmp	r1, #0
 8001cbe:	d002      	beq.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x32>
 8001cc0:	2904      	cmp	r1, #4
 8001cc2:	d003      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0x38>
 8001cc4:	e08e      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cc6:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001cc8:	60bb      	str	r3, [r7, #8]
      break;
 8001cca:	e08e      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ccc:	4b4b      	ldr	r3, [pc, #300]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x168>)
 8001cce:	60bb      	str	r3, [r7, #8]
      break;
 8001cd0:	e08b      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd2:	4948      	ldr	r1, [pc, #288]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cd4:	6849      	ldr	r1, [r1, #4]
 8001cd6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001cda:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001cdc:	4945      	ldr	r1, [pc, #276]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cde:	6849      	ldr	r1, [r1, #4]
 8001ce0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001ce4:	2900      	cmp	r1, #0
 8001ce6:	d024      	beq.n	8001d32 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce8:	4942      	ldr	r1, [pc, #264]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cea:	6849      	ldr	r1, [r1, #4]
 8001cec:	0989      	lsrs	r1, r1, #6
 8001cee:	4608      	mov	r0, r1
 8001cf0:	f04f 0100 	mov.w	r1, #0
 8001cf4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001cf8:	f04f 0500 	mov.w	r5, #0
 8001cfc:	ea00 0204 	and.w	r2, r0, r4
 8001d00:	ea01 0305 	and.w	r3, r1, r5
 8001d04:	493d      	ldr	r1, [pc, #244]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x168>)
 8001d06:	fb01 f003 	mul.w	r0, r1, r3
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	fb01 f102 	mul.w	r1, r1, r2
 8001d10:	1844      	adds	r4, r0, r1
 8001d12:	493a      	ldr	r1, [pc, #232]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x168>)
 8001d14:	fba2 0101 	umull	r0, r1, r2, r1
 8001d18:	1863      	adds	r3, r4, r1
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	f7fe fae4 	bl	80002f0 <__aeabi_uldivmod>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	e04a      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d32:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	099b      	lsrs	r3, r3, #6
 8001d38:	461a      	mov	r2, r3
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d42:	f04f 0100 	mov.w	r1, #0
 8001d46:	ea02 0400 	and.w	r4, r2, r0
 8001d4a:	ea03 0501 	and.w	r5, r3, r1
 8001d4e:	4620      	mov	r0, r4
 8001d50:	4629      	mov	r1, r5
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	014b      	lsls	r3, r1, #5
 8001d5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d60:	0142      	lsls	r2, r0, #5
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	1b00      	subs	r0, r0, r4
 8001d68:	eb61 0105 	sbc.w	r1, r1, r5
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	018b      	lsls	r3, r1, #6
 8001d76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d7a:	0182      	lsls	r2, r0, #6
 8001d7c:	1a12      	subs	r2, r2, r0
 8001d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d82:	f04f 0000 	mov.w	r0, #0
 8001d86:	f04f 0100 	mov.w	r1, #0
 8001d8a:	00d9      	lsls	r1, r3, #3
 8001d8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d90:	00d0      	lsls	r0, r2, #3
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	1912      	adds	r2, r2, r4
 8001d98:	eb45 0303 	adc.w	r3, r5, r3
 8001d9c:	f04f 0000 	mov.w	r0, #0
 8001da0:	f04f 0100 	mov.w	r1, #0
 8001da4:	0299      	lsls	r1, r3, #10
 8001da6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001daa:	0290      	lsls	r0, r2, #10
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	461a      	mov	r2, r3
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	f7fe fa98 	bl	80002f0 <__aeabi_uldivmod>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	0c1b      	lsrs	r3, r3, #16
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	60bb      	str	r3, [r7, #8]
      break;
 8001de2:	e002      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001de6:	60bb      	str	r3, [r7, #8]
      break;
 8001de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dea:	68bb      	ldr	r3, [r7, #8]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bdb0      	pop	{r4, r5, r7, pc}
 8001df4:	40023800 	.word	0x40023800
 8001df8:	00f42400 	.word	0x00f42400
 8001dfc:	017d7840 	.word	0x017d7840

08001e00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	2000000c 	.word	0x2000000c

08001e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e1c:	f7ff fff0 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0a9b      	lsrs	r3, r3, #10
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	080042a4 	.word	0x080042a4

08001e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e44:	f7ff ffdc 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	0b5b      	lsrs	r3, r3, #13
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	4903      	ldr	r1, [pc, #12]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	080042a4 	.word	0x080042a4

08001e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d012      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e90:	4b69      	ldr	r3, [pc, #420]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4a68      	ldr	r2, [pc, #416]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e9a:	6093      	str	r3, [r2, #8]
 8001e9c:	4b66      	ldr	r3, [pc, #408]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea4:	4964      	ldr	r1, [pc, #400]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d017      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ec2:	4b5d      	ldr	r3, [pc, #372]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ec8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed0:	4959      	ldr	r1, [pc, #356]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d017      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001efe:	4b4e      	ldr	r3, [pc, #312]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	494a      	ldr	r1, [pc, #296]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 808b 	beq.w	8002062 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f4c:	4b3a      	ldr	r3, [pc, #232]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	4a39      	ldr	r2, [pc, #228]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f56:	6413      	str	r3, [r2, #64]	; 0x40
 8001f58:	4b37      	ldr	r3, [pc, #220]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f64:	4b35      	ldr	r3, [pc, #212]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a34      	ldr	r2, [pc, #208]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f70:	f7fe ff86 	bl	8000e80 <HAL_GetTick>
 8001f74:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f78:	f7fe ff82 	bl	8000e80 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e38f      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f96:	4b28      	ldr	r3, [pc, #160]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d035      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d02e      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fb4:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fbc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc2:	4a1d      	ldr	r2, [pc, #116]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fce:	4a1a      	ldr	r2, [pc, #104]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001fd6:	4a18      	ldr	r2, [pc, #96]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001fdc:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d114      	bne.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7fe ff4a 	bl	8000e80 <HAL_GetTick>
 8001fec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fee:	e00a      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff0:	f7fe ff46 	bl	8000e80 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e351      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0ee      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800201a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800201e:	d111      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800202e:	400b      	ands	r3, r1
 8002030:	4901      	ldr	r1, [pc, #4]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
 8002036:	e00b      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002038:	40023800 	.word	0x40023800
 800203c:	40007000 	.word	0x40007000
 8002040:	0ffffcff 	.word	0x0ffffcff
 8002044:	4bb3      	ldr	r3, [pc, #716]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4ab2      	ldr	r2, [pc, #712]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800204a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800204e:	6093      	str	r3, [r2, #8]
 8002050:	4bb0      	ldr	r3, [pc, #704]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002052:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205c:	49ad      	ldr	r1, [pc, #692]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800205e:	4313      	orrs	r3, r2
 8002060:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b00      	cmp	r3, #0
 800206c:	d010      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800206e:	4ba9      	ldr	r3, [pc, #676]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002074:	4aa7      	ldr	r2, [pc, #668]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800207a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800207e:	4ba5      	ldr	r3, [pc, #660]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002080:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002088:	49a2      	ldr	r1, [pc, #648]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00a      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800209c:	4b9d      	ldr	r3, [pc, #628]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020aa:	499a      	ldr	r1, [pc, #616]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020be:	4b95      	ldr	r3, [pc, #596]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020cc:	4991      	ldr	r1, [pc, #580]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020e0:	4b8c      	ldr	r3, [pc, #560]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ee:	4989      	ldr	r1, [pc, #548]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002102:	4b84      	ldr	r3, [pc, #528]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002108:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002110:	4980      	ldr	r1, [pc, #512]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002124:	4b7b      	ldr	r3, [pc, #492]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	f023 0203 	bic.w	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4978      	ldr	r1, [pc, #480]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002146:	4b73      	ldr	r3, [pc, #460]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214c:	f023 020c 	bic.w	r2, r3, #12
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002154:	496f      	ldr	r1, [pc, #444]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002168:	4b6a      	ldr	r3, [pc, #424]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002176:	4967      	ldr	r1, [pc, #412]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800218a:	4b62      	ldr	r3, [pc, #392]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002190:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002198:	495e      	ldr	r1, [pc, #376]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021ac:	4b59      	ldr	r3, [pc, #356]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ba:	4956      	ldr	r1, [pc, #344]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80021ce:	4b51      	ldr	r3, [pc, #324]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	494d      	ldr	r1, [pc, #308]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80021f0:	4b48      	ldr	r3, [pc, #288]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fe:	4945      	ldr	r1, [pc, #276]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002212:	4b40      	ldr	r3, [pc, #256]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002218:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002220:	493c      	ldr	r1, [pc, #240]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002234:	4b37      	ldr	r3, [pc, #220]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002242:	4934      	ldr	r1, [pc, #208]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d011      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002256:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002264:	492b      	ldr	r1, [pc, #172]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002274:	d101      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002276:	2301      	movs	r3, #1
 8002278:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002286:	2301      	movs	r3, #1
 8002288:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002296:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a4:	491b      	ldr	r1, [pc, #108]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00b      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022b8:	4b16      	ldr	r3, [pc, #88]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022c8:	4912      	ldr	r1, [pc, #72]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00b      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ec:	4909      	ldr	r1, [pc, #36]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00f      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002306:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002310:	e002      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	4986      	ldr	r1, [pc, #536]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00b      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800232c:	4b81      	ldr	r3, [pc, #516]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800232e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002332:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800233c:	497d      	ldr	r1, [pc, #500]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d006      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 80d6 	beq.w	8002504 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002358:	4b76      	ldr	r3, [pc, #472]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a75      	ldr	r2, [pc, #468]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800235e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002362:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002364:	f7fe fd8c 	bl	8000e80 <HAL_GetTick>
 8002368:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800236c:	f7fe fd88 	bl	8000e80 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	; 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e195      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800237e:	4b6d      	ldr	r3, [pc, #436]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d021      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239a:	2b00      	cmp	r3, #0
 800239c:	d11d      	bne.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800239e:	4b65      	ldr	r3, [pc, #404]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023a4:	0c1b      	lsrs	r3, r3, #16
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023ac:	4b61      	ldr	r3, [pc, #388]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023b2:	0e1b      	lsrs	r3, r3, #24
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	019a      	lsls	r2, r3, #6
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	041b      	lsls	r3, r3, #16
 80023c4:	431a      	orrs	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	061b      	lsls	r3, r3, #24
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	071b      	lsls	r3, r3, #28
 80023d2:	4958      	ldr	r1, [pc, #352]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d004      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d02e      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002404:	d129      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002406:	4b4b      	ldr	r3, [pc, #300]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002414:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800241a:	0f1b      	lsrs	r3, r3, #28
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	019a      	lsls	r2, r3, #6
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	041b      	lsls	r3, r3, #16
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	061b      	lsls	r3, r3, #24
 8002434:	431a      	orrs	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	071b      	lsls	r3, r3, #28
 800243a:	493e      	ldr	r1, [pc, #248]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002442:	4b3c      	ldr	r3, [pc, #240]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002448:	f023 021f 	bic.w	r2, r3, #31
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	3b01      	subs	r3, #1
 8002452:	4938      	ldr	r1, [pc, #224]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01d      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002466:	4b33      	ldr	r3, [pc, #204]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800246c:	0e1b      	lsrs	r3, r3, #24
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002474:	4b2f      	ldr	r3, [pc, #188]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800247a:	0f1b      	lsrs	r3, r3, #28
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	019a      	lsls	r2, r3, #6
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	041b      	lsls	r3, r3, #16
 800248e:	431a      	orrs	r2, r3
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	061b      	lsls	r3, r3, #24
 8002494:	431a      	orrs	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	071b      	lsls	r3, r3, #28
 800249a:	4926      	ldr	r1, [pc, #152]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d011      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	019a      	lsls	r2, r3, #6
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	041b      	lsls	r3, r3, #16
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	061b      	lsls	r3, r3, #24
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	071b      	lsls	r3, r3, #28
 80024ca:	491a      	ldr	r1, [pc, #104]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024d2:	4b18      	ldr	r3, [pc, #96]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a17      	ldr	r2, [pc, #92]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024de:	f7fe fccf 	bl	8000e80 <HAL_GetTick>
 80024e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024e6:	f7fe fccb 	bl	8000e80 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b64      	cmp	r3, #100	; 0x64
 80024f2:	d901      	bls.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e0d8      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024f8:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2b01      	cmp	r3, #1
 8002508:	f040 80ce 	bne.w	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a08      	ldr	r2, [pc, #32]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002516:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002518:	f7fe fcb2 	bl	8000e80 <HAL_GetTick>
 800251c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800251e:	e00b      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002520:	f7fe fcae 	bl	8000e80 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d904      	bls.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e0bb      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002538:	4b5e      	ldr	r3, [pc, #376]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002544:	d0ec      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002562:	2b00      	cmp	r3, #0
 8002564:	d02e      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d12a      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800256e:	4b51      	ldr	r3, [pc, #324]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800257c:	4b4d      	ldr	r3, [pc, #308]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	0f1b      	lsrs	r3, r3, #28
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	019a      	lsls	r2, r3, #6
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	041b      	lsls	r3, r3, #16
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	061b      	lsls	r3, r3, #24
 800259c:	431a      	orrs	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	071b      	lsls	r3, r3, #28
 80025a2:	4944      	ldr	r1, [pc, #272]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80025aa:	4b42      	ldr	r3, [pc, #264]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	3b01      	subs	r3, #1
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	493d      	ldr	r1, [pc, #244]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d022      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025d8:	d11d      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025da:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	0e1b      	lsrs	r3, r3, #24
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025e8:	4b32      	ldr	r3, [pc, #200]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ee:	0f1b      	lsrs	r3, r3, #28
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	019a      	lsls	r2, r3, #6
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	431a      	orrs	r2, r3
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	061b      	lsls	r3, r3, #24
 8002608:	431a      	orrs	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	071b      	lsls	r3, r3, #28
 800260e:	4929      	ldr	r1, [pc, #164]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d028      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002622:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002628:	0e1b      	lsrs	r3, r3, #24
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002630:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	0c1b      	lsrs	r3, r3, #16
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	019a      	lsls	r2, r3, #6
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	041b      	lsls	r3, r3, #16
 8002648:	431a      	orrs	r2, r3
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	061b      	lsls	r3, r3, #24
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	071b      	lsls	r3, r3, #28
 8002656:	4917      	ldr	r1, [pc, #92]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	4911      	ldr	r1, [pc, #68]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002674:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0e      	ldr	r2, [pc, #56]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800267a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002680:	f7fe fbfe 	bl	8000e80 <HAL_GetTick>
 8002684:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002688:	f7fe fbfa 	bl	8000e80 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	; 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e007      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026a6:	d1ef      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800

080026b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e049      	b.n	800275e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe faa0 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3304      	adds	r3, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f000 fac6 	bl	8002c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d001      	beq.n	8002780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e054      	b.n	800282a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a26      	ldr	r2, [pc, #152]	; (8002838 <HAL_TIM_Base_Start_IT+0xd0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d022      	beq.n	80027e8 <HAL_TIM_Base_Start_IT+0x80>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027aa:	d01d      	beq.n	80027e8 <HAL_TIM_Base_Start_IT+0x80>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a22      	ldr	r2, [pc, #136]	; (800283c <HAL_TIM_Base_Start_IT+0xd4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d018      	beq.n	80027e8 <HAL_TIM_Base_Start_IT+0x80>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a21      	ldr	r2, [pc, #132]	; (8002840 <HAL_TIM_Base_Start_IT+0xd8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d013      	beq.n	80027e8 <HAL_TIM_Base_Start_IT+0x80>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1f      	ldr	r2, [pc, #124]	; (8002844 <HAL_TIM_Base_Start_IT+0xdc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00e      	beq.n	80027e8 <HAL_TIM_Base_Start_IT+0x80>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1e      	ldr	r2, [pc, #120]	; (8002848 <HAL_TIM_Base_Start_IT+0xe0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d009      	beq.n	80027e8 <HAL_TIM_Base_Start_IT+0x80>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1c      	ldr	r2, [pc, #112]	; (800284c <HAL_TIM_Base_Start_IT+0xe4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d004      	beq.n	80027e8 <HAL_TIM_Base_Start_IT+0x80>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <HAL_TIM_Base_Start_IT+0xe8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d115      	bne.n	8002814 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_TIM_Base_Start_IT+0xec>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d015      	beq.n	8002826 <HAL_TIM_Base_Start_IT+0xbe>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002800:	d011      	beq.n	8002826 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002812:	e008      	b.n	8002826 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	e000      	b.n	8002828 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002826:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40010000 	.word	0x40010000
 800283c:	40000400 	.word	0x40000400
 8002840:	40000800 	.word	0x40000800
 8002844:	40000c00 	.word	0x40000c00
 8002848:	40010400 	.word	0x40010400
 800284c:	40014000 	.word	0x40014000
 8002850:	40001800 	.word	0x40001800
 8002854:	00010007 	.word	0x00010007

08002858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b02      	cmp	r3, #2
 800286c:	d122      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b02      	cmp	r3, #2
 800287a:	d11b      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0202 	mvn.w	r2, #2
 8002884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f9d6 	bl	8002c4c <HAL_TIM_IC_CaptureCallback>
 80028a0:	e005      	b.n	80028ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f9c8 	bl	8002c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f9d9 	bl	8002c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d122      	bne.n	8002908 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d11b      	bne.n	8002908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0204 	mvn.w	r2, #4
 80028d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2202      	movs	r2, #2
 80028de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f9ac 	bl	8002c4c <HAL_TIM_IC_CaptureCallback>
 80028f4:	e005      	b.n	8002902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f99e 	bl	8002c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f9af 	bl	8002c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b08      	cmp	r3, #8
 8002914:	d122      	bne.n	800295c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b08      	cmp	r3, #8
 8002922:	d11b      	bne.n	800295c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0208 	mvn.w	r2, #8
 800292c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2204      	movs	r2, #4
 8002932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f982 	bl	8002c4c <HAL_TIM_IC_CaptureCallback>
 8002948:	e005      	b.n	8002956 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f974 	bl	8002c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f985 	bl	8002c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b10      	cmp	r3, #16
 8002968:	d122      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b10      	cmp	r3, #16
 8002976:	d11b      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0210 	mvn.w	r2, #16
 8002980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2208      	movs	r2, #8
 8002986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f958 	bl	8002c4c <HAL_TIM_IC_CaptureCallback>
 800299c:	e005      	b.n	80029aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f94a 	bl	8002c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f95b 	bl	8002c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d10e      	bne.n	80029dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d107      	bne.n	80029dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0201 	mvn.w	r2, #1
 80029d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f924 	bl	8002c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e6:	2b80      	cmp	r3, #128	; 0x80
 80029e8:	d10e      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f4:	2b80      	cmp	r3, #128	; 0x80
 80029f6:	d107      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fb12 	bl	800302c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a16:	d10e      	bne.n	8002a36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a22:	2b80      	cmp	r3, #128	; 0x80
 8002a24:	d107      	bne.n	8002a36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 fb05 	bl	8003040 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a40:	2b40      	cmp	r3, #64	; 0x40
 8002a42:	d10e      	bne.n	8002a62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4e:	2b40      	cmp	r3, #64	; 0x40
 8002a50:	d107      	bne.n	8002a62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f909 	bl	8002c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d10e      	bne.n	8002a8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d107      	bne.n	8002a8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f06f 0220 	mvn.w	r2, #32
 8002a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fac5 	bl	8003018 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_TIM_ConfigClockSource+0x18>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e0b3      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x180>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4b55      	ldr	r3, [pc, #340]	; (8002c20 <HAL_TIM_ConfigClockSource+0x188>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ad6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae8:	d03e      	beq.n	8002b68 <HAL_TIM_ConfigClockSource+0xd0>
 8002aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aee:	f200 8087 	bhi.w	8002c00 <HAL_TIM_ConfigClockSource+0x168>
 8002af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af6:	f000 8085 	beq.w	8002c04 <HAL_TIM_ConfigClockSource+0x16c>
 8002afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afe:	d87f      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x168>
 8002b00:	2b70      	cmp	r3, #112	; 0x70
 8002b02:	d01a      	beq.n	8002b3a <HAL_TIM_ConfigClockSource+0xa2>
 8002b04:	2b70      	cmp	r3, #112	; 0x70
 8002b06:	d87b      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x168>
 8002b08:	2b60      	cmp	r3, #96	; 0x60
 8002b0a:	d050      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0x116>
 8002b0c:	2b60      	cmp	r3, #96	; 0x60
 8002b0e:	d877      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x168>
 8002b10:	2b50      	cmp	r3, #80	; 0x50
 8002b12:	d03c      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0xf6>
 8002b14:	2b50      	cmp	r3, #80	; 0x50
 8002b16:	d873      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x168>
 8002b18:	2b40      	cmp	r3, #64	; 0x40
 8002b1a:	d058      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x136>
 8002b1c:	2b40      	cmp	r3, #64	; 0x40
 8002b1e:	d86f      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x168>
 8002b20:	2b30      	cmp	r3, #48	; 0x30
 8002b22:	d064      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x156>
 8002b24:	2b30      	cmp	r3, #48	; 0x30
 8002b26:	d86b      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x168>
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d060      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x156>
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d867      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x168>
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d05c      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x156>
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d05a      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b38:	e062      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6899      	ldr	r1, [r3, #8]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f000 f9b7 	bl	8002ebc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	609a      	str	r2, [r3, #8]
      break;
 8002b66:	e04e      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6899      	ldr	r1, [r3, #8]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f000 f9a0 	bl	8002ebc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b8a:	609a      	str	r2, [r3, #8]
      break;
 8002b8c:	e03b      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6859      	ldr	r1, [r3, #4]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f000 f914 	bl	8002dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2150      	movs	r1, #80	; 0x50
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 f96d 	bl	8002e86 <TIM_ITRx_SetConfig>
      break;
 8002bac:	e02b      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f000 f933 	bl	8002e26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2160      	movs	r1, #96	; 0x60
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 f95d 	bl	8002e86 <TIM_ITRx_SetConfig>
      break;
 8002bcc:	e01b      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6859      	ldr	r1, [r3, #4]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f000 f8f4 	bl	8002dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2140      	movs	r1, #64	; 0x40
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 f94d 	bl	8002e86 <TIM_ITRx_SetConfig>
      break;
 8002bec:	e00b      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f000 f944 	bl	8002e86 <TIM_ITRx_SetConfig>
        break;
 8002bfe:	e002      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c00:	bf00      	nop
 8002c02:	e000      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	fffeff88 	.word	0xfffeff88

08002c24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a40      	ldr	r2, [pc, #256]	; (8002d9c <TIM_Base_SetConfig+0x114>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d013      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca6:	d00f      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a3d      	ldr	r2, [pc, #244]	; (8002da0 <TIM_Base_SetConfig+0x118>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00b      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a3c      	ldr	r2, [pc, #240]	; (8002da4 <TIM_Base_SetConfig+0x11c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d007      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a3b      	ldr	r2, [pc, #236]	; (8002da8 <TIM_Base_SetConfig+0x120>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d003      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a3a      	ldr	r2, [pc, #232]	; (8002dac <TIM_Base_SetConfig+0x124>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d108      	bne.n	8002cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a2f      	ldr	r2, [pc, #188]	; (8002d9c <TIM_Base_SetConfig+0x114>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d02b      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce8:	d027      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2c      	ldr	r2, [pc, #176]	; (8002da0 <TIM_Base_SetConfig+0x118>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d023      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a2b      	ldr	r2, [pc, #172]	; (8002da4 <TIM_Base_SetConfig+0x11c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d01f      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2a      	ldr	r2, [pc, #168]	; (8002da8 <TIM_Base_SetConfig+0x120>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01b      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a29      	ldr	r2, [pc, #164]	; (8002dac <TIM_Base_SetConfig+0x124>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d017      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a28      	ldr	r2, [pc, #160]	; (8002db0 <TIM_Base_SetConfig+0x128>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a27      	ldr	r2, [pc, #156]	; (8002db4 <TIM_Base_SetConfig+0x12c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00f      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a26      	ldr	r2, [pc, #152]	; (8002db8 <TIM_Base_SetConfig+0x130>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00b      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a25      	ldr	r2, [pc, #148]	; (8002dbc <TIM_Base_SetConfig+0x134>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d007      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a24      	ldr	r2, [pc, #144]	; (8002dc0 <TIM_Base_SetConfig+0x138>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d003      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a23      	ldr	r2, [pc, #140]	; (8002dc4 <TIM_Base_SetConfig+0x13c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d108      	bne.n	8002d4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <TIM_Base_SetConfig+0x114>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d003      	beq.n	8002d80 <TIM_Base_SetConfig+0xf8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a0c      	ldr	r2, [pc, #48]	; (8002dac <TIM_Base_SetConfig+0x124>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d103      	bne.n	8002d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	615a      	str	r2, [r3, #20]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40000800 	.word	0x40000800
 8002da8:	40000c00 	.word	0x40000c00
 8002dac:	40010400 	.word	0x40010400
 8002db0:	40014000 	.word	0x40014000
 8002db4:	40014400 	.word	0x40014400
 8002db8:	40014800 	.word	0x40014800
 8002dbc:	40001800 	.word	0x40001800
 8002dc0:	40001c00 	.word	0x40001c00
 8002dc4:	40002000 	.word	0x40002000

08002dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	f023 0201 	bic.w	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f023 030a 	bic.w	r3, r3, #10
 8002e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	621a      	str	r2, [r3, #32]
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b087      	sub	sp, #28
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	f023 0210 	bic.w	r2, r3, #16
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	031b      	lsls	r3, r3, #12
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	621a      	str	r2, [r3, #32]
}
 8002e7a:	bf00      	nop
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f043 0307 	orr.w	r3, r3, #7
 8002ea8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	609a      	str	r2, [r3, #8]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	021a      	lsls	r2, r3, #8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	609a      	str	r2, [r3, #8]
}
 8002ef0:	bf00      	nop
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e06d      	b.n	8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a30      	ldr	r2, [pc, #192]	; (8002ffc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a2f      	ldr	r2, [pc, #188]	; (8003000 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d108      	bne.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a20      	ldr	r2, [pc, #128]	; (8002ffc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d022      	beq.n	8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f86:	d01d      	beq.n	8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1d      	ldr	r2, [pc, #116]	; (8003004 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d018      	beq.n	8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1c      	ldr	r2, [pc, #112]	; (8003008 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d013      	beq.n	8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1a      	ldr	r2, [pc, #104]	; (800300c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00e      	beq.n	8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a15      	ldr	r2, [pc, #84]	; (8003000 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d009      	beq.n	8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a16      	ldr	r2, [pc, #88]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a15      	ldr	r2, [pc, #84]	; (8003014 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d10c      	bne.n	8002fde <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40010000 	.word	0x40010000
 8003000:	40010400 	.word	0x40010400
 8003004:	40000400 	.word	0x40000400
 8003008:	40000800 	.word	0x40000800
 800300c:	40000c00 	.word	0x40000c00
 8003010:	40014000 	.word	0x40014000
 8003014:	40001800 	.word	0x40001800

08003018 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e040      	b.n	80030e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fd fe44 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2224      	movs	r2, #36	; 0x24
 8003080:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0201 	bic.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f8c0 	bl	8003218 <UART_SetConfig>
 8003098:	4603      	mov	r3, r0
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e022      	b.n	80030e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fb16 	bl	80036dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fb9d 	bl	8003820 <UART_CheckIdleState>
 80030e6:	4603      	mov	r3, r0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	; 0x28
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	4613      	mov	r3, r2
 80030fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003104:	2b20      	cmp	r3, #32
 8003106:	f040 8081 	bne.w	800320c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <HAL_UART_Transmit+0x26>
 8003110:	88fb      	ldrh	r3, [r7, #6]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e079      	b.n	800320e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_UART_Transmit+0x38>
 8003124:	2302      	movs	r3, #2
 8003126:	e072      	b.n	800320e <HAL_UART_Transmit+0x11e>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2221      	movs	r2, #33	; 0x21
 800313c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800313e:	f7fd fe9f 	bl	8000e80 <HAL_GetTick>
 8003142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	88fa      	ldrh	r2, [r7, #6]
 8003148:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	88fa      	ldrh	r2, [r7, #6]
 8003150:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315c:	d108      	bne.n	8003170 <HAL_UART_Transmit+0x80>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d104      	bne.n	8003170 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	e003      	b.n	8003178 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003174:	2300      	movs	r3, #0
 8003176:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003180:	e02c      	b.n	80031dc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2200      	movs	r2, #0
 800318a:	2180      	movs	r1, #128	; 0x80
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fb90 	bl	80038b2 <UART_WaitOnFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e038      	b.n	800320e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10b      	bne.n	80031ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	3302      	adds	r3, #2
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	e007      	b.n	80031ca <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	3301      	adds	r3, #1
 80031c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1cc      	bne.n	8003182 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2200      	movs	r2, #0
 80031f0:	2140      	movs	r1, #64	; 0x40
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fb5d 	bl	80038b2 <UART_WaitOnFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e005      	b.n	800320e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	e000      	b.n	800320e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800320c:	2302      	movs	r3, #2
  }
}
 800320e:	4618      	mov	r0, r3
 8003210:	3720      	adds	r7, #32
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4ba7      	ldr	r3, [pc, #668]	; (80034e0 <UART_SetConfig+0x2c8>)
 8003244:	4013      	ands	r3, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	6979      	ldr	r1, [r7, #20]
 800324c:	430b      	orrs	r3, r1
 800324e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a95      	ldr	r2, [pc, #596]	; (80034e4 <UART_SetConfig+0x2cc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d120      	bne.n	80032d6 <UART_SetConfig+0xbe>
 8003294:	4b94      	ldr	r3, [pc, #592]	; (80034e8 <UART_SetConfig+0x2d0>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d816      	bhi.n	80032d0 <UART_SetConfig+0xb8>
 80032a2:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <UART_SetConfig+0x90>)
 80032a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a8:	080032b9 	.word	0x080032b9
 80032ac:	080032c5 	.word	0x080032c5
 80032b0:	080032bf 	.word	0x080032bf
 80032b4:	080032cb 	.word	0x080032cb
 80032b8:	2301      	movs	r3, #1
 80032ba:	77fb      	strb	r3, [r7, #31]
 80032bc:	e14f      	b.n	800355e <UART_SetConfig+0x346>
 80032be:	2302      	movs	r3, #2
 80032c0:	77fb      	strb	r3, [r7, #31]
 80032c2:	e14c      	b.n	800355e <UART_SetConfig+0x346>
 80032c4:	2304      	movs	r3, #4
 80032c6:	77fb      	strb	r3, [r7, #31]
 80032c8:	e149      	b.n	800355e <UART_SetConfig+0x346>
 80032ca:	2308      	movs	r3, #8
 80032cc:	77fb      	strb	r3, [r7, #31]
 80032ce:	e146      	b.n	800355e <UART_SetConfig+0x346>
 80032d0:	2310      	movs	r3, #16
 80032d2:	77fb      	strb	r3, [r7, #31]
 80032d4:	e143      	b.n	800355e <UART_SetConfig+0x346>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a84      	ldr	r2, [pc, #528]	; (80034ec <UART_SetConfig+0x2d4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d132      	bne.n	8003346 <UART_SetConfig+0x12e>
 80032e0:	4b81      	ldr	r3, [pc, #516]	; (80034e8 <UART_SetConfig+0x2d0>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	d828      	bhi.n	8003340 <UART_SetConfig+0x128>
 80032ee:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <UART_SetConfig+0xdc>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	08003329 	.word	0x08003329
 80032f8:	08003341 	.word	0x08003341
 80032fc:	08003341 	.word	0x08003341
 8003300:	08003341 	.word	0x08003341
 8003304:	08003335 	.word	0x08003335
 8003308:	08003341 	.word	0x08003341
 800330c:	08003341 	.word	0x08003341
 8003310:	08003341 	.word	0x08003341
 8003314:	0800332f 	.word	0x0800332f
 8003318:	08003341 	.word	0x08003341
 800331c:	08003341 	.word	0x08003341
 8003320:	08003341 	.word	0x08003341
 8003324:	0800333b 	.word	0x0800333b
 8003328:	2300      	movs	r3, #0
 800332a:	77fb      	strb	r3, [r7, #31]
 800332c:	e117      	b.n	800355e <UART_SetConfig+0x346>
 800332e:	2302      	movs	r3, #2
 8003330:	77fb      	strb	r3, [r7, #31]
 8003332:	e114      	b.n	800355e <UART_SetConfig+0x346>
 8003334:	2304      	movs	r3, #4
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	e111      	b.n	800355e <UART_SetConfig+0x346>
 800333a:	2308      	movs	r3, #8
 800333c:	77fb      	strb	r3, [r7, #31]
 800333e:	e10e      	b.n	800355e <UART_SetConfig+0x346>
 8003340:	2310      	movs	r3, #16
 8003342:	77fb      	strb	r3, [r7, #31]
 8003344:	e10b      	b.n	800355e <UART_SetConfig+0x346>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a69      	ldr	r2, [pc, #420]	; (80034f0 <UART_SetConfig+0x2d8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d120      	bne.n	8003392 <UART_SetConfig+0x17a>
 8003350:	4b65      	ldr	r3, [pc, #404]	; (80034e8 <UART_SetConfig+0x2d0>)
 8003352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003356:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800335a:	2b30      	cmp	r3, #48	; 0x30
 800335c:	d013      	beq.n	8003386 <UART_SetConfig+0x16e>
 800335e:	2b30      	cmp	r3, #48	; 0x30
 8003360:	d814      	bhi.n	800338c <UART_SetConfig+0x174>
 8003362:	2b20      	cmp	r3, #32
 8003364:	d009      	beq.n	800337a <UART_SetConfig+0x162>
 8003366:	2b20      	cmp	r3, #32
 8003368:	d810      	bhi.n	800338c <UART_SetConfig+0x174>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <UART_SetConfig+0x15c>
 800336e:	2b10      	cmp	r3, #16
 8003370:	d006      	beq.n	8003380 <UART_SetConfig+0x168>
 8003372:	e00b      	b.n	800338c <UART_SetConfig+0x174>
 8003374:	2300      	movs	r3, #0
 8003376:	77fb      	strb	r3, [r7, #31]
 8003378:	e0f1      	b.n	800355e <UART_SetConfig+0x346>
 800337a:	2302      	movs	r3, #2
 800337c:	77fb      	strb	r3, [r7, #31]
 800337e:	e0ee      	b.n	800355e <UART_SetConfig+0x346>
 8003380:	2304      	movs	r3, #4
 8003382:	77fb      	strb	r3, [r7, #31]
 8003384:	e0eb      	b.n	800355e <UART_SetConfig+0x346>
 8003386:	2308      	movs	r3, #8
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	e0e8      	b.n	800355e <UART_SetConfig+0x346>
 800338c:	2310      	movs	r3, #16
 800338e:	77fb      	strb	r3, [r7, #31]
 8003390:	e0e5      	b.n	800355e <UART_SetConfig+0x346>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a57      	ldr	r2, [pc, #348]	; (80034f4 <UART_SetConfig+0x2dc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d120      	bne.n	80033de <UART_SetConfig+0x1c6>
 800339c:	4b52      	ldr	r3, [pc, #328]	; (80034e8 <UART_SetConfig+0x2d0>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033a6:	2bc0      	cmp	r3, #192	; 0xc0
 80033a8:	d013      	beq.n	80033d2 <UART_SetConfig+0x1ba>
 80033aa:	2bc0      	cmp	r3, #192	; 0xc0
 80033ac:	d814      	bhi.n	80033d8 <UART_SetConfig+0x1c0>
 80033ae:	2b80      	cmp	r3, #128	; 0x80
 80033b0:	d009      	beq.n	80033c6 <UART_SetConfig+0x1ae>
 80033b2:	2b80      	cmp	r3, #128	; 0x80
 80033b4:	d810      	bhi.n	80033d8 <UART_SetConfig+0x1c0>
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <UART_SetConfig+0x1a8>
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d006      	beq.n	80033cc <UART_SetConfig+0x1b4>
 80033be:	e00b      	b.n	80033d8 <UART_SetConfig+0x1c0>
 80033c0:	2300      	movs	r3, #0
 80033c2:	77fb      	strb	r3, [r7, #31]
 80033c4:	e0cb      	b.n	800355e <UART_SetConfig+0x346>
 80033c6:	2302      	movs	r3, #2
 80033c8:	77fb      	strb	r3, [r7, #31]
 80033ca:	e0c8      	b.n	800355e <UART_SetConfig+0x346>
 80033cc:	2304      	movs	r3, #4
 80033ce:	77fb      	strb	r3, [r7, #31]
 80033d0:	e0c5      	b.n	800355e <UART_SetConfig+0x346>
 80033d2:	2308      	movs	r3, #8
 80033d4:	77fb      	strb	r3, [r7, #31]
 80033d6:	e0c2      	b.n	800355e <UART_SetConfig+0x346>
 80033d8:	2310      	movs	r3, #16
 80033da:	77fb      	strb	r3, [r7, #31]
 80033dc:	e0bf      	b.n	800355e <UART_SetConfig+0x346>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a45      	ldr	r2, [pc, #276]	; (80034f8 <UART_SetConfig+0x2e0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d125      	bne.n	8003434 <UART_SetConfig+0x21c>
 80033e8:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <UART_SetConfig+0x2d0>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f6:	d017      	beq.n	8003428 <UART_SetConfig+0x210>
 80033f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033fc:	d817      	bhi.n	800342e <UART_SetConfig+0x216>
 80033fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003402:	d00b      	beq.n	800341c <UART_SetConfig+0x204>
 8003404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003408:	d811      	bhi.n	800342e <UART_SetConfig+0x216>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <UART_SetConfig+0x1fe>
 800340e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003412:	d006      	beq.n	8003422 <UART_SetConfig+0x20a>
 8003414:	e00b      	b.n	800342e <UART_SetConfig+0x216>
 8003416:	2300      	movs	r3, #0
 8003418:	77fb      	strb	r3, [r7, #31]
 800341a:	e0a0      	b.n	800355e <UART_SetConfig+0x346>
 800341c:	2302      	movs	r3, #2
 800341e:	77fb      	strb	r3, [r7, #31]
 8003420:	e09d      	b.n	800355e <UART_SetConfig+0x346>
 8003422:	2304      	movs	r3, #4
 8003424:	77fb      	strb	r3, [r7, #31]
 8003426:	e09a      	b.n	800355e <UART_SetConfig+0x346>
 8003428:	2308      	movs	r3, #8
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	e097      	b.n	800355e <UART_SetConfig+0x346>
 800342e:	2310      	movs	r3, #16
 8003430:	77fb      	strb	r3, [r7, #31]
 8003432:	e094      	b.n	800355e <UART_SetConfig+0x346>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a30      	ldr	r2, [pc, #192]	; (80034fc <UART_SetConfig+0x2e4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d125      	bne.n	800348a <UART_SetConfig+0x272>
 800343e:	4b2a      	ldr	r3, [pc, #168]	; (80034e8 <UART_SetConfig+0x2d0>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003448:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800344c:	d017      	beq.n	800347e <UART_SetConfig+0x266>
 800344e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003452:	d817      	bhi.n	8003484 <UART_SetConfig+0x26c>
 8003454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003458:	d00b      	beq.n	8003472 <UART_SetConfig+0x25a>
 800345a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800345e:	d811      	bhi.n	8003484 <UART_SetConfig+0x26c>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <UART_SetConfig+0x254>
 8003464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003468:	d006      	beq.n	8003478 <UART_SetConfig+0x260>
 800346a:	e00b      	b.n	8003484 <UART_SetConfig+0x26c>
 800346c:	2301      	movs	r3, #1
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e075      	b.n	800355e <UART_SetConfig+0x346>
 8003472:	2302      	movs	r3, #2
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e072      	b.n	800355e <UART_SetConfig+0x346>
 8003478:	2304      	movs	r3, #4
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e06f      	b.n	800355e <UART_SetConfig+0x346>
 800347e:	2308      	movs	r3, #8
 8003480:	77fb      	strb	r3, [r7, #31]
 8003482:	e06c      	b.n	800355e <UART_SetConfig+0x346>
 8003484:	2310      	movs	r3, #16
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e069      	b.n	800355e <UART_SetConfig+0x346>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1c      	ldr	r2, [pc, #112]	; (8003500 <UART_SetConfig+0x2e8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d137      	bne.n	8003504 <UART_SetConfig+0x2ec>
 8003494:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <UART_SetConfig+0x2d0>)
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800349e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034a2:	d017      	beq.n	80034d4 <UART_SetConfig+0x2bc>
 80034a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034a8:	d817      	bhi.n	80034da <UART_SetConfig+0x2c2>
 80034aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ae:	d00b      	beq.n	80034c8 <UART_SetConfig+0x2b0>
 80034b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b4:	d811      	bhi.n	80034da <UART_SetConfig+0x2c2>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <UART_SetConfig+0x2aa>
 80034ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034be:	d006      	beq.n	80034ce <UART_SetConfig+0x2b6>
 80034c0:	e00b      	b.n	80034da <UART_SetConfig+0x2c2>
 80034c2:	2300      	movs	r3, #0
 80034c4:	77fb      	strb	r3, [r7, #31]
 80034c6:	e04a      	b.n	800355e <UART_SetConfig+0x346>
 80034c8:	2302      	movs	r3, #2
 80034ca:	77fb      	strb	r3, [r7, #31]
 80034cc:	e047      	b.n	800355e <UART_SetConfig+0x346>
 80034ce:	2304      	movs	r3, #4
 80034d0:	77fb      	strb	r3, [r7, #31]
 80034d2:	e044      	b.n	800355e <UART_SetConfig+0x346>
 80034d4:	2308      	movs	r3, #8
 80034d6:	77fb      	strb	r3, [r7, #31]
 80034d8:	e041      	b.n	800355e <UART_SetConfig+0x346>
 80034da:	2310      	movs	r3, #16
 80034dc:	77fb      	strb	r3, [r7, #31]
 80034de:	e03e      	b.n	800355e <UART_SetConfig+0x346>
 80034e0:	efff69f3 	.word	0xefff69f3
 80034e4:	40011000 	.word	0x40011000
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40004400 	.word	0x40004400
 80034f0:	40004800 	.word	0x40004800
 80034f4:	40004c00 	.word	0x40004c00
 80034f8:	40005000 	.word	0x40005000
 80034fc:	40011400 	.word	0x40011400
 8003500:	40007800 	.word	0x40007800
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a71      	ldr	r2, [pc, #452]	; (80036d0 <UART_SetConfig+0x4b8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d125      	bne.n	800355a <UART_SetConfig+0x342>
 800350e:	4b71      	ldr	r3, [pc, #452]	; (80036d4 <UART_SetConfig+0x4bc>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003514:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003518:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800351c:	d017      	beq.n	800354e <UART_SetConfig+0x336>
 800351e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003522:	d817      	bhi.n	8003554 <UART_SetConfig+0x33c>
 8003524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003528:	d00b      	beq.n	8003542 <UART_SetConfig+0x32a>
 800352a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800352e:	d811      	bhi.n	8003554 <UART_SetConfig+0x33c>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <UART_SetConfig+0x324>
 8003534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003538:	d006      	beq.n	8003548 <UART_SetConfig+0x330>
 800353a:	e00b      	b.n	8003554 <UART_SetConfig+0x33c>
 800353c:	2300      	movs	r3, #0
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e00d      	b.n	800355e <UART_SetConfig+0x346>
 8003542:	2302      	movs	r3, #2
 8003544:	77fb      	strb	r3, [r7, #31]
 8003546:	e00a      	b.n	800355e <UART_SetConfig+0x346>
 8003548:	2304      	movs	r3, #4
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	e007      	b.n	800355e <UART_SetConfig+0x346>
 800354e:	2308      	movs	r3, #8
 8003550:	77fb      	strb	r3, [r7, #31]
 8003552:	e004      	b.n	800355e <UART_SetConfig+0x346>
 8003554:	2310      	movs	r3, #16
 8003556:	77fb      	strb	r3, [r7, #31]
 8003558:	e001      	b.n	800355e <UART_SetConfig+0x346>
 800355a:	2310      	movs	r3, #16
 800355c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003566:	d15b      	bne.n	8003620 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003568:	7ffb      	ldrb	r3, [r7, #31]
 800356a:	2b08      	cmp	r3, #8
 800356c:	d827      	bhi.n	80035be <UART_SetConfig+0x3a6>
 800356e:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <UART_SetConfig+0x35c>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	08003599 	.word	0x08003599
 8003578:	080035a1 	.word	0x080035a1
 800357c:	080035a9 	.word	0x080035a9
 8003580:	080035bf 	.word	0x080035bf
 8003584:	080035af 	.word	0x080035af
 8003588:	080035bf 	.word	0x080035bf
 800358c:	080035bf 	.word	0x080035bf
 8003590:	080035bf 	.word	0x080035bf
 8003594:	080035b7 	.word	0x080035b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003598:	f7fe fc3e 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 800359c:	61b8      	str	r0, [r7, #24]
        break;
 800359e:	e013      	b.n	80035c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035a0:	f7fe fc4e 	bl	8001e40 <HAL_RCC_GetPCLK2Freq>
 80035a4:	61b8      	str	r0, [r7, #24]
        break;
 80035a6:	e00f      	b.n	80035c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035a8:	4b4b      	ldr	r3, [pc, #300]	; (80036d8 <UART_SetConfig+0x4c0>)
 80035aa:	61bb      	str	r3, [r7, #24]
        break;
 80035ac:	e00c      	b.n	80035c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ae:	f7fe fb71 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 80035b2:	61b8      	str	r0, [r7, #24]
        break;
 80035b4:	e008      	b.n	80035c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ba:	61bb      	str	r3, [r7, #24]
        break;
 80035bc:	e004      	b.n	80035c8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	77bb      	strb	r3, [r7, #30]
        break;
 80035c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d074      	beq.n	80036b8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	005a      	lsls	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	441a      	add	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2b0f      	cmp	r3, #15
 80035ea:	d916      	bls.n	800361a <UART_SetConfig+0x402>
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f2:	d212      	bcs.n	800361a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f023 030f 	bic.w	r3, r3, #15
 80035fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	085b      	lsrs	r3, r3, #1
 8003602:	b29b      	uxth	r3, r3
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	b29a      	uxth	r2, r3
 800360a:	89fb      	ldrh	r3, [r7, #14]
 800360c:	4313      	orrs	r3, r2
 800360e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	89fa      	ldrh	r2, [r7, #14]
 8003616:	60da      	str	r2, [r3, #12]
 8003618:	e04e      	b.n	80036b8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	77bb      	strb	r3, [r7, #30]
 800361e:	e04b      	b.n	80036b8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003620:	7ffb      	ldrb	r3, [r7, #31]
 8003622:	2b08      	cmp	r3, #8
 8003624:	d827      	bhi.n	8003676 <UART_SetConfig+0x45e>
 8003626:	a201      	add	r2, pc, #4	; (adr r2, 800362c <UART_SetConfig+0x414>)
 8003628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362c:	08003651 	.word	0x08003651
 8003630:	08003659 	.word	0x08003659
 8003634:	08003661 	.word	0x08003661
 8003638:	08003677 	.word	0x08003677
 800363c:	08003667 	.word	0x08003667
 8003640:	08003677 	.word	0x08003677
 8003644:	08003677 	.word	0x08003677
 8003648:	08003677 	.word	0x08003677
 800364c:	0800366f 	.word	0x0800366f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003650:	f7fe fbe2 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 8003654:	61b8      	str	r0, [r7, #24]
        break;
 8003656:	e013      	b.n	8003680 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003658:	f7fe fbf2 	bl	8001e40 <HAL_RCC_GetPCLK2Freq>
 800365c:	61b8      	str	r0, [r7, #24]
        break;
 800365e:	e00f      	b.n	8003680 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <UART_SetConfig+0x4c0>)
 8003662:	61bb      	str	r3, [r7, #24]
        break;
 8003664:	e00c      	b.n	8003680 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003666:	f7fe fb15 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 800366a:	61b8      	str	r0, [r7, #24]
        break;
 800366c:	e008      	b.n	8003680 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800366e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003672:	61bb      	str	r3, [r7, #24]
        break;
 8003674:	e004      	b.n	8003680 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	77bb      	strb	r3, [r7, #30]
        break;
 800367e:	bf00      	nop
    }

    if (pclk != 0U)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d018      	beq.n	80036b8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	085a      	lsrs	r2, r3, #1
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	441a      	add	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	b29b      	uxth	r3, r3
 800369a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	2b0f      	cmp	r3, #15
 80036a0:	d908      	bls.n	80036b4 <UART_SetConfig+0x49c>
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a8:	d204      	bcs.n	80036b4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	e001      	b.n	80036b8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80036c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3720      	adds	r7, #32
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40007c00 	.word	0x40007c00
 80036d4:	40023800 	.word	0x40023800
 80036d8:	00f42400 	.word	0x00f42400

080036dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01a      	beq.n	80037f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037da:	d10a      	bne.n	80037f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	605a      	str	r2, [r3, #4]
  }
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af02      	add	r7, sp, #8
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003830:	f7fd fb26 	bl	8000e80 <HAL_GetTick>
 8003834:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b08      	cmp	r3, #8
 8003842:	d10e      	bne.n	8003862 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003844:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f82d 	bl	80038b2 <UART_WaitOnFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e023      	b.n	80038aa <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b04      	cmp	r3, #4
 800386e:	d10e      	bne.n	800388e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003870:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f817 	bl	80038b2 <UART_WaitOnFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e00d      	b.n	80038aa <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	603b      	str	r3, [r7, #0]
 80038be:	4613      	mov	r3, r2
 80038c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c2:	e05e      	b.n	8003982 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ca:	d05a      	beq.n	8003982 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038cc:	f7fd fad8 	bl	8000e80 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d302      	bcc.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d11b      	bne.n	800391a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0201 	bic.w	r2, r2, #1
 8003900:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e043      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d02c      	beq.n	8003982 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003936:	d124      	bne.n	8003982 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003940:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003950:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0201 	bic.w	r2, r2, #1
 8003960:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e00f      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69da      	ldr	r2, [r3, #28]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4013      	ands	r3, r2
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	bf0c      	ite	eq
 8003992:	2301      	moveq	r3, #1
 8003994:	2300      	movne	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	429a      	cmp	r2, r3
 800399e:	d091      	beq.n	80038c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <__errno>:
 80039ac:	4b01      	ldr	r3, [pc, #4]	; (80039b4 <__errno+0x8>)
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	20000018 	.word	0x20000018

080039b8 <__libc_init_array>:
 80039b8:	b570      	push	{r4, r5, r6, lr}
 80039ba:	4d0d      	ldr	r5, [pc, #52]	; (80039f0 <__libc_init_array+0x38>)
 80039bc:	4c0d      	ldr	r4, [pc, #52]	; (80039f4 <__libc_init_array+0x3c>)
 80039be:	1b64      	subs	r4, r4, r5
 80039c0:	10a4      	asrs	r4, r4, #2
 80039c2:	2600      	movs	r6, #0
 80039c4:	42a6      	cmp	r6, r4
 80039c6:	d109      	bne.n	80039dc <__libc_init_array+0x24>
 80039c8:	4d0b      	ldr	r5, [pc, #44]	; (80039f8 <__libc_init_array+0x40>)
 80039ca:	4c0c      	ldr	r4, [pc, #48]	; (80039fc <__libc_init_array+0x44>)
 80039cc:	f000 fc4e 	bl	800426c <_init>
 80039d0:	1b64      	subs	r4, r4, r5
 80039d2:	10a4      	asrs	r4, r4, #2
 80039d4:	2600      	movs	r6, #0
 80039d6:	42a6      	cmp	r6, r4
 80039d8:	d105      	bne.n	80039e6 <__libc_init_array+0x2e>
 80039da:	bd70      	pop	{r4, r5, r6, pc}
 80039dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e0:	4798      	blx	r3
 80039e2:	3601      	adds	r6, #1
 80039e4:	e7ee      	b.n	80039c4 <__libc_init_array+0xc>
 80039e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ea:	4798      	blx	r3
 80039ec:	3601      	adds	r6, #1
 80039ee:	e7f2      	b.n	80039d6 <__libc_init_array+0x1e>
 80039f0:	080042e8 	.word	0x080042e8
 80039f4:	080042e8 	.word	0x080042e8
 80039f8:	080042e8 	.word	0x080042e8
 80039fc:	080042ec 	.word	0x080042ec

08003a00 <memset>:
 8003a00:	4402      	add	r2, r0
 8003a02:	4603      	mov	r3, r0
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d100      	bne.n	8003a0a <memset+0xa>
 8003a08:	4770      	bx	lr
 8003a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a0e:	e7f9      	b.n	8003a04 <memset+0x4>

08003a10 <siprintf>:
 8003a10:	b40e      	push	{r1, r2, r3}
 8003a12:	b500      	push	{lr}
 8003a14:	b09c      	sub	sp, #112	; 0x70
 8003a16:	ab1d      	add	r3, sp, #116	; 0x74
 8003a18:	9002      	str	r0, [sp, #8]
 8003a1a:	9006      	str	r0, [sp, #24]
 8003a1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a20:	4809      	ldr	r0, [pc, #36]	; (8003a48 <siprintf+0x38>)
 8003a22:	9107      	str	r1, [sp, #28]
 8003a24:	9104      	str	r1, [sp, #16]
 8003a26:	4909      	ldr	r1, [pc, #36]	; (8003a4c <siprintf+0x3c>)
 8003a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a2c:	9105      	str	r1, [sp, #20]
 8003a2e:	6800      	ldr	r0, [r0, #0]
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	a902      	add	r1, sp, #8
 8003a34:	f000 f868 	bl	8003b08 <_svfiprintf_r>
 8003a38:	9b02      	ldr	r3, [sp, #8]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
 8003a3e:	b01c      	add	sp, #112	; 0x70
 8003a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a44:	b003      	add	sp, #12
 8003a46:	4770      	bx	lr
 8003a48:	20000018 	.word	0x20000018
 8003a4c:	ffff0208 	.word	0xffff0208

08003a50 <__ssputs_r>:
 8003a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a54:	688e      	ldr	r6, [r1, #8]
 8003a56:	429e      	cmp	r6, r3
 8003a58:	4682      	mov	sl, r0
 8003a5a:	460c      	mov	r4, r1
 8003a5c:	4690      	mov	r8, r2
 8003a5e:	461f      	mov	r7, r3
 8003a60:	d838      	bhi.n	8003ad4 <__ssputs_r+0x84>
 8003a62:	898a      	ldrh	r2, [r1, #12]
 8003a64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a68:	d032      	beq.n	8003ad0 <__ssputs_r+0x80>
 8003a6a:	6825      	ldr	r5, [r4, #0]
 8003a6c:	6909      	ldr	r1, [r1, #16]
 8003a6e:	eba5 0901 	sub.w	r9, r5, r1
 8003a72:	6965      	ldr	r5, [r4, #20]
 8003a74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	444b      	add	r3, r9
 8003a80:	106d      	asrs	r5, r5, #1
 8003a82:	429d      	cmp	r5, r3
 8003a84:	bf38      	it	cc
 8003a86:	461d      	movcc	r5, r3
 8003a88:	0553      	lsls	r3, r2, #21
 8003a8a:	d531      	bpl.n	8003af0 <__ssputs_r+0xa0>
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	f000 fb47 	bl	8004120 <_malloc_r>
 8003a92:	4606      	mov	r6, r0
 8003a94:	b950      	cbnz	r0, 8003aac <__ssputs_r+0x5c>
 8003a96:	230c      	movs	r3, #12
 8003a98:	f8ca 3000 	str.w	r3, [sl]
 8003a9c:	89a3      	ldrh	r3, [r4, #12]
 8003a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aa2:	81a3      	strh	r3, [r4, #12]
 8003aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aac:	6921      	ldr	r1, [r4, #16]
 8003aae:	464a      	mov	r2, r9
 8003ab0:	f000 fabe 	bl	8004030 <memcpy>
 8003ab4:	89a3      	ldrh	r3, [r4, #12]
 8003ab6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003abe:	81a3      	strh	r3, [r4, #12]
 8003ac0:	6126      	str	r6, [r4, #16]
 8003ac2:	6165      	str	r5, [r4, #20]
 8003ac4:	444e      	add	r6, r9
 8003ac6:	eba5 0509 	sub.w	r5, r5, r9
 8003aca:	6026      	str	r6, [r4, #0]
 8003acc:	60a5      	str	r5, [r4, #8]
 8003ace:	463e      	mov	r6, r7
 8003ad0:	42be      	cmp	r6, r7
 8003ad2:	d900      	bls.n	8003ad6 <__ssputs_r+0x86>
 8003ad4:	463e      	mov	r6, r7
 8003ad6:	4632      	mov	r2, r6
 8003ad8:	6820      	ldr	r0, [r4, #0]
 8003ada:	4641      	mov	r1, r8
 8003adc:	f000 fab6 	bl	800404c <memmove>
 8003ae0:	68a3      	ldr	r3, [r4, #8]
 8003ae2:	6822      	ldr	r2, [r4, #0]
 8003ae4:	1b9b      	subs	r3, r3, r6
 8003ae6:	4432      	add	r2, r6
 8003ae8:	60a3      	str	r3, [r4, #8]
 8003aea:	6022      	str	r2, [r4, #0]
 8003aec:	2000      	movs	r0, #0
 8003aee:	e7db      	b.n	8003aa8 <__ssputs_r+0x58>
 8003af0:	462a      	mov	r2, r5
 8003af2:	f000 fb6f 	bl	80041d4 <_realloc_r>
 8003af6:	4606      	mov	r6, r0
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d1e1      	bne.n	8003ac0 <__ssputs_r+0x70>
 8003afc:	6921      	ldr	r1, [r4, #16]
 8003afe:	4650      	mov	r0, sl
 8003b00:	f000 fabe 	bl	8004080 <_free_r>
 8003b04:	e7c7      	b.n	8003a96 <__ssputs_r+0x46>
	...

08003b08 <_svfiprintf_r>:
 8003b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b0c:	4698      	mov	r8, r3
 8003b0e:	898b      	ldrh	r3, [r1, #12]
 8003b10:	061b      	lsls	r3, r3, #24
 8003b12:	b09d      	sub	sp, #116	; 0x74
 8003b14:	4607      	mov	r7, r0
 8003b16:	460d      	mov	r5, r1
 8003b18:	4614      	mov	r4, r2
 8003b1a:	d50e      	bpl.n	8003b3a <_svfiprintf_r+0x32>
 8003b1c:	690b      	ldr	r3, [r1, #16]
 8003b1e:	b963      	cbnz	r3, 8003b3a <_svfiprintf_r+0x32>
 8003b20:	2140      	movs	r1, #64	; 0x40
 8003b22:	f000 fafd 	bl	8004120 <_malloc_r>
 8003b26:	6028      	str	r0, [r5, #0]
 8003b28:	6128      	str	r0, [r5, #16]
 8003b2a:	b920      	cbnz	r0, 8003b36 <_svfiprintf_r+0x2e>
 8003b2c:	230c      	movs	r3, #12
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	f04f 30ff 	mov.w	r0, #4294967295
 8003b34:	e0d1      	b.n	8003cda <_svfiprintf_r+0x1d2>
 8003b36:	2340      	movs	r3, #64	; 0x40
 8003b38:	616b      	str	r3, [r5, #20]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b3e:	2320      	movs	r3, #32
 8003b40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b44:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b48:	2330      	movs	r3, #48	; 0x30
 8003b4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003cf4 <_svfiprintf_r+0x1ec>
 8003b4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b52:	f04f 0901 	mov.w	r9, #1
 8003b56:	4623      	mov	r3, r4
 8003b58:	469a      	mov	sl, r3
 8003b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b5e:	b10a      	cbz	r2, 8003b64 <_svfiprintf_r+0x5c>
 8003b60:	2a25      	cmp	r2, #37	; 0x25
 8003b62:	d1f9      	bne.n	8003b58 <_svfiprintf_r+0x50>
 8003b64:	ebba 0b04 	subs.w	fp, sl, r4
 8003b68:	d00b      	beq.n	8003b82 <_svfiprintf_r+0x7a>
 8003b6a:	465b      	mov	r3, fp
 8003b6c:	4622      	mov	r2, r4
 8003b6e:	4629      	mov	r1, r5
 8003b70:	4638      	mov	r0, r7
 8003b72:	f7ff ff6d 	bl	8003a50 <__ssputs_r>
 8003b76:	3001      	adds	r0, #1
 8003b78:	f000 80aa 	beq.w	8003cd0 <_svfiprintf_r+0x1c8>
 8003b7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b7e:	445a      	add	r2, fp
 8003b80:	9209      	str	r2, [sp, #36]	; 0x24
 8003b82:	f89a 3000 	ldrb.w	r3, [sl]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80a2 	beq.w	8003cd0 <_svfiprintf_r+0x1c8>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b96:	f10a 0a01 	add.w	sl, sl, #1
 8003b9a:	9304      	str	r3, [sp, #16]
 8003b9c:	9307      	str	r3, [sp, #28]
 8003b9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ba2:	931a      	str	r3, [sp, #104]	; 0x68
 8003ba4:	4654      	mov	r4, sl
 8003ba6:	2205      	movs	r2, #5
 8003ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bac:	4851      	ldr	r0, [pc, #324]	; (8003cf4 <_svfiprintf_r+0x1ec>)
 8003bae:	f7fc fb4f 	bl	8000250 <memchr>
 8003bb2:	9a04      	ldr	r2, [sp, #16]
 8003bb4:	b9d8      	cbnz	r0, 8003bee <_svfiprintf_r+0xe6>
 8003bb6:	06d0      	lsls	r0, r2, #27
 8003bb8:	bf44      	itt	mi
 8003bba:	2320      	movmi	r3, #32
 8003bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bc0:	0711      	lsls	r1, r2, #28
 8003bc2:	bf44      	itt	mi
 8003bc4:	232b      	movmi	r3, #43	; 0x2b
 8003bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bca:	f89a 3000 	ldrb.w	r3, [sl]
 8003bce:	2b2a      	cmp	r3, #42	; 0x2a
 8003bd0:	d015      	beq.n	8003bfe <_svfiprintf_r+0xf6>
 8003bd2:	9a07      	ldr	r2, [sp, #28]
 8003bd4:	4654      	mov	r4, sl
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	f04f 0c0a 	mov.w	ip, #10
 8003bdc:	4621      	mov	r1, r4
 8003bde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003be2:	3b30      	subs	r3, #48	; 0x30
 8003be4:	2b09      	cmp	r3, #9
 8003be6:	d94e      	bls.n	8003c86 <_svfiprintf_r+0x17e>
 8003be8:	b1b0      	cbz	r0, 8003c18 <_svfiprintf_r+0x110>
 8003bea:	9207      	str	r2, [sp, #28]
 8003bec:	e014      	b.n	8003c18 <_svfiprintf_r+0x110>
 8003bee:	eba0 0308 	sub.w	r3, r0, r8
 8003bf2:	fa09 f303 	lsl.w	r3, r9, r3
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	9304      	str	r3, [sp, #16]
 8003bfa:	46a2      	mov	sl, r4
 8003bfc:	e7d2      	b.n	8003ba4 <_svfiprintf_r+0x9c>
 8003bfe:	9b03      	ldr	r3, [sp, #12]
 8003c00:	1d19      	adds	r1, r3, #4
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	9103      	str	r1, [sp, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bfbb      	ittet	lt
 8003c0a:	425b      	neglt	r3, r3
 8003c0c:	f042 0202 	orrlt.w	r2, r2, #2
 8003c10:	9307      	strge	r3, [sp, #28]
 8003c12:	9307      	strlt	r3, [sp, #28]
 8003c14:	bfb8      	it	lt
 8003c16:	9204      	strlt	r2, [sp, #16]
 8003c18:	7823      	ldrb	r3, [r4, #0]
 8003c1a:	2b2e      	cmp	r3, #46	; 0x2e
 8003c1c:	d10c      	bne.n	8003c38 <_svfiprintf_r+0x130>
 8003c1e:	7863      	ldrb	r3, [r4, #1]
 8003c20:	2b2a      	cmp	r3, #42	; 0x2a
 8003c22:	d135      	bne.n	8003c90 <_svfiprintf_r+0x188>
 8003c24:	9b03      	ldr	r3, [sp, #12]
 8003c26:	1d1a      	adds	r2, r3, #4
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	9203      	str	r2, [sp, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bfb8      	it	lt
 8003c30:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c34:	3402      	adds	r4, #2
 8003c36:	9305      	str	r3, [sp, #20]
 8003c38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d04 <_svfiprintf_r+0x1fc>
 8003c3c:	7821      	ldrb	r1, [r4, #0]
 8003c3e:	2203      	movs	r2, #3
 8003c40:	4650      	mov	r0, sl
 8003c42:	f7fc fb05 	bl	8000250 <memchr>
 8003c46:	b140      	cbz	r0, 8003c5a <_svfiprintf_r+0x152>
 8003c48:	2340      	movs	r3, #64	; 0x40
 8003c4a:	eba0 000a 	sub.w	r0, r0, sl
 8003c4e:	fa03 f000 	lsl.w	r0, r3, r0
 8003c52:	9b04      	ldr	r3, [sp, #16]
 8003c54:	4303      	orrs	r3, r0
 8003c56:	3401      	adds	r4, #1
 8003c58:	9304      	str	r3, [sp, #16]
 8003c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c5e:	4826      	ldr	r0, [pc, #152]	; (8003cf8 <_svfiprintf_r+0x1f0>)
 8003c60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c64:	2206      	movs	r2, #6
 8003c66:	f7fc faf3 	bl	8000250 <memchr>
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	d038      	beq.n	8003ce0 <_svfiprintf_r+0x1d8>
 8003c6e:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <_svfiprintf_r+0x1f4>)
 8003c70:	bb1b      	cbnz	r3, 8003cba <_svfiprintf_r+0x1b2>
 8003c72:	9b03      	ldr	r3, [sp, #12]
 8003c74:	3307      	adds	r3, #7
 8003c76:	f023 0307 	bic.w	r3, r3, #7
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	9303      	str	r3, [sp, #12]
 8003c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c80:	4433      	add	r3, r6
 8003c82:	9309      	str	r3, [sp, #36]	; 0x24
 8003c84:	e767      	b.n	8003b56 <_svfiprintf_r+0x4e>
 8003c86:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	e7a5      	b.n	8003bdc <_svfiprintf_r+0xd4>
 8003c90:	2300      	movs	r3, #0
 8003c92:	3401      	adds	r4, #1
 8003c94:	9305      	str	r3, [sp, #20]
 8003c96:	4619      	mov	r1, r3
 8003c98:	f04f 0c0a 	mov.w	ip, #10
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ca2:	3a30      	subs	r2, #48	; 0x30
 8003ca4:	2a09      	cmp	r2, #9
 8003ca6:	d903      	bls.n	8003cb0 <_svfiprintf_r+0x1a8>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0c5      	beq.n	8003c38 <_svfiprintf_r+0x130>
 8003cac:	9105      	str	r1, [sp, #20]
 8003cae:	e7c3      	b.n	8003c38 <_svfiprintf_r+0x130>
 8003cb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cb4:	4604      	mov	r4, r0
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e7f0      	b.n	8003c9c <_svfiprintf_r+0x194>
 8003cba:	ab03      	add	r3, sp, #12
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	462a      	mov	r2, r5
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <_svfiprintf_r+0x1f8>)
 8003cc2:	a904      	add	r1, sp, #16
 8003cc4:	4638      	mov	r0, r7
 8003cc6:	f3af 8000 	nop.w
 8003cca:	1c42      	adds	r2, r0, #1
 8003ccc:	4606      	mov	r6, r0
 8003cce:	d1d6      	bne.n	8003c7e <_svfiprintf_r+0x176>
 8003cd0:	89ab      	ldrh	r3, [r5, #12]
 8003cd2:	065b      	lsls	r3, r3, #25
 8003cd4:	f53f af2c 	bmi.w	8003b30 <_svfiprintf_r+0x28>
 8003cd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cda:	b01d      	add	sp, #116	; 0x74
 8003cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce0:	ab03      	add	r3, sp, #12
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	462a      	mov	r2, r5
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <_svfiprintf_r+0x1f8>)
 8003ce8:	a904      	add	r1, sp, #16
 8003cea:	4638      	mov	r0, r7
 8003cec:	f000 f87a 	bl	8003de4 <_printf_i>
 8003cf0:	e7eb      	b.n	8003cca <_svfiprintf_r+0x1c2>
 8003cf2:	bf00      	nop
 8003cf4:	080042ac 	.word	0x080042ac
 8003cf8:	080042b6 	.word	0x080042b6
 8003cfc:	00000000 	.word	0x00000000
 8003d00:	08003a51 	.word	0x08003a51
 8003d04:	080042b2 	.word	0x080042b2

08003d08 <_printf_common>:
 8003d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d0c:	4616      	mov	r6, r2
 8003d0e:	4699      	mov	r9, r3
 8003d10:	688a      	ldr	r2, [r1, #8]
 8003d12:	690b      	ldr	r3, [r1, #16]
 8003d14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	bfb8      	it	lt
 8003d1c:	4613      	movlt	r3, r2
 8003d1e:	6033      	str	r3, [r6, #0]
 8003d20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d24:	4607      	mov	r7, r0
 8003d26:	460c      	mov	r4, r1
 8003d28:	b10a      	cbz	r2, 8003d2e <_printf_common+0x26>
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	6033      	str	r3, [r6, #0]
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	0699      	lsls	r1, r3, #26
 8003d32:	bf42      	ittt	mi
 8003d34:	6833      	ldrmi	r3, [r6, #0]
 8003d36:	3302      	addmi	r3, #2
 8003d38:	6033      	strmi	r3, [r6, #0]
 8003d3a:	6825      	ldr	r5, [r4, #0]
 8003d3c:	f015 0506 	ands.w	r5, r5, #6
 8003d40:	d106      	bne.n	8003d50 <_printf_common+0x48>
 8003d42:	f104 0a19 	add.w	sl, r4, #25
 8003d46:	68e3      	ldr	r3, [r4, #12]
 8003d48:	6832      	ldr	r2, [r6, #0]
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	42ab      	cmp	r3, r5
 8003d4e:	dc26      	bgt.n	8003d9e <_printf_common+0x96>
 8003d50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d54:	1e13      	subs	r3, r2, #0
 8003d56:	6822      	ldr	r2, [r4, #0]
 8003d58:	bf18      	it	ne
 8003d5a:	2301      	movne	r3, #1
 8003d5c:	0692      	lsls	r2, r2, #26
 8003d5e:	d42b      	bmi.n	8003db8 <_printf_common+0xb0>
 8003d60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d64:	4649      	mov	r1, r9
 8003d66:	4638      	mov	r0, r7
 8003d68:	47c0      	blx	r8
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	d01e      	beq.n	8003dac <_printf_common+0xa4>
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	68e5      	ldr	r5, [r4, #12]
 8003d72:	6832      	ldr	r2, [r6, #0]
 8003d74:	f003 0306 	and.w	r3, r3, #6
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	bf08      	it	eq
 8003d7c:	1aad      	subeq	r5, r5, r2
 8003d7e:	68a3      	ldr	r3, [r4, #8]
 8003d80:	6922      	ldr	r2, [r4, #16]
 8003d82:	bf0c      	ite	eq
 8003d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d88:	2500      	movne	r5, #0
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	bfc4      	itt	gt
 8003d8e:	1a9b      	subgt	r3, r3, r2
 8003d90:	18ed      	addgt	r5, r5, r3
 8003d92:	2600      	movs	r6, #0
 8003d94:	341a      	adds	r4, #26
 8003d96:	42b5      	cmp	r5, r6
 8003d98:	d11a      	bne.n	8003dd0 <_printf_common+0xc8>
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	e008      	b.n	8003db0 <_printf_common+0xa8>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	4652      	mov	r2, sl
 8003da2:	4649      	mov	r1, r9
 8003da4:	4638      	mov	r0, r7
 8003da6:	47c0      	blx	r8
 8003da8:	3001      	adds	r0, #1
 8003daa:	d103      	bne.n	8003db4 <_printf_common+0xac>
 8003dac:	f04f 30ff 	mov.w	r0, #4294967295
 8003db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db4:	3501      	adds	r5, #1
 8003db6:	e7c6      	b.n	8003d46 <_printf_common+0x3e>
 8003db8:	18e1      	adds	r1, r4, r3
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	2030      	movs	r0, #48	; 0x30
 8003dbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dc2:	4422      	add	r2, r4
 8003dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dcc:	3302      	adds	r3, #2
 8003dce:	e7c7      	b.n	8003d60 <_printf_common+0x58>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	4649      	mov	r1, r9
 8003dd6:	4638      	mov	r0, r7
 8003dd8:	47c0      	blx	r8
 8003dda:	3001      	adds	r0, #1
 8003ddc:	d0e6      	beq.n	8003dac <_printf_common+0xa4>
 8003dde:	3601      	adds	r6, #1
 8003de0:	e7d9      	b.n	8003d96 <_printf_common+0x8e>
	...

08003de4 <_printf_i>:
 8003de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003de8:	460c      	mov	r4, r1
 8003dea:	4691      	mov	r9, r2
 8003dec:	7e27      	ldrb	r7, [r4, #24]
 8003dee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003df0:	2f78      	cmp	r7, #120	; 0x78
 8003df2:	4680      	mov	r8, r0
 8003df4:	469a      	mov	sl, r3
 8003df6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dfa:	d807      	bhi.n	8003e0c <_printf_i+0x28>
 8003dfc:	2f62      	cmp	r7, #98	; 0x62
 8003dfe:	d80a      	bhi.n	8003e16 <_printf_i+0x32>
 8003e00:	2f00      	cmp	r7, #0
 8003e02:	f000 80d8 	beq.w	8003fb6 <_printf_i+0x1d2>
 8003e06:	2f58      	cmp	r7, #88	; 0x58
 8003e08:	f000 80a3 	beq.w	8003f52 <_printf_i+0x16e>
 8003e0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e14:	e03a      	b.n	8003e8c <_printf_i+0xa8>
 8003e16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e1a:	2b15      	cmp	r3, #21
 8003e1c:	d8f6      	bhi.n	8003e0c <_printf_i+0x28>
 8003e1e:	a001      	add	r0, pc, #4	; (adr r0, 8003e24 <_printf_i+0x40>)
 8003e20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003e24:	08003e7d 	.word	0x08003e7d
 8003e28:	08003e91 	.word	0x08003e91
 8003e2c:	08003e0d 	.word	0x08003e0d
 8003e30:	08003e0d 	.word	0x08003e0d
 8003e34:	08003e0d 	.word	0x08003e0d
 8003e38:	08003e0d 	.word	0x08003e0d
 8003e3c:	08003e91 	.word	0x08003e91
 8003e40:	08003e0d 	.word	0x08003e0d
 8003e44:	08003e0d 	.word	0x08003e0d
 8003e48:	08003e0d 	.word	0x08003e0d
 8003e4c:	08003e0d 	.word	0x08003e0d
 8003e50:	08003f9d 	.word	0x08003f9d
 8003e54:	08003ec1 	.word	0x08003ec1
 8003e58:	08003f7f 	.word	0x08003f7f
 8003e5c:	08003e0d 	.word	0x08003e0d
 8003e60:	08003e0d 	.word	0x08003e0d
 8003e64:	08003fbf 	.word	0x08003fbf
 8003e68:	08003e0d 	.word	0x08003e0d
 8003e6c:	08003ec1 	.word	0x08003ec1
 8003e70:	08003e0d 	.word	0x08003e0d
 8003e74:	08003e0d 	.word	0x08003e0d
 8003e78:	08003f87 	.word	0x08003f87
 8003e7c:	680b      	ldr	r3, [r1, #0]
 8003e7e:	1d1a      	adds	r2, r3, #4
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	600a      	str	r2, [r1, #0]
 8003e84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0a3      	b.n	8003fd8 <_printf_i+0x1f4>
 8003e90:	6825      	ldr	r5, [r4, #0]
 8003e92:	6808      	ldr	r0, [r1, #0]
 8003e94:	062e      	lsls	r6, r5, #24
 8003e96:	f100 0304 	add.w	r3, r0, #4
 8003e9a:	d50a      	bpl.n	8003eb2 <_printf_i+0xce>
 8003e9c:	6805      	ldr	r5, [r0, #0]
 8003e9e:	600b      	str	r3, [r1, #0]
 8003ea0:	2d00      	cmp	r5, #0
 8003ea2:	da03      	bge.n	8003eac <_printf_i+0xc8>
 8003ea4:	232d      	movs	r3, #45	; 0x2d
 8003ea6:	426d      	negs	r5, r5
 8003ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eac:	485e      	ldr	r0, [pc, #376]	; (8004028 <_printf_i+0x244>)
 8003eae:	230a      	movs	r3, #10
 8003eb0:	e019      	b.n	8003ee6 <_printf_i+0x102>
 8003eb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003eb6:	6805      	ldr	r5, [r0, #0]
 8003eb8:	600b      	str	r3, [r1, #0]
 8003eba:	bf18      	it	ne
 8003ebc:	b22d      	sxthne	r5, r5
 8003ebe:	e7ef      	b.n	8003ea0 <_printf_i+0xbc>
 8003ec0:	680b      	ldr	r3, [r1, #0]
 8003ec2:	6825      	ldr	r5, [r4, #0]
 8003ec4:	1d18      	adds	r0, r3, #4
 8003ec6:	6008      	str	r0, [r1, #0]
 8003ec8:	0628      	lsls	r0, r5, #24
 8003eca:	d501      	bpl.n	8003ed0 <_printf_i+0xec>
 8003ecc:	681d      	ldr	r5, [r3, #0]
 8003ece:	e002      	b.n	8003ed6 <_printf_i+0xf2>
 8003ed0:	0669      	lsls	r1, r5, #25
 8003ed2:	d5fb      	bpl.n	8003ecc <_printf_i+0xe8>
 8003ed4:	881d      	ldrh	r5, [r3, #0]
 8003ed6:	4854      	ldr	r0, [pc, #336]	; (8004028 <_printf_i+0x244>)
 8003ed8:	2f6f      	cmp	r7, #111	; 0x6f
 8003eda:	bf0c      	ite	eq
 8003edc:	2308      	moveq	r3, #8
 8003ede:	230a      	movne	r3, #10
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ee6:	6866      	ldr	r6, [r4, #4]
 8003ee8:	60a6      	str	r6, [r4, #8]
 8003eea:	2e00      	cmp	r6, #0
 8003eec:	bfa2      	ittt	ge
 8003eee:	6821      	ldrge	r1, [r4, #0]
 8003ef0:	f021 0104 	bicge.w	r1, r1, #4
 8003ef4:	6021      	strge	r1, [r4, #0]
 8003ef6:	b90d      	cbnz	r5, 8003efc <_printf_i+0x118>
 8003ef8:	2e00      	cmp	r6, #0
 8003efa:	d04d      	beq.n	8003f98 <_printf_i+0x1b4>
 8003efc:	4616      	mov	r6, r2
 8003efe:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f02:	fb03 5711 	mls	r7, r3, r1, r5
 8003f06:	5dc7      	ldrb	r7, [r0, r7]
 8003f08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f0c:	462f      	mov	r7, r5
 8003f0e:	42bb      	cmp	r3, r7
 8003f10:	460d      	mov	r5, r1
 8003f12:	d9f4      	bls.n	8003efe <_printf_i+0x11a>
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d10b      	bne.n	8003f30 <_printf_i+0x14c>
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	07df      	lsls	r7, r3, #31
 8003f1c:	d508      	bpl.n	8003f30 <_printf_i+0x14c>
 8003f1e:	6923      	ldr	r3, [r4, #16]
 8003f20:	6861      	ldr	r1, [r4, #4]
 8003f22:	4299      	cmp	r1, r3
 8003f24:	bfde      	ittt	le
 8003f26:	2330      	movle	r3, #48	; 0x30
 8003f28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f30:	1b92      	subs	r2, r2, r6
 8003f32:	6122      	str	r2, [r4, #16]
 8003f34:	f8cd a000 	str.w	sl, [sp]
 8003f38:	464b      	mov	r3, r9
 8003f3a:	aa03      	add	r2, sp, #12
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	4640      	mov	r0, r8
 8003f40:	f7ff fee2 	bl	8003d08 <_printf_common>
 8003f44:	3001      	adds	r0, #1
 8003f46:	d14c      	bne.n	8003fe2 <_printf_i+0x1fe>
 8003f48:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4c:	b004      	add	sp, #16
 8003f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f52:	4835      	ldr	r0, [pc, #212]	; (8004028 <_printf_i+0x244>)
 8003f54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	680e      	ldr	r6, [r1, #0]
 8003f5c:	061f      	lsls	r7, r3, #24
 8003f5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003f62:	600e      	str	r6, [r1, #0]
 8003f64:	d514      	bpl.n	8003f90 <_printf_i+0x1ac>
 8003f66:	07d9      	lsls	r1, r3, #31
 8003f68:	bf44      	itt	mi
 8003f6a:	f043 0320 	orrmi.w	r3, r3, #32
 8003f6e:	6023      	strmi	r3, [r4, #0]
 8003f70:	b91d      	cbnz	r5, 8003f7a <_printf_i+0x196>
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	f023 0320 	bic.w	r3, r3, #32
 8003f78:	6023      	str	r3, [r4, #0]
 8003f7a:	2310      	movs	r3, #16
 8003f7c:	e7b0      	b.n	8003ee0 <_printf_i+0xfc>
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	f043 0320 	orr.w	r3, r3, #32
 8003f84:	6023      	str	r3, [r4, #0]
 8003f86:	2378      	movs	r3, #120	; 0x78
 8003f88:	4828      	ldr	r0, [pc, #160]	; (800402c <_printf_i+0x248>)
 8003f8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f8e:	e7e3      	b.n	8003f58 <_printf_i+0x174>
 8003f90:	065e      	lsls	r6, r3, #25
 8003f92:	bf48      	it	mi
 8003f94:	b2ad      	uxthmi	r5, r5
 8003f96:	e7e6      	b.n	8003f66 <_printf_i+0x182>
 8003f98:	4616      	mov	r6, r2
 8003f9a:	e7bb      	b.n	8003f14 <_printf_i+0x130>
 8003f9c:	680b      	ldr	r3, [r1, #0]
 8003f9e:	6826      	ldr	r6, [r4, #0]
 8003fa0:	6960      	ldr	r0, [r4, #20]
 8003fa2:	1d1d      	adds	r5, r3, #4
 8003fa4:	600d      	str	r5, [r1, #0]
 8003fa6:	0635      	lsls	r5, r6, #24
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	d501      	bpl.n	8003fb0 <_printf_i+0x1cc>
 8003fac:	6018      	str	r0, [r3, #0]
 8003fae:	e002      	b.n	8003fb6 <_printf_i+0x1d2>
 8003fb0:	0671      	lsls	r1, r6, #25
 8003fb2:	d5fb      	bpl.n	8003fac <_printf_i+0x1c8>
 8003fb4:	8018      	strh	r0, [r3, #0]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	6123      	str	r3, [r4, #16]
 8003fba:	4616      	mov	r6, r2
 8003fbc:	e7ba      	b.n	8003f34 <_printf_i+0x150>
 8003fbe:	680b      	ldr	r3, [r1, #0]
 8003fc0:	1d1a      	adds	r2, r3, #4
 8003fc2:	600a      	str	r2, [r1, #0]
 8003fc4:	681e      	ldr	r6, [r3, #0]
 8003fc6:	6862      	ldr	r2, [r4, #4]
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4630      	mov	r0, r6
 8003fcc:	f7fc f940 	bl	8000250 <memchr>
 8003fd0:	b108      	cbz	r0, 8003fd6 <_printf_i+0x1f2>
 8003fd2:	1b80      	subs	r0, r0, r6
 8003fd4:	6060      	str	r0, [r4, #4]
 8003fd6:	6863      	ldr	r3, [r4, #4]
 8003fd8:	6123      	str	r3, [r4, #16]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fe0:	e7a8      	b.n	8003f34 <_printf_i+0x150>
 8003fe2:	6923      	ldr	r3, [r4, #16]
 8003fe4:	4632      	mov	r2, r6
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	4640      	mov	r0, r8
 8003fea:	47d0      	blx	sl
 8003fec:	3001      	adds	r0, #1
 8003fee:	d0ab      	beq.n	8003f48 <_printf_i+0x164>
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	079b      	lsls	r3, r3, #30
 8003ff4:	d413      	bmi.n	800401e <_printf_i+0x23a>
 8003ff6:	68e0      	ldr	r0, [r4, #12]
 8003ff8:	9b03      	ldr	r3, [sp, #12]
 8003ffa:	4298      	cmp	r0, r3
 8003ffc:	bfb8      	it	lt
 8003ffe:	4618      	movlt	r0, r3
 8004000:	e7a4      	b.n	8003f4c <_printf_i+0x168>
 8004002:	2301      	movs	r3, #1
 8004004:	4632      	mov	r2, r6
 8004006:	4649      	mov	r1, r9
 8004008:	4640      	mov	r0, r8
 800400a:	47d0      	blx	sl
 800400c:	3001      	adds	r0, #1
 800400e:	d09b      	beq.n	8003f48 <_printf_i+0x164>
 8004010:	3501      	adds	r5, #1
 8004012:	68e3      	ldr	r3, [r4, #12]
 8004014:	9903      	ldr	r1, [sp, #12]
 8004016:	1a5b      	subs	r3, r3, r1
 8004018:	42ab      	cmp	r3, r5
 800401a:	dcf2      	bgt.n	8004002 <_printf_i+0x21e>
 800401c:	e7eb      	b.n	8003ff6 <_printf_i+0x212>
 800401e:	2500      	movs	r5, #0
 8004020:	f104 0619 	add.w	r6, r4, #25
 8004024:	e7f5      	b.n	8004012 <_printf_i+0x22e>
 8004026:	bf00      	nop
 8004028:	080042bd 	.word	0x080042bd
 800402c:	080042ce 	.word	0x080042ce

08004030 <memcpy>:
 8004030:	440a      	add	r2, r1
 8004032:	4291      	cmp	r1, r2
 8004034:	f100 33ff 	add.w	r3, r0, #4294967295
 8004038:	d100      	bne.n	800403c <memcpy+0xc>
 800403a:	4770      	bx	lr
 800403c:	b510      	push	{r4, lr}
 800403e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004042:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004046:	4291      	cmp	r1, r2
 8004048:	d1f9      	bne.n	800403e <memcpy+0xe>
 800404a:	bd10      	pop	{r4, pc}

0800404c <memmove>:
 800404c:	4288      	cmp	r0, r1
 800404e:	b510      	push	{r4, lr}
 8004050:	eb01 0402 	add.w	r4, r1, r2
 8004054:	d902      	bls.n	800405c <memmove+0x10>
 8004056:	4284      	cmp	r4, r0
 8004058:	4623      	mov	r3, r4
 800405a:	d807      	bhi.n	800406c <memmove+0x20>
 800405c:	1e43      	subs	r3, r0, #1
 800405e:	42a1      	cmp	r1, r4
 8004060:	d008      	beq.n	8004074 <memmove+0x28>
 8004062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800406a:	e7f8      	b.n	800405e <memmove+0x12>
 800406c:	4402      	add	r2, r0
 800406e:	4601      	mov	r1, r0
 8004070:	428a      	cmp	r2, r1
 8004072:	d100      	bne.n	8004076 <memmove+0x2a>
 8004074:	bd10      	pop	{r4, pc}
 8004076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800407a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800407e:	e7f7      	b.n	8004070 <memmove+0x24>

08004080 <_free_r>:
 8004080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004082:	2900      	cmp	r1, #0
 8004084:	d048      	beq.n	8004118 <_free_r+0x98>
 8004086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800408a:	9001      	str	r0, [sp, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	f1a1 0404 	sub.w	r4, r1, #4
 8004092:	bfb8      	it	lt
 8004094:	18e4      	addlt	r4, r4, r3
 8004096:	f000 f8d3 	bl	8004240 <__malloc_lock>
 800409a:	4a20      	ldr	r2, [pc, #128]	; (800411c <_free_r+0x9c>)
 800409c:	9801      	ldr	r0, [sp, #4]
 800409e:	6813      	ldr	r3, [r2, #0]
 80040a0:	4615      	mov	r5, r2
 80040a2:	b933      	cbnz	r3, 80040b2 <_free_r+0x32>
 80040a4:	6063      	str	r3, [r4, #4]
 80040a6:	6014      	str	r4, [r2, #0]
 80040a8:	b003      	add	sp, #12
 80040aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040ae:	f000 b8cd 	b.w	800424c <__malloc_unlock>
 80040b2:	42a3      	cmp	r3, r4
 80040b4:	d90b      	bls.n	80040ce <_free_r+0x4e>
 80040b6:	6821      	ldr	r1, [r4, #0]
 80040b8:	1862      	adds	r2, r4, r1
 80040ba:	4293      	cmp	r3, r2
 80040bc:	bf04      	itt	eq
 80040be:	681a      	ldreq	r2, [r3, #0]
 80040c0:	685b      	ldreq	r3, [r3, #4]
 80040c2:	6063      	str	r3, [r4, #4]
 80040c4:	bf04      	itt	eq
 80040c6:	1852      	addeq	r2, r2, r1
 80040c8:	6022      	streq	r2, [r4, #0]
 80040ca:	602c      	str	r4, [r5, #0]
 80040cc:	e7ec      	b.n	80040a8 <_free_r+0x28>
 80040ce:	461a      	mov	r2, r3
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	b10b      	cbz	r3, 80040d8 <_free_r+0x58>
 80040d4:	42a3      	cmp	r3, r4
 80040d6:	d9fa      	bls.n	80040ce <_free_r+0x4e>
 80040d8:	6811      	ldr	r1, [r2, #0]
 80040da:	1855      	adds	r5, r2, r1
 80040dc:	42a5      	cmp	r5, r4
 80040de:	d10b      	bne.n	80040f8 <_free_r+0x78>
 80040e0:	6824      	ldr	r4, [r4, #0]
 80040e2:	4421      	add	r1, r4
 80040e4:	1854      	adds	r4, r2, r1
 80040e6:	42a3      	cmp	r3, r4
 80040e8:	6011      	str	r1, [r2, #0]
 80040ea:	d1dd      	bne.n	80040a8 <_free_r+0x28>
 80040ec:	681c      	ldr	r4, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	6053      	str	r3, [r2, #4]
 80040f2:	4421      	add	r1, r4
 80040f4:	6011      	str	r1, [r2, #0]
 80040f6:	e7d7      	b.n	80040a8 <_free_r+0x28>
 80040f8:	d902      	bls.n	8004100 <_free_r+0x80>
 80040fa:	230c      	movs	r3, #12
 80040fc:	6003      	str	r3, [r0, #0]
 80040fe:	e7d3      	b.n	80040a8 <_free_r+0x28>
 8004100:	6825      	ldr	r5, [r4, #0]
 8004102:	1961      	adds	r1, r4, r5
 8004104:	428b      	cmp	r3, r1
 8004106:	bf04      	itt	eq
 8004108:	6819      	ldreq	r1, [r3, #0]
 800410a:	685b      	ldreq	r3, [r3, #4]
 800410c:	6063      	str	r3, [r4, #4]
 800410e:	bf04      	itt	eq
 8004110:	1949      	addeq	r1, r1, r5
 8004112:	6021      	streq	r1, [r4, #0]
 8004114:	6054      	str	r4, [r2, #4]
 8004116:	e7c7      	b.n	80040a8 <_free_r+0x28>
 8004118:	b003      	add	sp, #12
 800411a:	bd30      	pop	{r4, r5, pc}
 800411c:	200000a4 	.word	0x200000a4

08004120 <_malloc_r>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	1ccd      	adds	r5, r1, #3
 8004124:	f025 0503 	bic.w	r5, r5, #3
 8004128:	3508      	adds	r5, #8
 800412a:	2d0c      	cmp	r5, #12
 800412c:	bf38      	it	cc
 800412e:	250c      	movcc	r5, #12
 8004130:	2d00      	cmp	r5, #0
 8004132:	4606      	mov	r6, r0
 8004134:	db01      	blt.n	800413a <_malloc_r+0x1a>
 8004136:	42a9      	cmp	r1, r5
 8004138:	d903      	bls.n	8004142 <_malloc_r+0x22>
 800413a:	230c      	movs	r3, #12
 800413c:	6033      	str	r3, [r6, #0]
 800413e:	2000      	movs	r0, #0
 8004140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004142:	f000 f87d 	bl	8004240 <__malloc_lock>
 8004146:	4921      	ldr	r1, [pc, #132]	; (80041cc <_malloc_r+0xac>)
 8004148:	680a      	ldr	r2, [r1, #0]
 800414a:	4614      	mov	r4, r2
 800414c:	b99c      	cbnz	r4, 8004176 <_malloc_r+0x56>
 800414e:	4f20      	ldr	r7, [pc, #128]	; (80041d0 <_malloc_r+0xb0>)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	b923      	cbnz	r3, 800415e <_malloc_r+0x3e>
 8004154:	4621      	mov	r1, r4
 8004156:	4630      	mov	r0, r6
 8004158:	f000 f862 	bl	8004220 <_sbrk_r>
 800415c:	6038      	str	r0, [r7, #0]
 800415e:	4629      	mov	r1, r5
 8004160:	4630      	mov	r0, r6
 8004162:	f000 f85d 	bl	8004220 <_sbrk_r>
 8004166:	1c43      	adds	r3, r0, #1
 8004168:	d123      	bne.n	80041b2 <_malloc_r+0x92>
 800416a:	230c      	movs	r3, #12
 800416c:	6033      	str	r3, [r6, #0]
 800416e:	4630      	mov	r0, r6
 8004170:	f000 f86c 	bl	800424c <__malloc_unlock>
 8004174:	e7e3      	b.n	800413e <_malloc_r+0x1e>
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	1b5b      	subs	r3, r3, r5
 800417a:	d417      	bmi.n	80041ac <_malloc_r+0x8c>
 800417c:	2b0b      	cmp	r3, #11
 800417e:	d903      	bls.n	8004188 <_malloc_r+0x68>
 8004180:	6023      	str	r3, [r4, #0]
 8004182:	441c      	add	r4, r3
 8004184:	6025      	str	r5, [r4, #0]
 8004186:	e004      	b.n	8004192 <_malloc_r+0x72>
 8004188:	6863      	ldr	r3, [r4, #4]
 800418a:	42a2      	cmp	r2, r4
 800418c:	bf0c      	ite	eq
 800418e:	600b      	streq	r3, [r1, #0]
 8004190:	6053      	strne	r3, [r2, #4]
 8004192:	4630      	mov	r0, r6
 8004194:	f000 f85a 	bl	800424c <__malloc_unlock>
 8004198:	f104 000b 	add.w	r0, r4, #11
 800419c:	1d23      	adds	r3, r4, #4
 800419e:	f020 0007 	bic.w	r0, r0, #7
 80041a2:	1ac2      	subs	r2, r0, r3
 80041a4:	d0cc      	beq.n	8004140 <_malloc_r+0x20>
 80041a6:	1a1b      	subs	r3, r3, r0
 80041a8:	50a3      	str	r3, [r4, r2]
 80041aa:	e7c9      	b.n	8004140 <_malloc_r+0x20>
 80041ac:	4622      	mov	r2, r4
 80041ae:	6864      	ldr	r4, [r4, #4]
 80041b0:	e7cc      	b.n	800414c <_malloc_r+0x2c>
 80041b2:	1cc4      	adds	r4, r0, #3
 80041b4:	f024 0403 	bic.w	r4, r4, #3
 80041b8:	42a0      	cmp	r0, r4
 80041ba:	d0e3      	beq.n	8004184 <_malloc_r+0x64>
 80041bc:	1a21      	subs	r1, r4, r0
 80041be:	4630      	mov	r0, r6
 80041c0:	f000 f82e 	bl	8004220 <_sbrk_r>
 80041c4:	3001      	adds	r0, #1
 80041c6:	d1dd      	bne.n	8004184 <_malloc_r+0x64>
 80041c8:	e7cf      	b.n	800416a <_malloc_r+0x4a>
 80041ca:	bf00      	nop
 80041cc:	200000a4 	.word	0x200000a4
 80041d0:	200000a8 	.word	0x200000a8

080041d4 <_realloc_r>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	4607      	mov	r7, r0
 80041d8:	4614      	mov	r4, r2
 80041da:	460e      	mov	r6, r1
 80041dc:	b921      	cbnz	r1, 80041e8 <_realloc_r+0x14>
 80041de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80041e2:	4611      	mov	r1, r2
 80041e4:	f7ff bf9c 	b.w	8004120 <_malloc_r>
 80041e8:	b922      	cbnz	r2, 80041f4 <_realloc_r+0x20>
 80041ea:	f7ff ff49 	bl	8004080 <_free_r>
 80041ee:	4625      	mov	r5, r4
 80041f0:	4628      	mov	r0, r5
 80041f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041f4:	f000 f830 	bl	8004258 <_malloc_usable_size_r>
 80041f8:	42a0      	cmp	r0, r4
 80041fa:	d20f      	bcs.n	800421c <_realloc_r+0x48>
 80041fc:	4621      	mov	r1, r4
 80041fe:	4638      	mov	r0, r7
 8004200:	f7ff ff8e 	bl	8004120 <_malloc_r>
 8004204:	4605      	mov	r5, r0
 8004206:	2800      	cmp	r0, #0
 8004208:	d0f2      	beq.n	80041f0 <_realloc_r+0x1c>
 800420a:	4631      	mov	r1, r6
 800420c:	4622      	mov	r2, r4
 800420e:	f7ff ff0f 	bl	8004030 <memcpy>
 8004212:	4631      	mov	r1, r6
 8004214:	4638      	mov	r0, r7
 8004216:	f7ff ff33 	bl	8004080 <_free_r>
 800421a:	e7e9      	b.n	80041f0 <_realloc_r+0x1c>
 800421c:	4635      	mov	r5, r6
 800421e:	e7e7      	b.n	80041f0 <_realloc_r+0x1c>

08004220 <_sbrk_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	4d06      	ldr	r5, [pc, #24]	; (800423c <_sbrk_r+0x1c>)
 8004224:	2300      	movs	r3, #0
 8004226:	4604      	mov	r4, r0
 8004228:	4608      	mov	r0, r1
 800422a:	602b      	str	r3, [r5, #0]
 800422c:	f7fc fc10 	bl	8000a50 <_sbrk>
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	d102      	bne.n	800423a <_sbrk_r+0x1a>
 8004234:	682b      	ldr	r3, [r5, #0]
 8004236:	b103      	cbz	r3, 800423a <_sbrk_r+0x1a>
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	bd38      	pop	{r3, r4, r5, pc}
 800423c:	200001cc 	.word	0x200001cc

08004240 <__malloc_lock>:
 8004240:	4801      	ldr	r0, [pc, #4]	; (8004248 <__malloc_lock+0x8>)
 8004242:	f000 b811 	b.w	8004268 <__retarget_lock_acquire_recursive>
 8004246:	bf00      	nop
 8004248:	200001d4 	.word	0x200001d4

0800424c <__malloc_unlock>:
 800424c:	4801      	ldr	r0, [pc, #4]	; (8004254 <__malloc_unlock+0x8>)
 800424e:	f000 b80c 	b.w	800426a <__retarget_lock_release_recursive>
 8004252:	bf00      	nop
 8004254:	200001d4 	.word	0x200001d4

08004258 <_malloc_usable_size_r>:
 8004258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800425c:	1f18      	subs	r0, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	bfbc      	itt	lt
 8004262:	580b      	ldrlt	r3, [r1, r0]
 8004264:	18c0      	addlt	r0, r0, r3
 8004266:	4770      	bx	lr

08004268 <__retarget_lock_acquire_recursive>:
 8004268:	4770      	bx	lr

0800426a <__retarget_lock_release_recursive>:
 800426a:	4770      	bx	lr

0800426c <_init>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	bf00      	nop
 8004270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	469e      	mov	lr, r3
 8004276:	4770      	bx	lr

08004278 <_fini>:
 8004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427a:	bf00      	nop
 800427c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427e:	bc08      	pop	{r3}
 8004280:	469e      	mov	lr, r3
 8004282:	4770      	bx	lr
