
lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000809c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  080082a0  080082a0  000182a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800879c  0800879c  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800879c  0800879c  0001879c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087a4  080087a4  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087a4  080087a4  000187a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087a8  080087a8  000187a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  080087ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000210  080089bc  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  080089bc  00020534  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001499f  00000000  00000000  0002023e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b23  00000000  00000000  00034bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00037700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00038810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002956b  00000000  00000000  000397f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014956  00000000  00000000  00062d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd369  00000000  00000000  000776b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00174a22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005678  00000000  00000000  00174a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000210 	.word	0x20000210
 800021c:	00000000 	.word	0x00000000
 8000220:	08008284 	.word	0x08008284

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000214 	.word	0x20000214
 800023c:	08008284 	.word	0x08008284

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08c      	sub	sp, #48	; 0x30
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b67      	ldr	r3, [pc, #412]	; (800079c <MX_GPIO_Init+0x1b4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a66      	ldr	r2, [pc, #408]	; (800079c <MX_GPIO_Init+0x1b4>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b64      	ldr	r3, [pc, #400]	; (800079c <MX_GPIO_Init+0x1b4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	61bb      	str	r3, [r7, #24]
 8000614:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b61      	ldr	r3, [pc, #388]	; (800079c <MX_GPIO_Init+0x1b4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a60      	ldr	r2, [pc, #384]	; (800079c <MX_GPIO_Init+0x1b4>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b5e      	ldr	r3, [pc, #376]	; (800079c <MX_GPIO_Init+0x1b4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800062e:	4b5b      	ldr	r3, [pc, #364]	; (800079c <MX_GPIO_Init+0x1b4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a5a      	ldr	r2, [pc, #360]	; (800079c <MX_GPIO_Init+0x1b4>)
 8000634:	f043 0320 	orr.w	r3, r3, #32
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b58      	ldr	r3, [pc, #352]	; (800079c <MX_GPIO_Init+0x1b4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0320 	and.w	r3, r3, #32
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000646:	4b55      	ldr	r3, [pc, #340]	; (800079c <MX_GPIO_Init+0x1b4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a54      	ldr	r2, [pc, #336]	; (800079c <MX_GPIO_Init+0x1b4>)
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b52      	ldr	r3, [pc, #328]	; (800079c <MX_GPIO_Init+0x1b4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065e:	4b4f      	ldr	r3, [pc, #316]	; (800079c <MX_GPIO_Init+0x1b4>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a4e      	ldr	r2, [pc, #312]	; (800079c <MX_GPIO_Init+0x1b4>)
 8000664:	f043 0308 	orr.w	r3, r3, #8
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b4c      	ldr	r3, [pc, #304]	; (800079c <MX_GPIO_Init+0x1b4>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0308 	and.w	r3, r3, #8
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000676:	4b49      	ldr	r3, [pc, #292]	; (800079c <MX_GPIO_Init+0x1b4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a48      	ldr	r2, [pc, #288]	; (800079c <MX_GPIO_Init+0x1b4>)
 800067c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b46      	ldr	r3, [pc, #280]	; (800079c <MX_GPIO_Init+0x1b4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f244 0181 	movw	r1, #16513	; 0x4081
 8000694:	4842      	ldr	r0, [pc, #264]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 8000696:	f002 f823 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80006a0:	4840      	ldr	r0, [pc, #256]	; (80007a4 <MX_GPIO_Init+0x1bc>)
 80006a2:	f002 f81d 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80006ac:	483e      	ldr	r0, [pc, #248]	; (80007a8 <MX_GPIO_Init+0x1c0>)
 80006ae:	f002 f817 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9|GPIO_PIN_14, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 80006b8:	483c      	ldr	r0, [pc, #240]	; (80007ac <MX_GPIO_Init+0x1c4>)
 80006ba:	f002 f811 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c4:	4b3a      	ldr	r3, [pc, #232]	; (80007b0 <MX_GPIO_Init+0x1c8>)
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4619      	mov	r1, r3
 80006d2:	4838      	ldr	r0, [pc, #224]	; (80007b4 <MX_GPIO_Init+0x1cc>)
 80006d4:	f001 fe40 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80006d8:	f244 0381 	movw	r3, #16513	; 0x4081
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	482b      	ldr	r0, [pc, #172]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 80006f2:	f001 fe31 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006f6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	4825      	ldr	r0, [pc, #148]	; (80007a4 <MX_GPIO_Init+0x1bc>)
 8000710:	f001 fe22 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000714:	f44f 5368 	mov.w	r3, #14848	; 0x3a00
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	481e      	ldr	r0, [pc, #120]	; (80007a8 <MX_GPIO_Init+0x1c0>)
 800072e:	f001 fe13 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000732:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	4818      	ldr	r0, [pc, #96]	; (80007a8 <MX_GPIO_Init+0x1c0>)
 8000748:	f001 fe06 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800074c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	480f      	ldr	r0, [pc, #60]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 8000762:	f001 fdf9 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000766:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	480b      	ldr	r0, [pc, #44]	; (80007ac <MX_GPIO_Init+0x1c4>)
 8000780:	f001 fdea 	bl	8002358 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2101      	movs	r1, #1
 8000788:	2028      	movs	r0, #40	; 0x28
 800078a:	f001 fdae 	bl	80022ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800078e:	2028      	movs	r0, #40	; 0x28
 8000790:	f001 fdc7 	bl	8002322 <HAL_NVIC_EnableIRQ>

}
 8000794:	bf00      	nop
 8000796:	3730      	adds	r7, #48	; 0x30
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020400 	.word	0x40020400
 80007a4:	40021400 	.word	0x40021400
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40021800 	.word	0x40021800
 80007b0:	10110000 	.word	0x10110000
 80007b4:	40020800 	.word	0x40020800

080007b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_I2C1_Init+0x74>)
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <MX_I2C1_Init+0x78>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_I2C1_Init+0x74>)
 80007c4:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <MX_I2C1_Init+0x7c>)
 80007c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_I2C1_Init+0x74>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_I2C1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_I2C1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f2:	480e      	ldr	r0, [pc, #56]	; (800082c <MX_I2C1_Init+0x74>)
 80007f4:	f001 ffa6 	bl	8002744 <HAL_I2C_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007fe:	f001 f85d 	bl	80018bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000802:	2100      	movs	r1, #0
 8000804:	4809      	ldr	r0, [pc, #36]	; (800082c <MX_I2C1_Init+0x74>)
 8000806:	f002 fbf7 	bl	8002ff8 <HAL_I2CEx_ConfigAnalogFilter>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000810:	f001 f854 	bl	80018bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000814:	2100      	movs	r1, #0
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_I2C1_Init+0x74>)
 8000818:	f002 fc39 	bl	800308e <HAL_I2CEx_ConfigDigitalFilter>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000822:	f001 f84b 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000270 	.word	0x20000270
 8000830:	40005400 	.word	0x40005400
 8000834:	20404768 	.word	0x20404768

08000838 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <HAL_I2C_MspInit+0x7c>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d128      	bne.n	80008ac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <HAL_I2C_MspInit+0x80>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a16      	ldr	r2, [pc, #88]	; (80008b8 <HAL_I2C_MspInit+0x80>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <HAL_I2C_MspInit+0x80>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000872:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000878:	2312      	movs	r3, #18
 800087a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000884:	2304      	movs	r3, #4
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	480b      	ldr	r0, [pc, #44]	; (80008bc <HAL_I2C_MspInit+0x84>)
 8000890:	f001 fd62 	bl	8002358 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_I2C_MspInit+0x80>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <HAL_I2C_MspInit+0x80>)
 800089a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800089e:	6413      	str	r3, [r2, #64]	; 0x40
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_I2C_MspInit+0x80>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40005400 	.word	0x40005400
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b5b0      	push	{r4, r5, r7, lr}
 80008c2:	b098      	sub	sp, #96	; 0x60
 80008c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c6:	f001 fbb4 	bl	8002032 <HAL_Init>

  /* USER CODE BEGIN Init */
  cmdBuffer[0] = 0x03;
 80008ca:	4b42      	ldr	r3, [pc, #264]	; (80009d4 <main+0x114>)
 80008cc:	2203      	movs	r2, #3
 80008ce:	701a      	strb	r2, [r3, #0]
  cmdBuffer[1] = 0x00;
 80008d0:	4b40      	ldr	r3, [pc, #256]	; (80009d4 <main+0x114>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	705a      	strb	r2, [r3, #1]
  cmdBuffer[2] = 0x04;
 80008d6:	4b3f      	ldr	r3, [pc, #252]	; (80009d4 <main+0x114>)
 80008d8:	2204      	movs	r2, #4
 80008da:	709a      	strb	r2, [r3, #2]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008dc:	f000 f892 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e0:	f7ff fe82 	bl	80005e8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80008e4:	f001 f964 	bl	8001bb0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008e8:	f001 f9b6 	bl	8001c58 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80008ec:	f001 fa72 	bl	8001dd4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80008f0:	f7ff ff62 	bl	80007b8 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 80008f4:	f001 fa9e 	bl	8001e34 <MX_USART6_UART_Init>
  MX_USART2_UART_Init();
 80008f8:	f001 fa3c 	bl	8001d74 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim1);
 80008fc:	4836      	ldr	r0, [pc, #216]	; (80009d8 <main+0x118>)
 80008fe:	f003 fd67 	bl	80043d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim2);
 8000902:	4836      	ldr	r0, [pc, #216]	; (80009dc <main+0x11c>)
 8000904:	f003 fd64 	bl	80043d0 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_Delay(400);
//	  displayNumber2(count);
	  char strt[] = "\rTimer          \r\n\tpress button to set time\r\n\tAlert Time : 05:00:00";
 8000908:	4a35      	ldr	r2, [pc, #212]	; (80009e0 <main+0x120>)
 800090a:	463b      	mov	r3, r7
 800090c:	4611      	mov	r1, r2
 800090e:	2244      	movs	r2, #68	; 0x44
 8000910:	4618      	mov	r0, r3
 8000912:	f004 fea9 	bl	8005668 <memcpy>
	  char strt2[] = "\r\n\tAlert Time2 : ";
 8000916:	4b33      	ldr	r3, [pc, #204]	; (80009e4 <main+0x124>)
 8000918:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800091c:	461d      	mov	r5, r3
 800091e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000922:	682b      	ldr	r3, [r5, #0]
 8000924:	8023      	strh	r3, [r4, #0]
	  sprintf(num2,"%.2d:%.2d:%.2d\n",alert2[0],alert2[1],alert2[2]);
 8000926:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <main+0x128>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <main+0x128>)
 800092c:	6859      	ldr	r1, [r3, #4]
 800092e:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <main+0x128>)
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	460b      	mov	r3, r1
 8000936:	492d      	ldr	r1, [pc, #180]	; (80009ec <main+0x12c>)
 8000938:	482d      	ldr	r0, [pc, #180]	; (80009f0 <main+0x130>)
 800093a:	f005 faef 	bl	8005f1c <siprintf>
	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800093e:	bf00      	nop
 8000940:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <main+0x134>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094a:	2b40      	cmp	r3, #64	; 0x40
 800094c:	d1f8      	bne.n	8000940 <main+0x80>
	  HAL_UART_Transmit(&huart3, (uint32_t*)strt,strlen(strt),1000);
 800094e:	463b      	mov	r3, r7
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fc75 	bl	8000240 <strlen>
 8000956:	4603      	mov	r3, r0
 8000958:	b29a      	uxth	r2, r3
 800095a:	4639      	mov	r1, r7
 800095c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000960:	4824      	ldr	r0, [pc, #144]	; (80009f4 <main+0x134>)
 8000962:	f004 f9f9 	bl	8004d58 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint32_t*)strt2,strlen(strt2),1000);
 8000966:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fc68 	bl	8000240 <strlen>
 8000970:	4603      	mov	r3, r0
 8000972:	b29a      	uxth	r2, r3
 8000974:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097c:	481d      	ldr	r0, [pc, #116]	; (80009f4 <main+0x134>)
 800097e:	f004 f9eb 	bl	8004d58 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint32_t*)num2,strlen(num2),1000);
 8000982:	481b      	ldr	r0, [pc, #108]	; (80009f0 <main+0x130>)
 8000984:	f7ff fc5c 	bl	8000240 <strlen>
 8000988:	4603      	mov	r3, r0
 800098a:	b29a      	uxth	r2, r3
 800098c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000990:	4917      	ldr	r1, [pc, #92]	; (80009f0 <main+0x130>)
 8000992:	4818      	ldr	r0, [pc, #96]	; (80009f4 <main+0x134>)
 8000994:	f004 f9e0 	bl	8004d58 <HAL_UART_Transmit>
	  HAL_Delay(800);
 8000998:	f44f 7048 	mov.w	r0, #800	; 0x320
 800099c:	f001 fba6 	bl	80020ec <HAL_Delay>
	  termomiter = 31;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <main+0x138>)
 80009a2:	221f      	movs	r2, #31
 80009a4:	601a      	str	r2, [r3, #0]
	  while(st){
 80009a6:	e00f      	b.n	80009c8 <main+0x108>
//
//		  Temp();
		  if(count2 == 1){
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <main+0x13c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d10b      	bne.n	80009c8 <main+0x108>
			  count2 = 0;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <main+0x13c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
		  	displayNumber2();
 80009b6:	f000 fb5f 	bl	8001078 <displayNumber2>
		  	checkalert();
 80009ba:	f000 f987 	bl	8000ccc <checkalert>
		  	ctemp(termomiter);
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <main+0x138>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f9e0 	bl	8000d88 <ctemp>
	  while(st){
 80009c8:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <main+0x140>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1eb      	bne.n	80009a8 <main+0xe8>
  {
 80009d0:	e79a      	b.n	8000908 <main+0x48>
 80009d2:	bf00      	nop
 80009d4:	200002bc 	.word	0x200002bc
 80009d8:	200002fc 	.word	0x200002fc
 80009dc:	20000348 	.word	0x20000348
 80009e0:	080082b0 	.word	0x080082b0
 80009e4:	080082f4 	.word	0x080082f4
 80009e8:	20000014 	.word	0x20000014
 80009ec:	080082a0 	.word	0x080082a0
 80009f0:	20000030 	.word	0x20000030
 80009f4:	20000394 	.word	0x20000394
 80009f8:	20000004 	.word	0x20000004
 80009fc:	20000230 	.word	0x20000230
 8000a00:	20000020 	.word	0x20000020

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0b8      	sub	sp, #224	; 0xe0
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a0e:	2234      	movs	r2, #52	; 0x34
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f004 fe36 	bl	8005684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	2290      	movs	r2, #144	; 0x90
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f004 fe27 	bl	8005684 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b3f      	ldr	r3, [pc, #252]	; (8000b34 <SystemClock_Config+0x130>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a3e      	ldr	r2, [pc, #248]	; (8000b34 <SystemClock_Config+0x130>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b3c      	ldr	r3, [pc, #240]	; (8000b34 <SystemClock_Config+0x130>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a4e:	4b3a      	ldr	r3, [pc, #232]	; (8000b38 <SystemClock_Config+0x134>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a56:	4a38      	ldr	r2, [pc, #224]	; (8000b38 <SystemClock_Config+0x134>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5c:	6013      	str	r3, [r2, #0]
 8000a5e:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <SystemClock_Config+0x134>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a70:	2301      	movs	r3, #1
 8000a72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a76:	2310      	movs	r3, #16
 8000a78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 108;
 8000a8e:	236c      	movs	r3, #108	; 0x6c
 8000a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 fb8c 	bl	80031c8 <HAL_RCC_OscConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ab6:	f000 ff01 	bl	80018bc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000aba:	f002 fb35 	bl	8003128 <HAL_PWREx_EnableOverDrive>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ac4:	f000 fefa 	bl	80018bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac8:	230f      	movs	r3, #15
 8000aca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000aea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000aee:	2103      	movs	r1, #3
 8000af0:	4618      	mov	r0, r3
 8000af2:	f002 fe17 	bl	8003724 <HAL_RCC_ClockConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000afc:	f000 fede 	bl	80018bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8000b00:	f44f 4393 	mov.w	r3, #18816	; 0x4980
 8000b04:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 ffd8 	bl	8003ad0 <HAL_RCCEx_PeriphCLKConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0x126>
  {
    Error_Handler();
 8000b26:	f000 fec9 	bl	80018bc <Error_Handler>
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	37e0      	adds	r7, #224	; 0xe0
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40007000 	.word	0x40007000

08000b3c <Temp>:

/* USER CODE BEGIN 4 */

void Temp(){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af02      	add	r7, sp, #8

	  HAL_I2C_Master_Transmit(&hi2c1,0x5c<<1,cmdBuffer,3,200);
 8000b42:	23c8      	movs	r3, #200	; 0xc8
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2303      	movs	r3, #3
 8000b48:	4a3c      	ldr	r2, [pc, #240]	; (8000c3c <Temp+0x100>)
 8000b4a:	21b8      	movs	r1, #184	; 0xb8
 8000b4c:	483c      	ldr	r0, [pc, #240]	; (8000c40 <Temp+0x104>)
 8000b4e:	f001 fe89 	bl	8002864 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Transmit(&hi2c1,0x5c<<1,cmdBuffer,3,200);
 8000b52:	23c8      	movs	r3, #200	; 0xc8
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2303      	movs	r3, #3
 8000b58:	4a38      	ldr	r2, [pc, #224]	; (8000c3c <Temp+0x100>)
 8000b5a:	21b8      	movs	r1, #184	; 0xb8
 8000b5c:	4838      	ldr	r0, [pc, #224]	; (8000c40 <Temp+0x104>)
 8000b5e:	f001 fe81 	bl	8002864 <HAL_I2C_Master_Transmit>

	  HAL_Delay(1);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f001 fac2 	bl	80020ec <HAL_Delay>

		  HAL_I2C_Master_Receive(&hi2c1,0x5c<<1,dataBuffer,8,200);
 8000b68:	23c8      	movs	r3, #200	; 0xc8
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	4a35      	ldr	r2, [pc, #212]	; (8000c44 <Temp+0x108>)
 8000b70:	21b8      	movs	r1, #184	; 0xb8
 8000b72:	4833      	ldr	r0, [pc, #204]	; (8000c40 <Temp+0x104>)
 8000b74:	f001 ff6a 	bl	8002a4c <HAL_I2C_Master_Receive>

		  uint16_t Rcrc = dataBuffer[7]<<8;
 8000b78:	4b32      	ldr	r3, [pc, #200]	; (8000c44 <Temp+0x108>)
 8000b7a:	79db      	ldrb	r3, [r3, #7]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	80fb      	strh	r3, [r7, #6]
		  Rcrc += dataBuffer[6];
 8000b82:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <Temp+0x108>)
 8000b84:	799b      	ldrb	r3, [r3, #6]
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	88fb      	ldrh	r3, [r7, #6]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	80fb      	strh	r3, [r7, #6]
		  if(Rcrc == CRC16_2(dataBuffer,6)){
 8000b8e:	2106      	movs	r1, #6
 8000b90:	482c      	ldr	r0, [pc, #176]	; (8000c44 <Temp+0x108>)
 8000b92:	f000 f85f 	bl	8000c54 <CRC16_2>
 8000b96:	4603      	mov	r3, r0
 8000b98:	461a      	mov	r2, r3
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d148      	bne.n	8000c32 <Temp+0xf6>
		  uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 8000ba0:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <Temp+0x108>)
 8000ba2:	791b      	ldrb	r3, [r3, #4]
 8000ba4:	021b      	lsls	r3, r3, #8
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <Temp+0x108>)
 8000bb0:	795b      	ldrb	r3, [r3, #5]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	4413      	add	r3, r2
 8000bb6:	80bb      	strh	r3, [r7, #4]

		  temp = (((dataBuffer[4] & 0x80) >> 7) == 1)?(t*(-1)) : t ;
 8000bb8:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <Temp+0x108>)
 8000bba:	791b      	ldrb	r3, [r3, #4]
 8000bbc:	09db      	lsrs	r3, r3, #7
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d107      	bne.n	8000bd4 <Temp+0x98>
 8000bc4:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <Temp+0x10c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	425b      	negs	r3, r3
 8000bca:	ee07 3a90 	vmov	s15, r3
 8000bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bd2:	e005      	b.n	8000be0 <Temp+0xa4>
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <Temp+0x10c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	ee07 3a90 	vmov	s15, r3
 8000bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <Temp+0x110>)
 8000be2:	edc3 7a00 	vstr	s15, [r3]
		  temp = temperature / 10.0;
 8000be6:	88bb      	ldrh	r3, [r7, #4]
 8000be8:	ee07 3a90 	vmov	s15, r3
 8000bec:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bf0:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000bf4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bf8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <Temp+0x110>)
 8000bfe:	edc3 7a00 	vstr	s15, [r3]

		  uint16_t humidity = (dataBuffer[2] << 8) + dataBuffer[3];
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <Temp+0x108>)
 8000c04:	789b      	ldrb	r3, [r3, #2]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	021b      	lsls	r3, r3, #8
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <Temp+0x108>)
 8000c0e:	78db      	ldrb	r3, [r3, #3]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4413      	add	r3, r2
 8000c14:	807b      	strh	r3, [r7, #2]
		  humid = humidity /10.0;
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	ee07 3a90 	vmov	s15, r3
 8000c1c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c20:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000c24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <Temp+0x114>)
 8000c2e:	edc3 7a00 	vstr	s15, [r3]

//		  sprintf(str,"Temp  %4.1f C\n\rHumid %4.1f %%\n\r\n",temp,humid);
//		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
//		  HAL_UART_Transmit(&huart3,(uint8_t*) str,strlen(str),200);
}
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200002bc 	.word	0x200002bc
 8000c40:	20000270 	.word	0x20000270
 8000c44:	200002c0 	.word	0x200002c0
 8000c48:	20000234 	.word	0x20000234
 8000c4c:	20000028 	.word	0x20000028
 8000c50:	20000024 	.word	0x20000024

08000c54 <CRC16_2>:
//	 HAL_UART_Transmit(&huart3,(uint8_t*) str,strlen(str),200);
//}


uint16_t CRC16_2(uint8_t *ptr, uint8_t length)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	70fb      	strb	r3, [r7, #3]
    uint16_t crc = 0xFFFF;
 8000c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c64:	81fb      	strh	r3, [r7, #14]
    uint8_t s = 0x00;
 8000c66:	2300      	movs	r3, #0
 8000c68:	737b      	strb	r3, [r7, #13]

    while(length--){
 8000c6a:	e023      	b.n	8000cb4 <CRC16_2+0x60>
        crc ^= *ptr++;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	89fb      	ldrh	r3, [r7, #14]
 8000c78:	4053      	eors	r3, r2
 8000c7a:	81fb      	strh	r3, [r7, #14]
        for(s = 0; s < 8; s++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	737b      	strb	r3, [r7, #13]
 8000c80:	e015      	b.n	8000cae <CRC16_2+0x5a>
            if((crc & 0x01) != 0){
 8000c82:	89fb      	ldrh	r3, [r7, #14]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d00a      	beq.n	8000ca2 <CRC16_2+0x4e>
                crc >>= 1;
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	085b      	lsrs	r3, r3, #1
 8000c90:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001;
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000c98:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	81fb      	strh	r3, [r7, #14]
 8000ca0:	e002      	b.n	8000ca8 <CRC16_2+0x54>
            } else crc >>= 1;
 8000ca2:	89fb      	ldrh	r3, [r7, #14]
 8000ca4:	085b      	lsrs	r3, r3, #1
 8000ca6:	81fb      	strh	r3, [r7, #14]
        for(s = 0; s < 8; s++){
 8000ca8:	7b7b      	ldrb	r3, [r7, #13]
 8000caa:	3301      	adds	r3, #1
 8000cac:	737b      	strb	r3, [r7, #13]
 8000cae:	7b7b      	ldrb	r3, [r7, #13]
 8000cb0:	2b07      	cmp	r3, #7
 8000cb2:	d9e6      	bls.n	8000c82 <CRC16_2+0x2e>
    while(length--){
 8000cb4:	78fb      	ldrb	r3, [r7, #3]
 8000cb6:	1e5a      	subs	r2, r3, #1
 8000cb8:	70fa      	strb	r2, [r7, #3]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1d6      	bne.n	8000c6c <CRC16_2+0x18>
        }
    }
    return crc;
 8000cbe:	89fb      	ldrh	r3, [r7, #14]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <checkalert>:
//	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
//	HAL_UART_Transmit(&huart3, (uint32_t*) "\n\r", 4,1000);
//	HAL_UART_Transmit(&huart3, (uint32_t*)num,strlen(num),1000);
//
//}
void checkalert(){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	if(alert[0]==h ){
 8000cd0:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <checkalert+0xa0>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <checkalert+0xa4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d117      	bne.n	8000d0c <checkalert+0x40>
		if(alert[1]== t ){
 8000cdc:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <checkalert+0xa0>)
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <checkalert+0xa8>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d111      	bne.n	8000d0c <checkalert+0x40>
			if(alert[2]== x ){
 8000ce8:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <checkalert+0xa0>)
 8000cea:	689a      	ldr	r2, [r3, #8]
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <checkalert+0xac>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d10b      	bne.n	8000d0c <checkalert+0x40>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cfa:	4820      	ldr	r0, [pc, #128]	; (8000d7c <checkalert+0xb0>)
 8000cfc:	f001 fcf0 	bl	80026e0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d06:	481e      	ldr	r0, [pc, #120]	; (8000d80 <checkalert+0xb4>)
 8000d08:	f001 fcea 	bl	80026e0 <HAL_GPIO_WritePin>

			}}}
	if(alert2[0]==h ){
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <checkalert+0xb8>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <checkalert+0xa4>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d117      	bne.n	8000d48 <checkalert+0x7c>
			if(alert2[1]==t ){
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <checkalert+0xb8>)
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <checkalert+0xa8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d111      	bne.n	8000d48 <checkalert+0x7c>
				if(alert2[2]==x ){
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <checkalert+0xb8>)
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <checkalert+0xac>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d10b      	bne.n	8000d48 <checkalert+0x7c>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d36:	4811      	ldr	r0, [pc, #68]	; (8000d7c <checkalert+0xb0>)
 8000d38:	f001 fcd2 	bl	80026e0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);}}}
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d42:	480e      	ldr	r0, [pc, #56]	; (8000d7c <checkalert+0xb0>)
 8000d44:	f001 fccc 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000d48:	2064      	movs	r0, #100	; 0x64
 8000d4a:	f001 f9cf 	bl	80020ec <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d54:	480a      	ldr	r0, [pc, #40]	; (8000d80 <checkalert+0xb4>)
 8000d56:	f001 fcc3 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d60:	4806      	ldr	r0, [pc, #24]	; (8000d7c <checkalert+0xb0>)
 8000d62:	f001 fcbd 	bl	80026e0 <HAL_GPIO_WritePin>
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000238 	.word	0x20000238
 8000d74:	20000234 	.word	0x20000234
 8000d78:	20000240 	.word	0x20000240
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40021400 	.word	0x40021400
 8000d84:	20000014 	.word	0x20000014

08000d88 <ctemp>:
void ctemp(int e ){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af02      	add	r7, sp, #8
 8000d8e:	6078      	str	r0, [r7, #4]
		if(0== t ){
 8000d90:	4b5c      	ldr	r3, [pc, #368]	; (8000f04 <ctemp+0x17c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d11c      	bne.n	8000dd2 <ctemp+0x4a>
			if(7 == x){
 8000d98:	4b5b      	ldr	r3, [pc, #364]	; (8000f08 <ctemp+0x180>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b07      	cmp	r3, #7
 8000d9e:	d118      	bne.n	8000dd2 <ctemp+0x4a>
				senttemp(termomiter);
 8000da0:	4b5a      	ldr	r3, [pc, #360]	; (8000f0c <ctemp+0x184>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f8c7 	bl	8000f38 <senttemp>
				Temp();
 8000daa:	f7ff fec7 	bl	8000b3c <Temp>
				hutu = humid;
 8000dae:	4b58      	ldr	r3, [pc, #352]	; (8000f10 <ctemp+0x188>)
 8000db0:	edd3 7a00 	vldr	s15, [r3]
 8000db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000db8:	ee17 2a90 	vmov	r2, s15
 8000dbc:	4b55      	ldr	r3, [pc, #340]	; (8000f14 <ctemp+0x18c>)
 8000dbe:	601a      	str	r2, [r3, #0]
				termomiter = temp;
 8000dc0:	4b55      	ldr	r3, [pc, #340]	; (8000f18 <ctemp+0x190>)
 8000dc2:	edd3 7a00 	vldr	s15, [r3]
 8000dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dca:	ee17 2a90 	vmov	r2, s15
 8000dce:	4b4f      	ldr	r3, [pc, #316]	; (8000f0c <ctemp+0x184>)
 8000dd0:	601a      	str	r2, [r3, #0]
			}
		}
		if(x%10 ==0){
 8000dd2:	4b4d      	ldr	r3, [pc, #308]	; (8000f08 <ctemp+0x180>)
 8000dd4:	6819      	ldr	r1, [r3, #0]
 8000dd6:	4b51      	ldr	r3, [pc, #324]	; (8000f1c <ctemp+0x194>)
 8000dd8:	fba3 2301 	umull	r2, r3, r3, r1
 8000ddc:	08da      	lsrs	r2, r3, #3
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	1aca      	subs	r2, r1, r3
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	d125      	bne.n	8000e38 <ctemp+0xb0>
				sprintf(num2," %.2d:%.2d:%.2d ",h,t,x);
 8000dec:	4b4c      	ldr	r3, [pc, #304]	; (8000f20 <ctemp+0x198>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b44      	ldr	r3, [pc, #272]	; (8000f04 <ctemp+0x17c>)
 8000df2:	6819      	ldr	r1, [r3, #0]
 8000df4:	4b44      	ldr	r3, [pc, #272]	; (8000f08 <ctemp+0x180>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4949      	ldr	r1, [pc, #292]	; (8000f24 <ctemp+0x19c>)
 8000dfe:	484a      	ldr	r0, [pc, #296]	; (8000f28 <ctemp+0x1a0>)
 8000e00:	f005 f88c 	bl	8005f1c <siprintf>
			nub = strlen(num2);
 8000e04:	4848      	ldr	r0, [pc, #288]	; (8000f28 <ctemp+0x1a0>)
 8000e06:	f7ff fa1b 	bl	8000240 <strlen>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a47      	ldr	r2, [pc, #284]	; (8000f2c <ctemp+0x1a4>)
 8000e0e:	6013      	str	r3, [r2, #0]
			while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8000e10:	bf00      	nop
 8000e12:	4b47      	ldr	r3, [pc, #284]	; (8000f30 <ctemp+0x1a8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e1c:	2b40      	cmp	r3, #64	; 0x40
 8000e1e:	d1f8      	bne.n	8000e12 <ctemp+0x8a>
			HAL_UART_Transmit(&huart2, (uint32_t*) num2,strlen(num2),1000 );
 8000e20:	4841      	ldr	r0, [pc, #260]	; (8000f28 <ctemp+0x1a0>)
 8000e22:	f7ff fa0d 	bl	8000240 <strlen>
 8000e26:	4603      	mov	r3, r0
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	493e      	ldr	r1, [pc, #248]	; (8000f28 <ctemp+0x1a0>)
 8000e30:	483f      	ldr	r0, [pc, #252]	; (8000f30 <ctemp+0x1a8>)
 8000e32:	f003 ff91 	bl	8004d58 <HAL_UART_Transmit>
 8000e36:	e02c      	b.n	8000e92 <ctemp+0x10a>
			}
		else if(x%5 == 0){
 8000e38:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <ctemp+0x180>)
 8000e3a:	6819      	ldr	r1, [r3, #0]
 8000e3c:	4b37      	ldr	r3, [pc, #220]	; (8000f1c <ctemp+0x194>)
 8000e3e:	fba3 2301 	umull	r2, r3, r3, r1
 8000e42:	089a      	lsrs	r2, r3, #2
 8000e44:	4613      	mov	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	1aca      	subs	r2, r1, r3
 8000e4c:	2a00      	cmp	r2, #0
 8000e4e:	d120      	bne.n	8000e92 <ctemp+0x10a>
			sprintf(num2,"T=%.2d H=%.2d ",termomiter,hutu);
 8000e50:	4b2e      	ldr	r3, [pc, #184]	; (8000f0c <ctemp+0x184>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <ctemp+0x18c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4936      	ldr	r1, [pc, #216]	; (8000f34 <ctemp+0x1ac>)
 8000e5a:	4833      	ldr	r0, [pc, #204]	; (8000f28 <ctemp+0x1a0>)
 8000e5c:	f005 f85e 	bl	8005f1c <siprintf>
			nub = strlen(num2);
 8000e60:	4831      	ldr	r0, [pc, #196]	; (8000f28 <ctemp+0x1a0>)
 8000e62:	f7ff f9ed 	bl	8000240 <strlen>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a30      	ldr	r2, [pc, #192]	; (8000f2c <ctemp+0x1a4>)
 8000e6a:	6013      	str	r3, [r2, #0]
			while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8000e6c:	bf00      	nop
 8000e6e:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <ctemp+0x1a8>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e78:	2b40      	cmp	r3, #64	; 0x40
 8000e7a:	d1f8      	bne.n	8000e6e <ctemp+0xe6>
			HAL_UART_Transmit(&huart2, (uint32_t*) num2,strlen(num2),1000 );
 8000e7c:	482a      	ldr	r0, [pc, #168]	; (8000f28 <ctemp+0x1a0>)
 8000e7e:	f7ff f9df 	bl	8000240 <strlen>
 8000e82:	4603      	mov	r3, r0
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	4927      	ldr	r1, [pc, #156]	; (8000f28 <ctemp+0x1a0>)
 8000e8c:	4828      	ldr	r0, [pc, #160]	; (8000f30 <ctemp+0x1a8>)
 8000e8e:	f003 ff63 	bl	8004d58 <HAL_UART_Transmit>
					}

		if(t%1 == 0 ){
			if(18 == x){
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <ctemp+0x180>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b12      	cmp	r3, #18
 8000e98:	d130      	bne.n	8000efc <ctemp+0x174>
			Temp();
 8000e9a:	f7ff fe4f 	bl	8000b3c <Temp>
			termomiter = (termomiter+temp)/2;
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <ctemp+0x184>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	ee07 3a90 	vmov	s15, r3
 8000ea6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <ctemp+0x190>)
 8000eac:	edd3 7a00 	vldr	s15, [r3]
 8000eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eb4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000eb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ec0:	ee17 2a90 	vmov	r2, s15
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <ctemp+0x184>)
 8000ec6:	601a      	str	r2, [r3, #0]
			hutu = (hutu+humid)/2;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <ctemp+0x18c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <ctemp+0x188>)
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ede:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000ee2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eea:	ee17 2a90 	vmov	r2, s15
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <ctemp+0x18c>)
 8000ef0:	601a      	str	r2, [r3, #0]
			senttemp(termomiter);
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <ctemp+0x184>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f81e 	bl	8000f38 <senttemp>

		}
				}

}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000234 	.word	0x20000234
 8000f08:	20000240 	.word	0x20000240
 8000f0c:	20000004 	.word	0x20000004
 8000f10:	20000024 	.word	0x20000024
 8000f14:	2000023c 	.word	0x2000023c
 8000f18:	20000028 	.word	0x20000028
 8000f1c:	cccccccd 	.word	0xcccccccd
 8000f20:	20000238 	.word	0x20000238
 8000f24:	08008308 	.word	0x08008308
 8000f28:	20000030 	.word	0x20000030
 8000f2c:	20000260 	.word	0x20000260
 8000f30:	2000049c 	.word	0x2000049c
 8000f34:	0800831c 	.word	0x0800831c

08000f38 <senttemp>:
void senttemp(int e){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	for(int w=0 ; w < 6 ;w++){
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	e013      	b.n	8000f6e <senttemp+0x36>
		bin[w] = e % 2;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	bfb8      	it	lt
 8000f50:	425b      	neglt	r3, r3
 8000f52:	4619      	mov	r1, r3
 8000f54:	4a44      	ldr	r2, [pc, #272]	; (8001068 <senttemp+0x130>)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		e /= 2;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	da00      	bge.n	8000f64 <senttemp+0x2c>
 8000f62:	3301      	adds	r3, #1
 8000f64:	105b      	asrs	r3, r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
	for(int w=0 ; w < 6 ;w++){
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2b05      	cmp	r3, #5
 8000f72:	dde8      	ble.n	8000f46 <senttemp+0xe>
	}
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7a:	483c      	ldr	r0, [pc, #240]	; (800106c <senttemp+0x134>)
 8000f7c:	f001 fbb0 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f86:	483a      	ldr	r0, [pc, #232]	; (8001070 <senttemp+0x138>)
 8000f88:	f001 fbaa 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, bin[0]);
 8000f8c:	4b36      	ldr	r3, [pc, #216]	; (8001068 <senttemp+0x130>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	461a      	mov	r2, r3
 8000f94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f98:	4836      	ldr	r0, [pc, #216]	; (8001074 <senttemp+0x13c>)
 8000f9a:	f001 fba1 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, bin[1]);
 8000f9e:	4b32      	ldr	r3, [pc, #200]	; (8001068 <senttemp+0x130>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000faa:	4832      	ldr	r0, [pc, #200]	; (8001074 <senttemp+0x13c>)
 8000fac:	f001 fb98 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, bin[2]);
 8000fb0:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <senttemp+0x130>)
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fbc:	482b      	ldr	r0, [pc, #172]	; (800106c <senttemp+0x134>)
 8000fbe:	f001 fb8f 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, bin[3]);
 8000fc2:	4b29      	ldr	r3, [pc, #164]	; (8001068 <senttemp+0x130>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fce:	4828      	ldr	r0, [pc, #160]	; (8001070 <senttemp+0x138>)
 8000fd0:	f001 fb86 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, bin[4]);
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <senttemp+0x130>)
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe0:	4822      	ldr	r0, [pc, #136]	; (800106c <senttemp+0x134>)
 8000fe2:	f001 fb7d 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, bin[5]);
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <senttemp+0x130>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	461a      	mov	r2, r3
 8000fee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff2:	481f      	ldr	r0, [pc, #124]	; (8001070 <senttemp+0x138>)
 8000ff4:	f001 fb74 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000ff8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ffc:	f001 f876 	bl	80020ec <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001006:	4819      	ldr	r0, [pc, #100]	; (800106c <senttemp+0x134>)
 8001008:	f001 fb6a 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001012:	4817      	ldr	r0, [pc, #92]	; (8001070 <senttemp+0x138>)
 8001014:	f001 fb64 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800101e:	4815      	ldr	r0, [pc, #84]	; (8001074 <senttemp+0x13c>)
 8001020:	f001 fb5e 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800102a:	4812      	ldr	r0, [pc, #72]	; (8001074 <senttemp+0x13c>)
 800102c:	f001 fb58 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001036:	480d      	ldr	r0, [pc, #52]	; (800106c <senttemp+0x134>)
 8001038:	f001 fb52 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <senttemp+0x138>)
 8001044:	f001 fb4c 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800104e:	4807      	ldr	r0, [pc, #28]	; (800106c <senttemp+0x134>)
 8001050:	f001 fb46 	bl	80026e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <senttemp+0x138>)
 800105c:	f001 fb40 	bl	80026e0 <HAL_GPIO_WritePin>
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000248 	.word	0x20000248
 800106c:	40021400 	.word	0x40021400
 8001070:	40021000 	.word	0x40021000
 8001074:	40021800 	.word	0x40021800

08001078 <displayNumber2>:
void displayNumber2()
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b085      	sub	sp, #20
 800107c:	af04      	add	r7, sp, #16
//	x = x/1000;
	count3 += 2;
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <displayNumber2+0x9c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3302      	adds	r3, #2
 8001084:	4a23      	ldr	r2, [pc, #140]	; (8001114 <displayNumber2+0x9c>)
 8001086:	6013      	str	r3, [r2, #0]
//	if(h>23){
//			h=0;
//			}
//	sprintf(num,"%d",count3);
//	sprintf(num,"%.2d:%.2d:%.2d Temp = %2d  ",h,t,x,termomiter);
	Temp();
 8001088:	f7ff fd58 	bl	8000b3c <Temp>
	termomiter = temp;
 800108c:	4b22      	ldr	r3, [pc, #136]	; (8001118 <displayNumber2+0xa0>)
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001096:	ee17 2a90 	vmov	r2, s15
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <displayNumber2+0xa4>)
 800109c:	601a      	str	r2, [r3, #0]
	hutu = humid;
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <displayNumber2+0xa8>)
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a8:	ee17 2a90 	vmov	r2, s15
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <displayNumber2+0xac>)
 80010ae:	601a      	str	r2, [r3, #0]
	sprintf(num,"%.2d:%.2d:%.2d Temp = %2d Humid %2d",h,t,x,termomiter,hutu);
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <displayNumber2+0xb0>)
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <displayNumber2+0xb4>)
 80010b6:	681c      	ldr	r4, [r3, #0]
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <displayNumber2+0xb8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a17      	ldr	r2, [pc, #92]	; (800111c <displayNumber2+0xa4>)
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	4918      	ldr	r1, [pc, #96]	; (8001124 <displayNumber2+0xac>)
 80010c2:	6809      	ldr	r1, [r1, #0]
 80010c4:	9102      	str	r1, [sp, #8]
 80010c6:	9201      	str	r2, [sp, #4]
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	4623      	mov	r3, r4
 80010cc:	4602      	mov	r2, r0
 80010ce:	4919      	ldr	r1, [pc, #100]	; (8001134 <displayNumber2+0xbc>)
 80010d0:	4819      	ldr	r0, [pc, #100]	; (8001138 <displayNumber2+0xc0>)
 80010d2:	f004 ff23 	bl	8005f1c <siprintf>
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80010d6:	bf00      	nop
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <displayNumber2+0xc4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e2:	2b40      	cmp	r3, #64	; 0x40
 80010e4:	d1f8      	bne.n	80010d8 <displayNumber2+0x60>
	HAL_UART_Transmit(&huart3, (uint32_t*) "\r", 4,1000);
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	2204      	movs	r2, #4
 80010ec:	4914      	ldr	r1, [pc, #80]	; (8001140 <displayNumber2+0xc8>)
 80010ee:	4813      	ldr	r0, [pc, #76]	; (800113c <displayNumber2+0xc4>)
 80010f0:	f003 fe32 	bl	8004d58 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint32_t*)num,strlen(num),1000);
 80010f4:	4810      	ldr	r0, [pc, #64]	; (8001138 <displayNumber2+0xc0>)
 80010f6:	f7ff f8a3 	bl	8000240 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	490d      	ldr	r1, [pc, #52]	; (8001138 <displayNumber2+0xc0>)
 8001104:	480d      	ldr	r0, [pc, #52]	; (800113c <displayNumber2+0xc4>)
 8001106:	f003 fe27 	bl	8004d58 <HAL_UART_Transmit>
//				HAL_UART_Transmit(&huart3, (uint32_t*) "\n\r", 4,1000);
//				HAL_UART_Transmit(&huart3, (uint32_t*)"stop",4,1000);
//				st = 0;
//		}

}
 800110a:	bf00      	nop
 800110c:	3704      	adds	r7, #4
 800110e:	46bd      	mov	sp, r7
 8001110:	bd90      	pop	{r4, r7, pc}
 8001112:	bf00      	nop
 8001114:	20000000 	.word	0x20000000
 8001118:	20000028 	.word	0x20000028
 800111c:	20000004 	.word	0x20000004
 8001120:	20000024 	.word	0x20000024
 8001124:	2000023c 	.word	0x2000023c
 8001128:	20000238 	.word	0x20000238
 800112c:	20000234 	.word	0x20000234
 8001130:	20000240 	.word	0x20000240
 8001134:	0800832c 	.word	0x0800832c
 8001138:	2000002c 	.word	0x2000002c
 800113c:	20000394 	.word	0x20000394
 8001140:	08008350 	.word	0x08008350

08001144 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af02      	add	r7, sp, #8
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
//		HAL_Delay(1000);
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
//	}
	tat = 0 ;
 800114e:	4ba5      	ldr	r3, [pc, #660]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8001154:	bf00      	nop
 8001156:	4ba4      	ldr	r3, [pc, #656]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001160:	2b40      	cmp	r3, #64	; 0x40
 8001162:	d1f8      	bne.n	8001156 <HAL_GPIO_EXTI_Callback+0x12>
					HAL_UART_Transmit(&huart3, (uint32_t*) "\n\r Next", 9,1000);
 8001164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001168:	2209      	movs	r2, #9
 800116a:	49a0      	ldr	r1, [pc, #640]	; (80013ec <HAL_GPIO_EXTI_Callback+0x2a8>)
 800116c:	489e      	ldr	r0, [pc, #632]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800116e:	f003 fdf3 	bl	8004d58 <HAL_UART_Transmit>
	while(1){
//		while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) == RESET){}
//				HAL_UART_Receive(&huart3, (uint8_t*) &usrType, 1, 1000);
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14) == GPIO_PIN_RESET ){
 8001172:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001176:	489e      	ldr	r0, [pc, #632]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001178:	f001 fa9a 	bl	80026b0 <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	f040 8103 	bne.w	800138a <HAL_GPIO_EXTI_Callback+0x246>
			HAL_Delay(7000);
 8001184:	f641 3058 	movw	r0, #7000	; 0x1b58
 8001188:	f000 ffb0 	bl	80020ec <HAL_Delay>
			if(tat == 0){
 800118c:	4b95      	ldr	r3, [pc, #596]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d150      	bne.n	8001236 <HAL_GPIO_EXTI_Callback+0xf2>
				h++;
 8001194:	4b97      	ldr	r3, [pc, #604]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a96      	ldr	r2, [pc, #600]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800119c:	6013      	str	r3, [r2, #0]
			if(h>23){
 800119e:	4b95      	ldr	r3, [pc, #596]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b17      	cmp	r3, #23
 80011a4:	d902      	bls.n	80011ac <HAL_GPIO_EXTI_Callback+0x68>
				h=0;
 80011a6:	4b93      	ldr	r3, [pc, #588]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
			}
			sprintf(num,"Time = %.2d:%.2d:%.2d",h,t,x);
 80011ac:	4b91      	ldr	r3, [pc, #580]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b91      	ldr	r3, [pc, #580]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80011b2:	6819      	ldr	r1, [r3, #0]
 80011b4:	4b91      	ldr	r3, [pc, #580]	; (80013fc <HAL_GPIO_EXTI_Callback+0x2b8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	460b      	mov	r3, r1
 80011bc:	4990      	ldr	r1, [pc, #576]	; (8001400 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80011be:	4891      	ldr	r0, [pc, #580]	; (8001404 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80011c0:	f004 feac 	bl	8005f1c <siprintf>
			while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80011c4:	bf00      	nop
 80011c6:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d0:	2b40      	cmp	r3, #64	; 0x40
 80011d2:	d1f8      	bne.n	80011c6 <HAL_GPIO_EXTI_Callback+0x82>
				HAL_UART_Transmit(&huart3, (uint32_t*) "\r", 2,1000);
 80011d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d8:	2202      	movs	r2, #2
 80011da:	498b      	ldr	r1, [pc, #556]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80011dc:	4882      	ldr	r0, [pc, #520]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80011de:	f003 fdbb 	bl	8004d58 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint32_t*)num,strlen(num),1000);
 80011e2:	4888      	ldr	r0, [pc, #544]	; (8001404 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80011e4:	f7ff f82c 	bl	8000240 <strlen>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f0:	4984      	ldr	r1, [pc, #528]	; (8001404 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80011f2:	487d      	ldr	r0, [pc, #500]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80011f4:	f003 fdb0 	bl	8004d58 <HAL_UART_Transmit>
			sprintf(num2," %.2d:%.2d:%.2d ",h,t,x);
 80011f8:	4b7e      	ldr	r3, [pc, #504]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b7e      	ldr	r3, [pc, #504]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80011fe:	6819      	ldr	r1, [r3, #0]
 8001200:	4b7e      	ldr	r3, [pc, #504]	; (80013fc <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	460b      	mov	r3, r1
 8001208:	4980      	ldr	r1, [pc, #512]	; (800140c <HAL_GPIO_EXTI_Callback+0x2c8>)
 800120a:	4881      	ldr	r0, [pc, #516]	; (8001410 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800120c:	f004 fe86 	bl	8005f1c <siprintf>
				while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8001210:	bf00      	nop
 8001212:	4b80      	ldr	r3, [pc, #512]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800121c:	2b40      	cmp	r3, #64	; 0x40
 800121e:	d1f8      	bne.n	8001212 <HAL_GPIO_EXTI_Callback+0xce>
				HAL_UART_Transmit(&huart2, (uint32_t*) num2,strlen(num2),1000 );
 8001220:	487b      	ldr	r0, [pc, #492]	; (8001410 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001222:	f7ff f80d 	bl	8000240 <strlen>
 8001226:	4603      	mov	r3, r0
 8001228:	b29a      	uxth	r2, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	4978      	ldr	r1, [pc, #480]	; (8001410 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001230:	4878      	ldr	r0, [pc, #480]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001232:	f003 fd91 	bl	8004d58 <HAL_UART_Transmit>
			}
			if(tat == 1){
 8001236:	4b6b      	ldr	r3, [pc, #428]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d150      	bne.n	80012e0 <HAL_GPIO_EXTI_Callback+0x19c>
				alert[0]++;
 800123e:	4b76      	ldr	r3, [pc, #472]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	4a74      	ldr	r2, [pc, #464]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001246:	6013      	str	r3, [r2, #0]
				if(alert[0] > 23){
 8001248:	4b73      	ldr	r3, [pc, #460]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b17      	cmp	r3, #23
 800124e:	d902      	bls.n	8001256 <HAL_GPIO_EXTI_Callback+0x112>
					alert[0] = 0;
 8001250:	4b71      	ldr	r3, [pc, #452]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
				}
				sprintf(num,"Open %.2d:%.2d:%.2d",alert[0],alert[1],alert[2]);
 8001256:	4b70      	ldr	r3, [pc, #448]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4b6f      	ldr	r3, [pc, #444]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800125c:	6859      	ldr	r1, [r3, #4]
 800125e:	4b6e      	ldr	r3, [pc, #440]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	460b      	mov	r3, r1
 8001266:	496d      	ldr	r1, [pc, #436]	; (800141c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001268:	4866      	ldr	r0, [pc, #408]	; (8001404 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800126a:	f004 fe57 	bl	8005f1c <siprintf>
				while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800126e:	bf00      	nop
 8001270:	4b5d      	ldr	r3, [pc, #372]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800127a:	2b40      	cmp	r3, #64	; 0x40
 800127c:	d1f8      	bne.n	8001270 <HAL_GPIO_EXTI_Callback+0x12c>
				HAL_UART_Transmit(&huart3, (uint32_t*) "\r", 2,1000);
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	2202      	movs	r2, #2
 8001284:	4960      	ldr	r1, [pc, #384]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8001286:	4858      	ldr	r0, [pc, #352]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001288:	f003 fd66 	bl	8004d58 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint32_t*)num,strlen(num),1000);
 800128c:	485d      	ldr	r0, [pc, #372]	; (8001404 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800128e:	f7fe ffd7 	bl	8000240 <strlen>
 8001292:	4603      	mov	r3, r0
 8001294:	b29a      	uxth	r2, r3
 8001296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129a:	495a      	ldr	r1, [pc, #360]	; (8001404 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800129c:	4852      	ldr	r0, [pc, #328]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800129e:	f003 fd5b 	bl	8004d58 <HAL_UART_Transmit>
				sprintf(num2," %.2d:%.2d:%.2d ",alert[0],alert[1],alert[2]);
 80012a2:	4b5d      	ldr	r3, [pc, #372]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b5c      	ldr	r3, [pc, #368]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80012a8:	6859      	ldr	r1, [r3, #4]
 80012aa:	4b5b      	ldr	r3, [pc, #364]	; (8001418 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	460b      	mov	r3, r1
 80012b2:	4956      	ldr	r1, [pc, #344]	; (800140c <HAL_GPIO_EXTI_Callback+0x2c8>)
 80012b4:	4856      	ldr	r0, [pc, #344]	; (8001410 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80012b6:	f004 fe31 	bl	8005f1c <siprintf>
				while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 80012ba:	bf00      	nop
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c6:	2b40      	cmp	r3, #64	; 0x40
 80012c8:	d1f8      	bne.n	80012bc <HAL_GPIO_EXTI_Callback+0x178>
				HAL_UART_Transmit(&huart2, (uint32_t*) num2,strlen(num2),1000 );
 80012ca:	4851      	ldr	r0, [pc, #324]	; (8001410 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80012cc:	f7fe ffb8 	bl	8000240 <strlen>
 80012d0:	4603      	mov	r3, r0
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d8:	494d      	ldr	r1, [pc, #308]	; (8001410 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80012da:	484e      	ldr	r0, [pc, #312]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80012dc:	f003 fd3c 	bl	8004d58 <HAL_UART_Transmit>

			}
			if(tat == 2){
 80012e0:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d150      	bne.n	800138a <HAL_GPIO_EXTI_Callback+0x246>
							alert2[0]++;
 80012e8:	4b4d      	ldr	r3, [pc, #308]	; (8001420 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	4a4c      	ldr	r2, [pc, #304]	; (8001420 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80012f0:	6013      	str	r3, [r2, #0]
							if(alert2[0] > 23){
 80012f2:	4b4b      	ldr	r3, [pc, #300]	; (8001420 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b17      	cmp	r3, #23
 80012f8:	d902      	bls.n	8001300 <HAL_GPIO_EXTI_Callback+0x1bc>
								alert2[0] = 0;
 80012fa:	4b49      	ldr	r3, [pc, #292]	; (8001420 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
							}
							sprintf(num,"Close %.2d:%.2d:%.2d",alert2[0],alert2[1],alert2[2]);
 8001300:	4b47      	ldr	r3, [pc, #284]	; (8001420 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b46      	ldr	r3, [pc, #280]	; (8001420 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001306:	6859      	ldr	r1, [r3, #4]
 8001308:	4b45      	ldr	r3, [pc, #276]	; (8001420 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	460b      	mov	r3, r1
 8001310:	4944      	ldr	r1, [pc, #272]	; (8001424 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001312:	483c      	ldr	r0, [pc, #240]	; (8001404 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001314:	f004 fe02 	bl	8005f1c <siprintf>
							while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8001318:	bf00      	nop
 800131a:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001324:	2b40      	cmp	r3, #64	; 0x40
 8001326:	d1f8      	bne.n	800131a <HAL_GPIO_EXTI_Callback+0x1d6>
							HAL_UART_Transmit(&huart3, (uint32_t*) "\r", 2,1000);
 8001328:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132c:	2202      	movs	r2, #2
 800132e:	4936      	ldr	r1, [pc, #216]	; (8001408 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8001330:	482d      	ldr	r0, [pc, #180]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001332:	f003 fd11 	bl	8004d58 <HAL_UART_Transmit>
							HAL_UART_Transmit(&huart3, (uint32_t*)num,strlen(num),1000);
 8001336:	4833      	ldr	r0, [pc, #204]	; (8001404 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001338:	f7fe ff82 	bl	8000240 <strlen>
 800133c:	4603      	mov	r3, r0
 800133e:	b29a      	uxth	r2, r3
 8001340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001344:	492f      	ldr	r1, [pc, #188]	; (8001404 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001346:	4828      	ldr	r0, [pc, #160]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001348:	f003 fd06 	bl	8004d58 <HAL_UART_Transmit>
							sprintf(num2," %.2d:%.2d:%.2d ",alert2[0],alert2[1],alert2[2]);
 800134c:	4b34      	ldr	r3, [pc, #208]	; (8001420 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b33      	ldr	r3, [pc, #204]	; (8001420 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001352:	6859      	ldr	r1, [r3, #4]
 8001354:	4b32      	ldr	r3, [pc, #200]	; (8001420 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	460b      	mov	r3, r1
 800135c:	492b      	ldr	r1, [pc, #172]	; (800140c <HAL_GPIO_EXTI_Callback+0x2c8>)
 800135e:	482c      	ldr	r0, [pc, #176]	; (8001410 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001360:	f004 fddc 	bl	8005f1c <siprintf>
							while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8001364:	bf00      	nop
 8001366:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001370:	2b40      	cmp	r3, #64	; 0x40
 8001372:	d1f8      	bne.n	8001366 <HAL_GPIO_EXTI_Callback+0x222>
							HAL_UART_Transmit(&huart2, (uint32_t*) num2,strlen(num2),1000 );
 8001374:	4826      	ldr	r0, [pc, #152]	; (8001410 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001376:	f7fe ff63 	bl	8000240 <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	b29a      	uxth	r2, r3
 800137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001382:	4923      	ldr	r1, [pc, #140]	; (8001410 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001384:	4823      	ldr	r0, [pc, #140]	; (8001414 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001386:	f003 fce7 	bl	8004d58 <HAL_UART_Transmit>

						}

		}
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15) == GPIO_PIN_RESET ){
 800138a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138e:	4818      	ldr	r0, [pc, #96]	; (80013f0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001390:	f001 f98e 	bl	80026b0 <HAL_GPIO_ReadPin>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	f040 8126 	bne.w	80015e8 <HAL_GPIO_EXTI_Callback+0x4a4>
			HAL_Delay(7000);
 800139c:	f641 3058 	movw	r0, #7000	; 0x1b58
 80013a0:	f000 fea4 	bl	80020ec <HAL_Delay>
			if(tat ==  0){
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d173      	bne.n	8001494 <HAL_GPIO_EXTI_Callback+0x350>
				t++;
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80013b4:	6013      	str	r3, [r2, #0]
					if(t>59){
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b3b      	cmp	r3, #59	; 0x3b
 80013bc:	d902      	bls.n	80013c4 <HAL_GPIO_EXTI_Callback+0x280>
									t=0;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
								}
					sprintf(num,"Time = %.2d:%.2d:%.2d",h,t,x);
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80013ca:	6819      	ldr	r1, [r3, #0]
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_GPIO_EXTI_Callback+0x2b8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	460b      	mov	r3, r1
 80013d4:	490a      	ldr	r1, [pc, #40]	; (8001400 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80013d6:	480b      	ldr	r0, [pc, #44]	; (8001404 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80013d8:	f004 fda0 	bl	8005f1c <siprintf>
								while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80013dc:	bf00      	nop
 80013de:	4b02      	ldr	r3, [pc, #8]	; (80013e8 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	e021      	b.n	8001428 <HAL_GPIO_EXTI_Callback+0x2e4>
 80013e4:	20000244 	.word	0x20000244
 80013e8:	20000394 	.word	0x20000394
 80013ec:	08008354 	.word	0x08008354
 80013f0:	40021000 	.word	0x40021000
 80013f4:	20000238 	.word	0x20000238
 80013f8:	20000234 	.word	0x20000234
 80013fc:	20000240 	.word	0x20000240
 8001400:	0800835c 	.word	0x0800835c
 8001404:	2000002c 	.word	0x2000002c
 8001408:	08008350 	.word	0x08008350
 800140c:	08008308 	.word	0x08008308
 8001410:	20000030 	.word	0x20000030
 8001414:	2000049c 	.word	0x2000049c
 8001418:	20000008 	.word	0x20000008
 800141c:	08008374 	.word	0x08008374
 8001420:	20000014 	.word	0x20000014
 8001424:	08008388 	.word	0x08008388
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800142e:	2b40      	cmp	r3, #64	; 0x40
 8001430:	d1d5      	bne.n	80013de <HAL_GPIO_EXTI_Callback+0x29a>
									HAL_UART_Transmit(&huart3, (uint32_t*) "\r", 2,1000);
 8001432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001436:	2202      	movs	r2, #2
 8001438:	49a3      	ldr	r1, [pc, #652]	; (80016c8 <HAL_GPIO_EXTI_Callback+0x584>)
 800143a:	48a4      	ldr	r0, [pc, #656]	; (80016cc <HAL_GPIO_EXTI_Callback+0x588>)
 800143c:	f003 fc8c 	bl	8004d58 <HAL_UART_Transmit>
									HAL_UART_Transmit(&huart3, (uint32_t*)num,strlen(num),1000);
 8001440:	48a3      	ldr	r0, [pc, #652]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x58c>)
 8001442:	f7fe fefd 	bl	8000240 <strlen>
 8001446:	4603      	mov	r3, r0
 8001448:	b29a      	uxth	r2, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	49a0      	ldr	r1, [pc, #640]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x58c>)
 8001450:	489e      	ldr	r0, [pc, #632]	; (80016cc <HAL_GPIO_EXTI_Callback+0x588>)
 8001452:	f003 fc81 	bl	8004d58 <HAL_UART_Transmit>
									sprintf(num2," %.2d:%.2d:%.2d ",h,t,x);
 8001456:	4b9f      	ldr	r3, [pc, #636]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x590>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b9f      	ldr	r3, [pc, #636]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x594>)
 800145c:	6819      	ldr	r1, [r3, #0]
 800145e:	4b9f      	ldr	r3, [pc, #636]	; (80016dc <HAL_GPIO_EXTI_Callback+0x598>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	460b      	mov	r3, r1
 8001466:	499e      	ldr	r1, [pc, #632]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x59c>)
 8001468:	489e      	ldr	r0, [pc, #632]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x5a0>)
 800146a:	f004 fd57 	bl	8005f1c <siprintf>
									while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 800146e:	bf00      	nop
 8001470:	4b9d      	ldr	r3, [pc, #628]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x5a4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800147a:	2b40      	cmp	r3, #64	; 0x40
 800147c:	d1f8      	bne.n	8001470 <HAL_GPIO_EXTI_Callback+0x32c>
									HAL_UART_Transmit(&huart2, (uint32_t*) num2,strlen(num2),1000 );
 800147e:	4899      	ldr	r0, [pc, #612]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8001480:	f7fe fede 	bl	8000240 <strlen>
 8001484:	4603      	mov	r3, r0
 8001486:	b29a      	uxth	r2, r3
 8001488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148c:	4995      	ldr	r1, [pc, #596]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x5a0>)
 800148e:	4896      	ldr	r0, [pc, #600]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x5a4>)
 8001490:	f003 fc62 	bl	8004d58 <HAL_UART_Transmit>
			}
			if(tat == 1){
 8001494:	4b95      	ldr	r3, [pc, #596]	; (80016ec <HAL_GPIO_EXTI_Callback+0x5a8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d150      	bne.n	800153e <HAL_GPIO_EXTI_Callback+0x3fa>
							alert[1]++;
 800149c:	4b94      	ldr	r3, [pc, #592]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x5ac>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	3301      	adds	r3, #1
 80014a2:	4a93      	ldr	r2, [pc, #588]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x5ac>)
 80014a4:	6053      	str	r3, [r2, #4]
							if(alert[1] > 59){
 80014a6:	4b92      	ldr	r3, [pc, #584]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x5ac>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b3b      	cmp	r3, #59	; 0x3b
 80014ac:	d902      	bls.n	80014b4 <HAL_GPIO_EXTI_Callback+0x370>
								alert[1] = 0;
 80014ae:	4b90      	ldr	r3, [pc, #576]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x5ac>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
							}
							sprintf(num,"Open %.2d:%.2d:%.2d",alert[0],alert[1],alert[2]);
 80014b4:	4b8e      	ldr	r3, [pc, #568]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x5ac>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b8d      	ldr	r3, [pc, #564]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x5ac>)
 80014ba:	6859      	ldr	r1, [r3, #4]
 80014bc:	4b8c      	ldr	r3, [pc, #560]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x5ac>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	460b      	mov	r3, r1
 80014c4:	498b      	ldr	r1, [pc, #556]	; (80016f4 <HAL_GPIO_EXTI_Callback+0x5b0>)
 80014c6:	4882      	ldr	r0, [pc, #520]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014c8:	f004 fd28 	bl	8005f1c <siprintf>
							while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80014cc:	bf00      	nop
 80014ce:	4b7f      	ldr	r3, [pc, #508]	; (80016cc <HAL_GPIO_EXTI_Callback+0x588>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d8:	2b40      	cmp	r3, #64	; 0x40
 80014da:	d1f8      	bne.n	80014ce <HAL_GPIO_EXTI_Callback+0x38a>
							HAL_UART_Transmit(&huart3, (uint32_t*) "\r", 2,1000);
 80014dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e0:	2202      	movs	r2, #2
 80014e2:	4979      	ldr	r1, [pc, #484]	; (80016c8 <HAL_GPIO_EXTI_Callback+0x584>)
 80014e4:	4879      	ldr	r0, [pc, #484]	; (80016cc <HAL_GPIO_EXTI_Callback+0x588>)
 80014e6:	f003 fc37 	bl	8004d58 <HAL_UART_Transmit>
							HAL_UART_Transmit(&huart3, (uint32_t*)num,strlen(num),1000);
 80014ea:	4879      	ldr	r0, [pc, #484]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014ec:	f7fe fea8 	bl	8000240 <strlen>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f8:	4975      	ldr	r1, [pc, #468]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x58c>)
 80014fa:	4874      	ldr	r0, [pc, #464]	; (80016cc <HAL_GPIO_EXTI_Callback+0x588>)
 80014fc:	f003 fc2c 	bl	8004d58 <HAL_UART_Transmit>
							sprintf(num2," %.2d:%.2d:%.2d ",alert[0],alert[1],alert[2]);
 8001500:	4b7b      	ldr	r3, [pc, #492]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x5ac>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b7a      	ldr	r3, [pc, #488]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x5ac>)
 8001506:	6859      	ldr	r1, [r3, #4]
 8001508:	4b79      	ldr	r3, [pc, #484]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x5ac>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	460b      	mov	r3, r1
 8001510:	4973      	ldr	r1, [pc, #460]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x59c>)
 8001512:	4874      	ldr	r0, [pc, #464]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8001514:	f004 fd02 	bl	8005f1c <siprintf>
											while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8001518:	bf00      	nop
 800151a:	4b73      	ldr	r3, [pc, #460]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x5a4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001524:	2b40      	cmp	r3, #64	; 0x40
 8001526:	d1f8      	bne.n	800151a <HAL_GPIO_EXTI_Callback+0x3d6>
											HAL_UART_Transmit(&huart2, (uint32_t*) num2,strlen(num2),1000 );
 8001528:	486e      	ldr	r0, [pc, #440]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x5a0>)
 800152a:	f7fe fe89 	bl	8000240 <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	b29a      	uxth	r2, r3
 8001532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001536:	496b      	ldr	r1, [pc, #428]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8001538:	486b      	ldr	r0, [pc, #428]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x5a4>)
 800153a:	f003 fc0d 	bl	8004d58 <HAL_UART_Transmit>

						}
			if(tat == 2){
 800153e:	4b6b      	ldr	r3, [pc, #428]	; (80016ec <HAL_GPIO_EXTI_Callback+0x5a8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d150      	bne.n	80015e8 <HAL_GPIO_EXTI_Callback+0x4a4>
										alert2[1]++;
 8001546:	4b6c      	ldr	r3, [pc, #432]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	3301      	adds	r3, #1
 800154c:	4a6a      	ldr	r2, [pc, #424]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x5b4>)
 800154e:	6053      	str	r3, [r2, #4]
										if(alert2[1] > 59){
 8001550:	4b69      	ldr	r3, [pc, #420]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b3b      	cmp	r3, #59	; 0x3b
 8001556:	d902      	bls.n	800155e <HAL_GPIO_EXTI_Callback+0x41a>
											alert2[1] = 0;
 8001558:	4b67      	ldr	r3, [pc, #412]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x5b4>)
 800155a:	2200      	movs	r2, #0
 800155c:	605a      	str	r2, [r3, #4]
										}
										sprintf(num,"Close %.2d:%.2d:%.2d",alert2[0],alert2[1],alert2[2]);
 800155e:	4b66      	ldr	r3, [pc, #408]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4b65      	ldr	r3, [pc, #404]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8001564:	6859      	ldr	r1, [r3, #4]
 8001566:	4b64      	ldr	r3, [pc, #400]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	460b      	mov	r3, r1
 800156e:	4963      	ldr	r1, [pc, #396]	; (80016fc <HAL_GPIO_EXTI_Callback+0x5b8>)
 8001570:	4857      	ldr	r0, [pc, #348]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x58c>)
 8001572:	f004 fcd3 	bl	8005f1c <siprintf>
										while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8001576:	bf00      	nop
 8001578:	4b54      	ldr	r3, [pc, #336]	; (80016cc <HAL_GPIO_EXTI_Callback+0x588>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001582:	2b40      	cmp	r3, #64	; 0x40
 8001584:	d1f8      	bne.n	8001578 <HAL_GPIO_EXTI_Callback+0x434>
										HAL_UART_Transmit(&huart3, (uint32_t*) "\r", 2,1000);
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	2202      	movs	r2, #2
 800158c:	494e      	ldr	r1, [pc, #312]	; (80016c8 <HAL_GPIO_EXTI_Callback+0x584>)
 800158e:	484f      	ldr	r0, [pc, #316]	; (80016cc <HAL_GPIO_EXTI_Callback+0x588>)
 8001590:	f003 fbe2 	bl	8004d58 <HAL_UART_Transmit>
										HAL_UART_Transmit(&huart3, (uint32_t*)num,strlen(num),1000);
 8001594:	484e      	ldr	r0, [pc, #312]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x58c>)
 8001596:	f7fe fe53 	bl	8000240 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	b29a      	uxth	r2, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	494b      	ldr	r1, [pc, #300]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x58c>)
 80015a4:	4849      	ldr	r0, [pc, #292]	; (80016cc <HAL_GPIO_EXTI_Callback+0x588>)
 80015a6:	f003 fbd7 	bl	8004d58 <HAL_UART_Transmit>
										sprintf(num2," %.2d:%.2d:%.2d ",alert2[0],alert2[1],alert2[2]);
 80015aa:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x5b4>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4b52      	ldr	r3, [pc, #328]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x5b4>)
 80015b0:	6859      	ldr	r1, [r3, #4]
 80015b2:	4b51      	ldr	r3, [pc, #324]	; (80016f8 <HAL_GPIO_EXTI_Callback+0x5b4>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	460b      	mov	r3, r1
 80015ba:	4949      	ldr	r1, [pc, #292]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x59c>)
 80015bc:	4849      	ldr	r0, [pc, #292]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x5a0>)
 80015be:	f004 fcad 	bl	8005f1c <siprintf>
										while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 80015c2:	bf00      	nop
 80015c4:	4b48      	ldr	r3, [pc, #288]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x5a4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ce:	2b40      	cmp	r3, #64	; 0x40
 80015d0:	d1f8      	bne.n	80015c4 <HAL_GPIO_EXTI_Callback+0x480>
										HAL_UART_Transmit(&huart2, (uint32_t*) num2,strlen(num2),1000 );
 80015d2:	4844      	ldr	r0, [pc, #272]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x5a0>)
 80015d4:	f7fe fe34 	bl	8000240 <strlen>
 80015d8:	4603      	mov	r3, r0
 80015da:	b29a      	uxth	r2, r3
 80015dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e0:	4940      	ldr	r1, [pc, #256]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x5a0>)
 80015e2:	4841      	ldr	r0, [pc, #260]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x5a4>)
 80015e4:	f003 fbb8 	bl	8004d58 <HAL_UART_Transmit>

									}

				}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET ){
 80015e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ec:	4844      	ldr	r0, [pc, #272]	; (8001700 <HAL_GPIO_EXTI_Callback+0x5bc>)
 80015ee:	f001 f85f 	bl	80026b0 <HAL_GPIO_ReadPin>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f040 8124 	bne.w	8001842 <HAL_GPIO_EXTI_Callback+0x6fe>
			HAL_Delay(7000);
 80015fa:	f641 3058 	movw	r0, #7000	; 0x1b58
 80015fe:	f000 fd75 	bl	80020ec <HAL_Delay>
			if(tat == 0){
 8001602:	4b3a      	ldr	r3, [pc, #232]	; (80016ec <HAL_GPIO_EXTI_Callback+0x5a8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d150      	bne.n	80016ac <HAL_GPIO_EXTI_Callback+0x568>
				x++;
 800160a:	4b34      	ldr	r3, [pc, #208]	; (80016dc <HAL_GPIO_EXTI_Callback+0x598>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	4a32      	ldr	r2, [pc, #200]	; (80016dc <HAL_GPIO_EXTI_Callback+0x598>)
 8001612:	6013      	str	r3, [r2, #0]
					if(x>59){
 8001614:	4b31      	ldr	r3, [pc, #196]	; (80016dc <HAL_GPIO_EXTI_Callback+0x598>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b3b      	cmp	r3, #59	; 0x3b
 800161a:	d902      	bls.n	8001622 <HAL_GPIO_EXTI_Callback+0x4de>
							x=0;
 800161c:	4b2f      	ldr	r3, [pc, #188]	; (80016dc <HAL_GPIO_EXTI_Callback+0x598>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
					}
					sprintf(num,"Time = %.2d:%.2d:%.2d",h,t,x );
 8001622:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x590>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b2c      	ldr	r3, [pc, #176]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x594>)
 8001628:	6819      	ldr	r1, [r3, #0]
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <HAL_GPIO_EXTI_Callback+0x598>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	460b      	mov	r3, r1
 8001632:	4934      	ldr	r1, [pc, #208]	; (8001704 <HAL_GPIO_EXTI_Callback+0x5c0>)
 8001634:	4826      	ldr	r0, [pc, #152]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x58c>)
 8001636:	f004 fc71 	bl	8005f1c <siprintf>
								while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800163a:	bf00      	nop
 800163c:	4b23      	ldr	r3, [pc, #140]	; (80016cc <HAL_GPIO_EXTI_Callback+0x588>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001646:	2b40      	cmp	r3, #64	; 0x40
 8001648:	d1f8      	bne.n	800163c <HAL_GPIO_EXTI_Callback+0x4f8>
									HAL_UART_Transmit(&huart3, (uint32_t*) "\r", 2,1000);
 800164a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164e:	2202      	movs	r2, #2
 8001650:	491d      	ldr	r1, [pc, #116]	; (80016c8 <HAL_GPIO_EXTI_Callback+0x584>)
 8001652:	481e      	ldr	r0, [pc, #120]	; (80016cc <HAL_GPIO_EXTI_Callback+0x588>)
 8001654:	f003 fb80 	bl	8004d58 <HAL_UART_Transmit>
									HAL_UART_Transmit(&huart3, (uint32_t*)num,strlen(num),1000);
 8001658:	481d      	ldr	r0, [pc, #116]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x58c>)
 800165a:	f7fe fdf1 	bl	8000240 <strlen>
 800165e:	4603      	mov	r3, r0
 8001660:	b29a      	uxth	r2, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001666:	491a      	ldr	r1, [pc, #104]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x58c>)
 8001668:	4818      	ldr	r0, [pc, #96]	; (80016cc <HAL_GPIO_EXTI_Callback+0x588>)
 800166a:	f003 fb75 	bl	8004d58 <HAL_UART_Transmit>
									sprintf(num2," %.2d:%.2d:%.2d ",h,t,x);
 800166e:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x590>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x594>)
 8001674:	6819      	ldr	r1, [r3, #0]
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_GPIO_EXTI_Callback+0x598>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	4918      	ldr	r1, [pc, #96]	; (80016e0 <HAL_GPIO_EXTI_Callback+0x59c>)
 8001680:	4818      	ldr	r0, [pc, #96]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8001682:	f004 fc4b 	bl	8005f1c <siprintf>
									while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8001686:	bf00      	nop
 8001688:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x5a4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001692:	2b40      	cmp	r3, #64	; 0x40
 8001694:	d1f8      	bne.n	8001688 <HAL_GPIO_EXTI_Callback+0x544>
									HAL_UART_Transmit(&huart2, (uint32_t*) num2,strlen(num2),1000 );
 8001696:	4813      	ldr	r0, [pc, #76]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8001698:	f7fe fdd2 	bl	8000240 <strlen>
 800169c:	4603      	mov	r3, r0
 800169e:	b29a      	uxth	r2, r3
 80016a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a4:	490f      	ldr	r1, [pc, #60]	; (80016e4 <HAL_GPIO_EXTI_Callback+0x5a0>)
 80016a6:	4810      	ldr	r0, [pc, #64]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x5a4>)
 80016a8:	f003 fb56 	bl	8004d58 <HAL_UART_Transmit>
			}
			if(tat == 1){
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_GPIO_EXTI_Callback+0x5a8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d171      	bne.n	8001798 <HAL_GPIO_EXTI_Callback+0x654>
							alert[2]++;
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x5ac>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	3301      	adds	r3, #1
 80016ba:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x5ac>)
 80016bc:	6093      	str	r3, [r2, #8]
							if(alert[2] > 59){
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x5ac>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b3b      	cmp	r3, #59	; 0x3b
 80016c4:	d923      	bls.n	800170e <HAL_GPIO_EXTI_Callback+0x5ca>
 80016c6:	e01f      	b.n	8001708 <HAL_GPIO_EXTI_Callback+0x5c4>
 80016c8:	08008350 	.word	0x08008350
 80016cc:	20000394 	.word	0x20000394
 80016d0:	2000002c 	.word	0x2000002c
 80016d4:	20000238 	.word	0x20000238
 80016d8:	20000234 	.word	0x20000234
 80016dc:	20000240 	.word	0x20000240
 80016e0:	08008308 	.word	0x08008308
 80016e4:	20000030 	.word	0x20000030
 80016e8:	2000049c 	.word	0x2000049c
 80016ec:	20000244 	.word	0x20000244
 80016f0:	20000008 	.word	0x20000008
 80016f4:	08008374 	.word	0x08008374
 80016f8:	20000014 	.word	0x20000014
 80016fc:	08008388 	.word	0x08008388
 8001700:	40020400 	.word	0x40020400
 8001704:	0800835c 	.word	0x0800835c
								alert[2] = 0;
 8001708:	4b5f      	ldr	r3, [pc, #380]	; (8001888 <HAL_GPIO_EXTI_Callback+0x744>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
							}
							sprintf(num,"Open %.2d:%.2d:%.2d",alert[0],alert[1],alert[2]);
 800170e:	4b5e      	ldr	r3, [pc, #376]	; (8001888 <HAL_GPIO_EXTI_Callback+0x744>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b5d      	ldr	r3, [pc, #372]	; (8001888 <HAL_GPIO_EXTI_Callback+0x744>)
 8001714:	6859      	ldr	r1, [r3, #4]
 8001716:	4b5c      	ldr	r3, [pc, #368]	; (8001888 <HAL_GPIO_EXTI_Callback+0x744>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	460b      	mov	r3, r1
 800171e:	495b      	ldr	r1, [pc, #364]	; (800188c <HAL_GPIO_EXTI_Callback+0x748>)
 8001720:	485b      	ldr	r0, [pc, #364]	; (8001890 <HAL_GPIO_EXTI_Callback+0x74c>)
 8001722:	f004 fbfb 	bl	8005f1c <siprintf>
							while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8001726:	bf00      	nop
 8001728:	4b5a      	ldr	r3, [pc, #360]	; (8001894 <HAL_GPIO_EXTI_Callback+0x750>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001732:	2b40      	cmp	r3, #64	; 0x40
 8001734:	d1f8      	bne.n	8001728 <HAL_GPIO_EXTI_Callback+0x5e4>
							HAL_UART_Transmit(&huart3, (uint32_t*) "\r", 2,1000);
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	2202      	movs	r2, #2
 800173c:	4956      	ldr	r1, [pc, #344]	; (8001898 <HAL_GPIO_EXTI_Callback+0x754>)
 800173e:	4855      	ldr	r0, [pc, #340]	; (8001894 <HAL_GPIO_EXTI_Callback+0x750>)
 8001740:	f003 fb0a 	bl	8004d58 <HAL_UART_Transmit>
							HAL_UART_Transmit(&huart3, (uint32_t*)num,strlen(num),1000);
 8001744:	4852      	ldr	r0, [pc, #328]	; (8001890 <HAL_GPIO_EXTI_Callback+0x74c>)
 8001746:	f7fe fd7b 	bl	8000240 <strlen>
 800174a:	4603      	mov	r3, r0
 800174c:	b29a      	uxth	r2, r3
 800174e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001752:	494f      	ldr	r1, [pc, #316]	; (8001890 <HAL_GPIO_EXTI_Callback+0x74c>)
 8001754:	484f      	ldr	r0, [pc, #316]	; (8001894 <HAL_GPIO_EXTI_Callback+0x750>)
 8001756:	f003 faff 	bl	8004d58 <HAL_UART_Transmit>
							sprintf(num2," %.2d:%.2d:%.2d ",alert[0],alert[1],alert[2]);
 800175a:	4b4b      	ldr	r3, [pc, #300]	; (8001888 <HAL_GPIO_EXTI_Callback+0x744>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b4a      	ldr	r3, [pc, #296]	; (8001888 <HAL_GPIO_EXTI_Callback+0x744>)
 8001760:	6859      	ldr	r1, [r3, #4]
 8001762:	4b49      	ldr	r3, [pc, #292]	; (8001888 <HAL_GPIO_EXTI_Callback+0x744>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	460b      	mov	r3, r1
 800176a:	494c      	ldr	r1, [pc, #304]	; (800189c <HAL_GPIO_EXTI_Callback+0x758>)
 800176c:	484c      	ldr	r0, [pc, #304]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x75c>)
 800176e:	f004 fbd5 	bl	8005f1c <siprintf>
							while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8001772:	bf00      	nop
 8001774:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <HAL_GPIO_EXTI_Callback+0x760>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800177e:	2b40      	cmp	r3, #64	; 0x40
 8001780:	d1f8      	bne.n	8001774 <HAL_GPIO_EXTI_Callback+0x630>
							HAL_UART_Transmit(&huart2, (uint32_t*) num2,strlen(num2),1000 );
 8001782:	4847      	ldr	r0, [pc, #284]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x75c>)
 8001784:	f7fe fd5c 	bl	8000240 <strlen>
 8001788:	4603      	mov	r3, r0
 800178a:	b29a      	uxth	r2, r3
 800178c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001790:	4943      	ldr	r1, [pc, #268]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x75c>)
 8001792:	4844      	ldr	r0, [pc, #272]	; (80018a4 <HAL_GPIO_EXTI_Callback+0x760>)
 8001794:	f003 fae0 	bl	8004d58 <HAL_UART_Transmit>

						}
			if(tat == 2){
 8001798:	4b43      	ldr	r3, [pc, #268]	; (80018a8 <HAL_GPIO_EXTI_Callback+0x764>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d150      	bne.n	8001842 <HAL_GPIO_EXTI_Callback+0x6fe>
										alert2[2]++;
 80017a0:	4b42      	ldr	r3, [pc, #264]	; (80018ac <HAL_GPIO_EXTI_Callback+0x768>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	3301      	adds	r3, #1
 80017a6:	4a41      	ldr	r2, [pc, #260]	; (80018ac <HAL_GPIO_EXTI_Callback+0x768>)
 80017a8:	6093      	str	r3, [r2, #8]
										if(alert2[2] > 59){
 80017aa:	4b40      	ldr	r3, [pc, #256]	; (80018ac <HAL_GPIO_EXTI_Callback+0x768>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b3b      	cmp	r3, #59	; 0x3b
 80017b0:	d902      	bls.n	80017b8 <HAL_GPIO_EXTI_Callback+0x674>
											alert2[2] = 0;
 80017b2:	4b3e      	ldr	r3, [pc, #248]	; (80018ac <HAL_GPIO_EXTI_Callback+0x768>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
										}
										sprintf(num,"Close %.2d:%.2d:%.2d",alert2[0],alert2[1],alert2[2]);
 80017b8:	4b3c      	ldr	r3, [pc, #240]	; (80018ac <HAL_GPIO_EXTI_Callback+0x768>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <HAL_GPIO_EXTI_Callback+0x768>)
 80017be:	6859      	ldr	r1, [r3, #4]
 80017c0:	4b3a      	ldr	r3, [pc, #232]	; (80018ac <HAL_GPIO_EXTI_Callback+0x768>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	460b      	mov	r3, r1
 80017c8:	4939      	ldr	r1, [pc, #228]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x76c>)
 80017ca:	4831      	ldr	r0, [pc, #196]	; (8001890 <HAL_GPIO_EXTI_Callback+0x74c>)
 80017cc:	f004 fba6 	bl	8005f1c <siprintf>
										while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80017d0:	bf00      	nop
 80017d2:	4b30      	ldr	r3, [pc, #192]	; (8001894 <HAL_GPIO_EXTI_Callback+0x750>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017dc:	2b40      	cmp	r3, #64	; 0x40
 80017de:	d1f8      	bne.n	80017d2 <HAL_GPIO_EXTI_Callback+0x68e>
										HAL_UART_Transmit(&huart3, (uint32_t*) "\r", 2,1000);
 80017e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e4:	2202      	movs	r2, #2
 80017e6:	492c      	ldr	r1, [pc, #176]	; (8001898 <HAL_GPIO_EXTI_Callback+0x754>)
 80017e8:	482a      	ldr	r0, [pc, #168]	; (8001894 <HAL_GPIO_EXTI_Callback+0x750>)
 80017ea:	f003 fab5 	bl	8004d58 <HAL_UART_Transmit>
										HAL_UART_Transmit(&huart3, (uint32_t*)num,strlen(num),1000);
 80017ee:	4828      	ldr	r0, [pc, #160]	; (8001890 <HAL_GPIO_EXTI_Callback+0x74c>)
 80017f0:	f7fe fd26 	bl	8000240 <strlen>
 80017f4:	4603      	mov	r3, r0
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fc:	4924      	ldr	r1, [pc, #144]	; (8001890 <HAL_GPIO_EXTI_Callback+0x74c>)
 80017fe:	4825      	ldr	r0, [pc, #148]	; (8001894 <HAL_GPIO_EXTI_Callback+0x750>)
 8001800:	f003 faaa 	bl	8004d58 <HAL_UART_Transmit>
										sprintf(num2," %.2d:%.2d:%.2d ",alert2[0],alert2[1],alert2[2]);
 8001804:	4b29      	ldr	r3, [pc, #164]	; (80018ac <HAL_GPIO_EXTI_Callback+0x768>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <HAL_GPIO_EXTI_Callback+0x768>)
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_GPIO_EXTI_Callback+0x768>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	460b      	mov	r3, r1
 8001814:	4921      	ldr	r1, [pc, #132]	; (800189c <HAL_GPIO_EXTI_Callback+0x758>)
 8001816:	4822      	ldr	r0, [pc, #136]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x75c>)
 8001818:	f004 fb80 	bl	8005f1c <siprintf>
										while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 800181c:	bf00      	nop
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_GPIO_EXTI_Callback+0x760>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001828:	2b40      	cmp	r3, #64	; 0x40
 800182a:	d1f8      	bne.n	800181e <HAL_GPIO_EXTI_Callback+0x6da>
										HAL_UART_Transmit(&huart2, (uint32_t*) num2,strlen(num2),1000 );
 800182c:	481c      	ldr	r0, [pc, #112]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x75c>)
 800182e:	f7fe fd07 	bl	8000240 <strlen>
 8001832:	4603      	mov	r3, r0
 8001834:	b29a      	uxth	r2, r3
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	4919      	ldr	r1, [pc, #100]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x75c>)
 800183c:	4819      	ldr	r0, [pc, #100]	; (80018a4 <HAL_GPIO_EXTI_Callback+0x760>)
 800183e:	f003 fa8b 	bl	8004d58 <HAL_UART_Transmit>

									}
				}

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET ){
 8001842:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001846:	481b      	ldr	r0, [pc, #108]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x770>)
 8001848:	f000 ff32 	bl	80026b0 <HAL_GPIO_ReadPin>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	f47f ac8f 	bne.w	8001172 <HAL_GPIO_EXTI_Callback+0x2e>
			HAL_Delay(7000);
 8001854:	f641 3058 	movw	r0, #7000	; 0x1b58
 8001858:	f000 fc48 	bl	80020ec <HAL_Delay>
			tat += 1 ;
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_GPIO_EXTI_Callback+0x764>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	4a11      	ldr	r2, [pc, #68]	; (80018a8 <HAL_GPIO_EXTI_Callback+0x764>)
 8001864:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint32_t*) "\n\r Next", 9,1000);
 8001866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186a:	2209      	movs	r2, #9
 800186c:	4912      	ldr	r1, [pc, #72]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x774>)
 800186e:	4809      	ldr	r0, [pc, #36]	; (8001894 <HAL_GPIO_EXTI_Callback+0x750>)
 8001870:	f003 fa72 	bl	8004d58 <HAL_UART_Transmit>
			if(tat == 3 ){
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_GPIO_EXTI_Callback+0x764>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b03      	cmp	r3, #3
 800187a:	d000      	beq.n	800187e <HAL_GPIO_EXTI_Callback+0x73a>
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14) == GPIO_PIN_RESET ){
 800187c:	e479      	b.n	8001172 <HAL_GPIO_EXTI_Callback+0x2e>
				break;
 800187e:	bf00      	nop
			}
				}
	}

}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000008 	.word	0x20000008
 800188c:	08008374 	.word	0x08008374
 8001890:	2000002c 	.word	0x2000002c
 8001894:	20000394 	.word	0x20000394
 8001898:	08008350 	.word	0x08008350
 800189c:	08008308 	.word	0x08008308
 80018a0:	20000030 	.word	0x20000030
 80018a4:	2000049c 	.word	0x2000049c
 80018a8:	20000244 	.word	0x20000244
 80018ac:	20000014 	.word	0x20000014
 80018b0:	08008388 	.word	0x08008388
 80018b4:	40020400 	.word	0x40020400
 80018b8:	08008354 	.word	0x08008354

080018bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <Error_Handler+0x8>
	...

080018c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_MspInit+0x44>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_MspInit+0x44>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_MspInit+0x44>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_MspInit+0x44>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <HAL_MspInit+0x44>)
 80018ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f0:	6453      	str	r3, [r2, #68]	; 0x44
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_MspInit+0x44>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80018fe:	2005      	movs	r0, #5
 8001900:	f000 fce8 	bl	80022d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <NMI_Handler+0x4>

08001916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <MemManage_Handler+0x4>

08001922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <BusFault_Handler+0x4>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <UsageFault_Handler+0x4>

0800192e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195c:	f000 fba6 	bl	80020ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}

08001964 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001968:	4803      	ldr	r0, [pc, #12]	; (8001978 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800196a:	f002 fda9 	bl	80044c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  	 count =  1 ;
 800196e:	4b03      	ldr	r3, [pc, #12]	; (800197c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001970:	2201      	movs	r2, #1
 8001972:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200002fc 	.word	0x200002fc
 800197c:	2000022c 	.word	0x2000022c

08001980 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001984:	4815      	ldr	r0, [pc, #84]	; (80019dc <TIM2_IRQHandler+0x5c>)
 8001986:	f002 fd9b 	bl	80044c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  count2 = 1;
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <TIM2_IRQHandler+0x60>)
 800198c:	2201      	movs	r2, #1
 800198e:	601a      	str	r2, [r3, #0]
	  x += 1;
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <TIM2_IRQHandler+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <TIM2_IRQHandler+0x64>)
 8001998:	6013      	str	r3, [r2, #0]
	    	if(x>59){
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <TIM2_IRQHandler+0x64>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b3b      	cmp	r3, #59	; 0x3b
 80019a0:	d907      	bls.n	80019b2 <TIM2_IRQHandler+0x32>
	    		t++;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <TIM2_IRQHandler+0x68>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	3301      	adds	r3, #1
 80019a8:	4a0f      	ldr	r2, [pc, #60]	; (80019e8 <TIM2_IRQHandler+0x68>)
 80019aa:	6013      	str	r3, [r2, #0]
	    		x = 0;}
 80019ac:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <TIM2_IRQHandler+0x64>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
	    	if(t>59){
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <TIM2_IRQHandler+0x68>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b3b      	cmp	r3, #59	; 0x3b
 80019b8:	d907      	bls.n	80019ca <TIM2_IRQHandler+0x4a>
	    			t = 0;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <TIM2_IRQHandler+0x68>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
	    			h++;
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <TIM2_IRQHandler+0x6c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <TIM2_IRQHandler+0x6c>)
 80019c8:	6013      	str	r3, [r2, #0]
	    			}
	    	if(h>23){
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <TIM2_IRQHandler+0x6c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b17      	cmp	r3, #23
 80019d0:	d902      	bls.n	80019d8 <TIM2_IRQHandler+0x58>
	    			h=0;
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <TIM2_IRQHandler+0x6c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
	    			}


  /* USER CODE END TIM2_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000348 	.word	0x20000348
 80019e0:	20000230 	.word	0x20000230
 80019e4:	20000240 	.word	0x20000240
 80019e8:	20000234 	.word	0x20000234
 80019ec:	20000238 	.word	0x20000238

080019f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80019f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019f8:	f000 fe8c 	bl	8002714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
	return 1;
 8001a04:	2301      	movs	r3, #1
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <_kill>:

int _kill(int pid, int sig)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a1a:	f003 fdfb 	bl	8005614 <__errno>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2216      	movs	r2, #22
 8001a22:	601a      	str	r2, [r3, #0]
	return -1;
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <_exit>:

void _exit (int status)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ffe7 	bl	8001a10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a42:	e7fe      	b.n	8001a42 <_exit+0x12>

08001a44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	e00a      	b.n	8001a6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a56:	f3af 8000 	nop.w
 8001a5a:	4601      	mov	r1, r0
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	60ba      	str	r2, [r7, #8]
 8001a62:	b2ca      	uxtb	r2, r1
 8001a64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dbf0      	blt.n	8001a56 <_read+0x12>
	}

return len;
 8001a74:	687b      	ldr	r3, [r7, #4]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e009      	b.n	8001aa4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	60ba      	str	r2, [r7, #8]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dbf1      	blt.n	8001a90 <_write+0x12>
	}
	return len;
 8001aac:	687b      	ldr	r3, [r7, #4]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <_close>:

int _close(int file)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
	return -1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ade:	605a      	str	r2, [r3, #4]
	return 0;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <_isatty>:

int _isatty(int file)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
	return 1;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <_sbrk+0x5c>)
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <_sbrk+0x60>)
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d102      	bne.n	8001b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <_sbrk+0x64>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <_sbrk+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d207      	bcs.n	8001b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b50:	f003 fd60 	bl	8005614 <__errno>
 8001b54:	4603      	mov	r3, r0
 8001b56:	220c      	movs	r2, #12
 8001b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	e009      	b.n	8001b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <_sbrk+0x64>)
 8001b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b72:	68fb      	ldr	r3, [r7, #12]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20080000 	.word	0x20080000
 8001b80:	00000400 	.word	0x00000400
 8001b84:	20000264 	.word	0x20000264
 8001b88:	20000538 	.word	0x20000538

08001b8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <SystemInit+0x20>)
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <SystemInit+0x20>)
 8001b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb6:	f107 0310 	add.w	r3, r7, #16
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <MX_TIM1_Init+0xa0>)
 8001bd0:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <MX_TIM1_Init+0xa4>)
 8001bd2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 108-1;
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <MX_TIM1_Init+0xa0>)
 8001bd6:	226b      	movs	r2, #107	; 0x6b
 8001bd8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <MX_TIM1_Init+0xa0>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <MX_TIM1_Init+0xa0>)
 8001be2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001be6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <MX_TIM1_Init+0xa0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <MX_TIM1_Init+0xa0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf4:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <MX_TIM1_Init+0xa0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bfa:	4815      	ldr	r0, [pc, #84]	; (8001c50 <MX_TIM1_Init+0xa0>)
 8001bfc:	f002 fb90 	bl	8004320 <HAL_TIM_Base_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001c06:	f7ff fe59 	bl	80018bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	4619      	mov	r1, r3
 8001c16:	480e      	ldr	r0, [pc, #56]	; (8001c50 <MX_TIM1_Init+0xa0>)
 8001c18:	f002 fd72 	bl	8004700 <HAL_TIM_ConfigClockSource>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001c22:	f7ff fe4b 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	4806      	ldr	r0, [pc, #24]	; (8001c50 <MX_TIM1_Init+0xa0>)
 8001c38:	f002 ff94 	bl	8004b64 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c42:	f7ff fe3b 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	3720      	adds	r7, #32
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200002fc 	.word	0x200002fc
 8001c54:	40010000 	.word	0x40010000

08001c58 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5e:	f107 0310 	add.w	r3, r7, #16
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <MX_TIM2_Init+0x94>)
 8001c78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <MX_TIM2_Init+0x94>)
 8001c80:	226b      	movs	r2, #107	; 0x6b
 8001c82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <MX_TIM2_Init+0x94>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <MX_TIM2_Init+0x94>)
 8001c8c:	4a18      	ldr	r2, [pc, #96]	; (8001cf0 <MX_TIM2_Init+0x98>)
 8001c8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c90:	4b16      	ldr	r3, [pc, #88]	; (8001cec <MX_TIM2_Init+0x94>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <MX_TIM2_Init+0x94>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c9c:	4813      	ldr	r0, [pc, #76]	; (8001cec <MX_TIM2_Init+0x94>)
 8001c9e:	f002 fb3f 	bl	8004320 <HAL_TIM_Base_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ca8:	f7ff fe08 	bl	80018bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cb2:	f107 0310 	add.w	r3, r7, #16
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <MX_TIM2_Init+0x94>)
 8001cba:	f002 fd21 	bl	8004700 <HAL_TIM_ConfigClockSource>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001cc4:	f7ff fdfa 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_TIM2_Init+0x94>)
 8001cd6:	f002 ff45 	bl	8004b64 <HAL_TIMEx_MasterConfigSynchronization>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ce0:	f7ff fdec 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000348 	.word	0x20000348
 8001cf0:	000f423f 	.word	0x000f423f

08001cf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a1a      	ldr	r2, [pc, #104]	; (8001d6c <HAL_TIM_Base_MspInit+0x78>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d114      	bne.n	8001d30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <HAL_TIM_Base_MspInit+0x7c>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <HAL_TIM_Base_MspInit+0x7c>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_TIM_Base_MspInit+0x7c>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2101      	movs	r1, #1
 8001d22:	2019      	movs	r0, #25
 8001d24:	f000 fae1 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d28:	2019      	movs	r0, #25
 8001d2a:	f000 fafa 	bl	8002322 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d2e:	e018      	b.n	8001d62 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d38:	d113      	bne.n	8001d62 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_TIM_Base_MspInit+0x7c>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a0c      	ldr	r2, [pc, #48]	; (8001d70 <HAL_TIM_Base_MspInit+0x7c>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_TIM_Base_MspInit+0x7c>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2102      	movs	r1, #2
 8001d56:	201c      	movs	r0, #28
 8001d58:	f000 fac7 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d5c:	201c      	movs	r0, #28
 8001d5e:	f000 fae0 	bl	8002322 <HAL_NVIC_EnableIRQ>
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	40023800 	.word	0x40023800

08001d74 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d78:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001d7a:	4a15      	ldr	r2, [pc, #84]	; (8001dd0 <MX_USART2_UART_Init+0x5c>)
 8001d7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001d80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001db6:	4805      	ldr	r0, [pc, #20]	; (8001dcc <MX_USART2_UART_Init+0x58>)
 8001db8:	f002 ff80 	bl	8004cbc <HAL_UART_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001dc2:	f7ff fd7b 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	2000049c 	.word	0x2000049c
 8001dd0:	40004400 	.word	0x40004400

08001dd4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dd8:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <MX_USART3_UART_Init+0x58>)
 8001dda:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <MX_USART3_UART_Init+0x5c>)
 8001ddc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <MX_USART3_UART_Init+0x58>)
 8001de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <MX_USART3_UART_Init+0x58>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <MX_USART3_UART_Init+0x58>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <MX_USART3_UART_Init+0x58>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <MX_USART3_UART_Init+0x58>)
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <MX_USART3_UART_Init+0x58>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <MX_USART3_UART_Init+0x58>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <MX_USART3_UART_Init+0x58>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <MX_USART3_UART_Init+0x58>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_USART3_UART_Init+0x58>)
 8001e18:	f002 ff50 	bl	8004cbc <HAL_UART_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e22:	f7ff fd4b 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000394 	.word	0x20000394
 8001e30:	40004800 	.word	0x40004800

08001e34 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <MX_USART6_UART_Init+0x58>)
 8001e3a:	4a15      	ldr	r2, [pc, #84]	; (8001e90 <MX_USART6_UART_Init+0x5c>)
 8001e3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <MX_USART6_UART_Init+0x58>)
 8001e40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <MX_USART6_UART_Init+0x58>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <MX_USART6_UART_Init+0x58>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <MX_USART6_UART_Init+0x58>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <MX_USART6_UART_Init+0x58>)
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <MX_USART6_UART_Init+0x58>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <MX_USART6_UART_Init+0x58>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <MX_USART6_UART_Init+0x58>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <MX_USART6_UART_Init+0x58>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <MX_USART6_UART_Init+0x58>)
 8001e78:	f002 ff20 	bl	8004cbc <HAL_UART_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001e82:	f7ff fd1b 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000418 	.word	0x20000418
 8001e90:	40011400 	.word	0x40011400

08001e94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08e      	sub	sp, #56	; 0x38
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a45      	ldr	r2, [pc, #276]	; (8001fc8 <HAL_UART_MspInit+0x134>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d128      	bne.n	8001f08 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eb6:	4b45      	ldr	r3, [pc, #276]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a44      	ldr	r2, [pc, #272]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	4b42      	ldr	r3, [pc, #264]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	623b      	str	r3, [r7, #32]
 8001ecc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ece:	4b3f      	ldr	r3, [pc, #252]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a3e      	ldr	r2, [pc, #248]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001ed4:	f043 0308 	orr.w	r3, r3, #8
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b3c      	ldr	r3, [pc, #240]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ee6:	2360      	movs	r3, #96	; 0x60
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ef6:	2307      	movs	r3, #7
 8001ef8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efe:	4619      	mov	r1, r3
 8001f00:	4833      	ldr	r0, [pc, #204]	; (8001fd0 <HAL_UART_MspInit+0x13c>)
 8001f02:	f000 fa29 	bl	8002358 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001f06:	e05b      	b.n	8001fc0 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a31      	ldr	r2, [pc, #196]	; (8001fd4 <HAL_UART_MspInit+0x140>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d129      	bne.n	8001f66 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f12:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a2d      	ldr	r2, [pc, #180]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a27      	ldr	r2, [pc, #156]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f50:	2303      	movs	r3, #3
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f54:	2307      	movs	r3, #7
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	481c      	ldr	r0, [pc, #112]	; (8001fd0 <HAL_UART_MspInit+0x13c>)
 8001f60:	f000 f9fa 	bl	8002358 <HAL_GPIO_Init>
}
 8001f64:	e02c      	b.n	8001fc0 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART6)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <HAL_UART_MspInit+0x144>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d127      	bne.n	8001fc0 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f70:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	4a15      	ldr	r2, [pc, #84]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001f76:	f043 0320 	orr.w	r3, r3, #32
 8001f7a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	6313      	str	r3, [r2, #48]	; 0x30
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <HAL_UART_MspInit+0x138>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fa0:	23c0      	movs	r3, #192	; 0xc0
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fac:	2303      	movs	r3, #3
 8001fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4808      	ldr	r0, [pc, #32]	; (8001fdc <HAL_UART_MspInit+0x148>)
 8001fbc:	f000 f9cc 	bl	8002358 <HAL_GPIO_Init>
}
 8001fc0:	bf00      	nop
 8001fc2:	3738      	adds	r7, #56	; 0x38
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40004400 	.word	0x40004400
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40020c00 	.word	0x40020c00
 8001fd4:	40004800 	.word	0x40004800
 8001fd8:	40011400 	.word	0x40011400
 8001fdc:	40020800 	.word	0x40020800

08001fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002018 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fe4:	480d      	ldr	r0, [pc, #52]	; (800201c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fe6:	490e      	ldr	r1, [pc, #56]	; (8002020 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fe8:	4a0e      	ldr	r2, [pc, #56]	; (8002024 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fec:	e002      	b.n	8001ff4 <LoopCopyDataInit>

08001fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ff2:	3304      	adds	r3, #4

08001ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff8:	d3f9      	bcc.n	8001fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ffa:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ffc:	4c0b      	ldr	r4, [pc, #44]	; (800202c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002000:	e001      	b.n	8002006 <LoopFillZerobss>

08002002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002004:	3204      	adds	r2, #4

08002006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002008:	d3fb      	bcc.n	8002002 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800200a:	f7ff fdbf 	bl	8001b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800200e:	f003 fb07 	bl	8005620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002012:	f7fe fc55 	bl	80008c0 <main>
  bx  lr    
 8002016:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002018:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800201c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002020:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002024:	080087ac 	.word	0x080087ac
  ldr r2, =_sbss
 8002028:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800202c:	20000534 	.word	0x20000534

08002030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002030:	e7fe      	b.n	8002030 <ADC_IRQHandler>

08002032 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002036:	2003      	movs	r0, #3
 8002038:	f000 f94c 	bl	80022d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800203c:	2000      	movs	r0, #0
 800203e:	f000 f805 	bl	800204c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002042:	f7ff fc41 	bl	80018c8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_InitTick+0x54>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_InitTick+0x58>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002062:	fbb3 f3f1 	udiv	r3, r3, r1
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f967 	bl	800233e <HAL_SYSTICK_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e00e      	b.n	8002098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b0f      	cmp	r3, #15
 800207e:	d80a      	bhi.n	8002096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002080:	2200      	movs	r2, #0
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f000 f92f 	bl	80022ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800208c:	4a06      	ldr	r2, [pc, #24]	; (80020a8 <HAL_InitTick+0x5c>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000034 	.word	0x20000034
 80020a4:	2000003c 	.word	0x2000003c
 80020a8:	20000038 	.word	0x20000038

080020ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_IncTick+0x20>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_IncTick+0x24>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <HAL_IncTick+0x24>)
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	2000003c 	.word	0x2000003c
 80020d0:	20000520 	.word	0x20000520

080020d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_GetTick+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000520 	.word	0x20000520

080020ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff ffee 	bl	80020d4 <HAL_GetTick>
 80020f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d005      	beq.n	8002112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_Delay+0x44>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002112:	bf00      	nop
 8002114:	f7ff ffde 	bl	80020d4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	429a      	cmp	r2, r3
 8002122:	d8f7      	bhi.n	8002114 <HAL_Delay+0x28>
  {
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000003c 	.word	0x2000003c

08002134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <__NVIC_SetPriorityGrouping+0x40>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 800215e:	4313      	orrs	r3, r2
 8002160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002162:	4a04      	ldr	r2, [pc, #16]	; (8002174 <__NVIC_SetPriorityGrouping+0x40>)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	60d3      	str	r3, [r2, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00
 8002178:	05fa0000 	.word	0x05fa0000

0800217c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <__NVIC_GetPriorityGrouping+0x18>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f003 0307 	and.w	r3, r3, #7
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db0b      	blt.n	80021c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	4907      	ldr	r1, [pc, #28]	; (80021d0 <__NVIC_EnableIRQ+0x38>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	2001      	movs	r0, #1
 80021ba:	fa00 f202 	lsl.w	r2, r0, r2
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000e100 	.word	0xe000e100

080021d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	db0a      	blt.n	80021fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	490c      	ldr	r1, [pc, #48]	; (8002220 <__NVIC_SetPriority+0x4c>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021fc:	e00a      	b.n	8002214 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4908      	ldr	r1, [pc, #32]	; (8002224 <__NVIC_SetPriority+0x50>)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	3b04      	subs	r3, #4
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	440b      	add	r3, r1
 8002212:	761a      	strb	r2, [r3, #24]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	; 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f1c3 0307 	rsb	r3, r3, #7
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf28      	it	cs
 8002246:	2304      	movcs	r3, #4
 8002248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3304      	adds	r3, #4
 800224e:	2b06      	cmp	r3, #6
 8002250:	d902      	bls.n	8002258 <NVIC_EncodePriority+0x30>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3b03      	subs	r3, #3
 8002256:	e000      	b.n	800225a <NVIC_EncodePriority+0x32>
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	f04f 32ff 	mov.w	r2, #4294967295
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	401a      	ands	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43d9      	mvns	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	4313      	orrs	r3, r2
         );
}
 8002282:	4618      	mov	r0, r3
 8002284:	3724      	adds	r7, #36	; 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a0:	d301      	bcc.n	80022a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00f      	b.n	80022c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <SysTick_Config+0x40>)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ae:	210f      	movs	r1, #15
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f7ff ff8e 	bl	80021d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <SysTick_Config+0x40>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022be:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <SysTick_Config+0x40>)
 80022c0:	2207      	movs	r2, #7
 80022c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	e000e010 	.word	0xe000e010

080022d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff29 	bl	8002134 <__NVIC_SetPriorityGrouping>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022fc:	f7ff ff3e 	bl	800217c <__NVIC_GetPriorityGrouping>
 8002300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	6978      	ldr	r0, [r7, #20]
 8002308:	f7ff ff8e 	bl	8002228 <NVIC_EncodePriority>
 800230c:	4602      	mov	r2, r0
 800230e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff5d 	bl	80021d4 <__NVIC_SetPriority>
}
 800231a:	bf00      	nop
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	4603      	mov	r3, r0
 800232a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff31 	bl	8002198 <__NVIC_EnableIRQ>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff ffa2 	bl	8002290 <SysTick_Config>
 800234c:	4603      	mov	r3, r0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	e175      	b.n	8002664 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002378:	2201      	movs	r2, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	429a      	cmp	r2, r3
 8002392:	f040 8164 	bne.w	800265e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d00b      	beq.n	80023b6 <HAL_GPIO_Init+0x5e>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d007      	beq.n	80023b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023aa:	2b11      	cmp	r3, #17
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b12      	cmp	r3, #18
 80023b4:	d130      	bne.n	8002418 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ec:	2201      	movs	r2, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 0201 	and.w	r2, r3, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2203      	movs	r2, #3
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x100>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b12      	cmp	r3, #18
 8002456:	d123      	bne.n	80024a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	08da      	lsrs	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3208      	adds	r2, #8
 8002460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	220f      	movs	r2, #15
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	08da      	lsrs	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3208      	adds	r2, #8
 800249a:	69b9      	ldr	r1, [r7, #24]
 800249c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2203      	movs	r2, #3
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0203 	and.w	r2, r3, #3
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80be 	beq.w	800265e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e2:	4b66      	ldr	r3, [pc, #408]	; (800267c <HAL_GPIO_Init+0x324>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	4a65      	ldr	r2, [pc, #404]	; (800267c <HAL_GPIO_Init+0x324>)
 80024e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ec:	6453      	str	r3, [r2, #68]	; 0x44
 80024ee:	4b63      	ldr	r3, [pc, #396]	; (800267c <HAL_GPIO_Init+0x324>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024fa:	4a61      	ldr	r2, [pc, #388]	; (8002680 <HAL_GPIO_Init+0x328>)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	089b      	lsrs	r3, r3, #2
 8002500:	3302      	adds	r3, #2
 8002502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	220f      	movs	r2, #15
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a58      	ldr	r2, [pc, #352]	; (8002684 <HAL_GPIO_Init+0x32c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d037      	beq.n	8002596 <HAL_GPIO_Init+0x23e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a57      	ldr	r2, [pc, #348]	; (8002688 <HAL_GPIO_Init+0x330>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d031      	beq.n	8002592 <HAL_GPIO_Init+0x23a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a56      	ldr	r2, [pc, #344]	; (800268c <HAL_GPIO_Init+0x334>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d02b      	beq.n	800258e <HAL_GPIO_Init+0x236>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a55      	ldr	r2, [pc, #340]	; (8002690 <HAL_GPIO_Init+0x338>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d025      	beq.n	800258a <HAL_GPIO_Init+0x232>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a54      	ldr	r2, [pc, #336]	; (8002694 <HAL_GPIO_Init+0x33c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d01f      	beq.n	8002586 <HAL_GPIO_Init+0x22e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a53      	ldr	r2, [pc, #332]	; (8002698 <HAL_GPIO_Init+0x340>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d019      	beq.n	8002582 <HAL_GPIO_Init+0x22a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a52      	ldr	r2, [pc, #328]	; (800269c <HAL_GPIO_Init+0x344>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d013      	beq.n	800257e <HAL_GPIO_Init+0x226>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a51      	ldr	r2, [pc, #324]	; (80026a0 <HAL_GPIO_Init+0x348>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d00d      	beq.n	800257a <HAL_GPIO_Init+0x222>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a50      	ldr	r2, [pc, #320]	; (80026a4 <HAL_GPIO_Init+0x34c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d007      	beq.n	8002576 <HAL_GPIO_Init+0x21e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a4f      	ldr	r2, [pc, #316]	; (80026a8 <HAL_GPIO_Init+0x350>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_GPIO_Init+0x21a>
 800256e:	2309      	movs	r3, #9
 8002570:	e012      	b.n	8002598 <HAL_GPIO_Init+0x240>
 8002572:	230a      	movs	r3, #10
 8002574:	e010      	b.n	8002598 <HAL_GPIO_Init+0x240>
 8002576:	2308      	movs	r3, #8
 8002578:	e00e      	b.n	8002598 <HAL_GPIO_Init+0x240>
 800257a:	2307      	movs	r3, #7
 800257c:	e00c      	b.n	8002598 <HAL_GPIO_Init+0x240>
 800257e:	2306      	movs	r3, #6
 8002580:	e00a      	b.n	8002598 <HAL_GPIO_Init+0x240>
 8002582:	2305      	movs	r3, #5
 8002584:	e008      	b.n	8002598 <HAL_GPIO_Init+0x240>
 8002586:	2304      	movs	r3, #4
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x240>
 800258a:	2303      	movs	r3, #3
 800258c:	e004      	b.n	8002598 <HAL_GPIO_Init+0x240>
 800258e:	2302      	movs	r3, #2
 8002590:	e002      	b.n	8002598 <HAL_GPIO_Init+0x240>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_GPIO_Init+0x240>
 8002596:	2300      	movs	r3, #0
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	f002 0203 	and.w	r2, r2, #3
 800259e:	0092      	lsls	r2, r2, #2
 80025a0:	4093      	lsls	r3, r2
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025a8:	4935      	ldr	r1, [pc, #212]	; (8002680 <HAL_GPIO_Init+0x328>)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	3302      	adds	r3, #2
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b6:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <HAL_GPIO_Init+0x354>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025da:	4a34      	ldr	r2, [pc, #208]	; (80026ac <HAL_GPIO_Init+0x354>)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025e0:	4b32      	ldr	r3, [pc, #200]	; (80026ac <HAL_GPIO_Init+0x354>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002604:	4a29      	ldr	r2, [pc, #164]	; (80026ac <HAL_GPIO_Init+0x354>)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260a:	4b28      	ldr	r3, [pc, #160]	; (80026ac <HAL_GPIO_Init+0x354>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800262e:	4a1f      	ldr	r2, [pc, #124]	; (80026ac <HAL_GPIO_Init+0x354>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_GPIO_Init+0x354>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002658:	4a14      	ldr	r2, [pc, #80]	; (80026ac <HAL_GPIO_Init+0x354>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3301      	adds	r3, #1
 8002662:	61fb      	str	r3, [r7, #28]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	2b0f      	cmp	r3, #15
 8002668:	f67f ae86 	bls.w	8002378 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800
 8002680:	40013800 	.word	0x40013800
 8002684:	40020000 	.word	0x40020000
 8002688:	40020400 	.word	0x40020400
 800268c:	40020800 	.word	0x40020800
 8002690:	40020c00 	.word	0x40020c00
 8002694:	40021000 	.word	0x40021000
 8002698:	40021400 	.word	0x40021400
 800269c:	40021800 	.word	0x40021800
 80026a0:	40021c00 	.word	0x40021c00
 80026a4:	40022000 	.word	0x40022000
 80026a8:	40022400 	.word	0x40022400
 80026ac:	40013c00 	.word	0x40013c00

080026b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	887b      	ldrh	r3, [r7, #2]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
 80026cc:	e001      	b.n	80026d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
 80026ec:	4613      	mov	r3, r2
 80026ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f0:	787b      	ldrb	r3, [r7, #1]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026fc:	e003      	b.n	8002706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026fe:	887b      	ldrh	r3, [r7, #2]
 8002700:	041a      	lsls	r2, r3, #16
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	619a      	str	r2, [r3, #24]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d006      	beq.n	8002738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800272a:	4a05      	ldr	r2, [pc, #20]	; (8002740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fd06 	bl	8001144 <HAL_GPIO_EXTI_Callback>
  }
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40013c00 	.word	0x40013c00

08002744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e07f      	b.n	8002856 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7fe f864 	bl	8000838 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2224      	movs	r2, #36	; 0x24
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002794:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	e006      	b.n	80027cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d104      	bne.n	80027de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_I2C_Init+0x11c>)
 80027ea:	430b      	orrs	r3, r1
 80027ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	ea42 0103 	orr.w	r1, r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	021a      	lsls	r2, r3, #8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69d9      	ldr	r1, [r3, #28]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1a      	ldr	r2, [r3, #32]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	02008000 	.word	0x02008000

08002864 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	461a      	mov	r2, r3
 8002870:	460b      	mov	r3, r1
 8002872:	817b      	strh	r3, [r7, #10]
 8002874:	4613      	mov	r3, r2
 8002876:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b20      	cmp	r3, #32
 8002882:	f040 80da 	bne.w	8002a3a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_I2C_Master_Transmit+0x30>
 8002890:	2302      	movs	r3, #2
 8002892:	e0d3      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x1d8>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800289c:	f7ff fc1a 	bl	80020d4 <HAL_GetTick>
 80028a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	2319      	movs	r3, #25
 80028a8:	2201      	movs	r2, #1
 80028aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f9e6 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e0be      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2221      	movs	r2, #33	; 0x21
 80028c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2210      	movs	r2, #16
 80028ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	893a      	ldrh	r2, [r7, #8]
 80028de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2bff      	cmp	r3, #255	; 0xff
 80028ee:	d90e      	bls.n	800290e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	22ff      	movs	r2, #255	; 0xff
 80028f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	8979      	ldrh	r1, [r7, #10]
 80028fe:	4b51      	ldr	r3, [pc, #324]	; (8002a44 <HAL_I2C_Master_Transmit+0x1e0>)
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 fb48 	bl	8002f9c <I2C_TransferConfig>
 800290c:	e06c      	b.n	80029e8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291c:	b2da      	uxtb	r2, r3
 800291e:	8979      	ldrh	r1, [r7, #10]
 8002920:	4b48      	ldr	r3, [pc, #288]	; (8002a44 <HAL_I2C_Master_Transmit+0x1e0>)
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 fb37 	bl	8002f9c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800292e:	e05b      	b.n	80029e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	6a39      	ldr	r1, [r7, #32]
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f9e3 	bl	8002d00 <I2C_WaitOnTXISFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e07b      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d034      	beq.n	80029e8 <HAL_I2C_Master_Transmit+0x184>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	2b00      	cmp	r3, #0
 8002984:	d130      	bne.n	80029e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	2200      	movs	r2, #0
 800298e:	2180      	movs	r1, #128	; 0x80
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f975 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e04d      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2bff      	cmp	r3, #255	; 0xff
 80029a8:	d90e      	bls.n	80029c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	22ff      	movs	r2, #255	; 0xff
 80029ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	8979      	ldrh	r1, [r7, #10]
 80029b8:	2300      	movs	r3, #0
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 faeb 	bl	8002f9c <I2C_TransferConfig>
 80029c6:	e00f      	b.n	80029e8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	8979      	ldrh	r1, [r7, #10]
 80029da:	2300      	movs	r3, #0
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 fada 	bl	8002f9c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d19e      	bne.n	8002930 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	6a39      	ldr	r1, [r7, #32]
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 f9c2 	bl	8002d80 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e01a      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_I2C_Master_Transmit+0x1e4>)
 8002a1a:	400b      	ands	r3, r1
 8002a1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e000      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
  }
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	80002000 	.word	0x80002000
 8002a48:	fe00e800 	.word	0xfe00e800

08002a4c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	461a      	mov	r2, r3
 8002a58:	460b      	mov	r3, r1
 8002a5a:	817b      	strh	r3, [r7, #10]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	f040 80db 	bne.w	8002c24 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_I2C_Master_Receive+0x30>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e0d4      	b.n	8002c26 <HAL_I2C_Master_Receive+0x1da>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a84:	f7ff fb26 	bl	80020d4 <HAL_GetTick>
 8002a88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2319      	movs	r3, #25
 8002a90:	2201      	movs	r2, #1
 8002a92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f8f2 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0bf      	b.n	8002c26 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2222      	movs	r2, #34	; 0x22
 8002aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2210      	movs	r2, #16
 8002ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	893a      	ldrh	r2, [r7, #8]
 8002ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2bff      	cmp	r3, #255	; 0xff
 8002ad6:	d90e      	bls.n	8002af6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	22ff      	movs	r2, #255	; 0xff
 8002adc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	8979      	ldrh	r1, [r7, #10]
 8002ae6:	4b52      	ldr	r3, [pc, #328]	; (8002c30 <HAL_I2C_Master_Receive+0x1e4>)
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 fa54 	bl	8002f9c <I2C_TransferConfig>
 8002af4:	e06d      	b.n	8002bd2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	8979      	ldrh	r1, [r7, #10]
 8002b08:	4b49      	ldr	r3, [pc, #292]	; (8002c30 <HAL_I2C_Master_Receive+0x1e4>)
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fa43 	bl	8002f9c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002b16:	e05c      	b.n	8002bd2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	6a39      	ldr	r1, [r7, #32]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f96b 	bl	8002df8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e07c      	b.n	8002c26 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d034      	beq.n	8002bd2 <HAL_I2C_Master_Receive+0x186>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d130      	bne.n	8002bd2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	2200      	movs	r2, #0
 8002b78:	2180      	movs	r1, #128	; 0x80
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f880 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e04d      	b.n	8002c26 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2bff      	cmp	r3, #255	; 0xff
 8002b92:	d90e      	bls.n	8002bb2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	22ff      	movs	r2, #255	; 0xff
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	8979      	ldrh	r1, [r7, #10]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f9f6 	bl	8002f9c <I2C_TransferConfig>
 8002bb0:	e00f      	b.n	8002bd2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	8979      	ldrh	r1, [r7, #10]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f9e5 	bl	8002f9c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d19d      	bne.n	8002b18 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	6a39      	ldr	r1, [r7, #32]
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f8cd 	bl	8002d80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e01a      	b.n	8002c26 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6859      	ldr	r1, [r3, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <HAL_I2C_Master_Receive+0x1e8>)
 8002c04:	400b      	ands	r3, r1
 8002c06:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e000      	b.n	8002c26 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
  }
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	80002400 	.word	0x80002400
 8002c34:	fe00e800 	.word	0xfe00e800

08002c38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d103      	bne.n	8002c56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2200      	movs	r2, #0
 8002c54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d007      	beq.n	8002c74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	619a      	str	r2, [r3, #24]
  }
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c90:	e022      	b.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d01e      	beq.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9a:	f7ff fa1b 	bl	80020d4 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d302      	bcc.n	8002cb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d113      	bne.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb4:	f043 0220 	orr.w	r2, r3, #32
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e00f      	b.n	8002cf8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d0cd      	beq.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d0c:	e02c      	b.n	8002d68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f8dc 	bl	8002ed0 <I2C_IsAcknowledgeFailed>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e02a      	b.n	8002d78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d01e      	beq.n	8002d68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2a:	f7ff f9d3 	bl	80020d4 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d302      	bcc.n	8002d40 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d113      	bne.n	8002d68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d44:	f043 0220 	orr.w	r2, r3, #32
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e007      	b.n	8002d78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d1cb      	bne.n	8002d0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d8c:	e028      	b.n	8002de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f89c 	bl	8002ed0 <I2C_IsAcknowledgeFailed>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e026      	b.n	8002df0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da2:	f7ff f997 	bl	80020d4 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d302      	bcc.n	8002db8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d113      	bne.n	8002de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbc:	f043 0220 	orr.w	r2, r3, #32
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e007      	b.n	8002df0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	d1cf      	bne.n	8002d8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e04:	e055      	b.n	8002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f860 	bl	8002ed0 <I2C_IsAcknowledgeFailed>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e053      	b.n	8002ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d129      	bne.n	8002e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d105      	bne.n	8002e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e03f      	b.n	8002ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2220      	movs	r2, #32
 8002e48:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002e56:	400b      	ands	r3, r1
 8002e58:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e022      	b.n	8002ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7c:	f7ff f92a 	bl	80020d4 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d302      	bcc.n	8002e92 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10f      	bne.n	8002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f043 0220 	orr.w	r2, r3, #32
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e007      	b.n	8002ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d1a2      	bne.n	8002e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	fe00e800 	.word	0xfe00e800

08002ed0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b10      	cmp	r3, #16
 8002ee8:	d151      	bne.n	8002f8e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eea:	e022      	b.n	8002f32 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef2:	d01e      	beq.n	8002f32 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef4:	f7ff f8ee 	bl	80020d4 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d302      	bcc.n	8002f0a <I2C_IsAcknowledgeFailed+0x3a>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d113      	bne.n	8002f32 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	f043 0220 	orr.w	r2, r3, #32
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e02e      	b.n	8002f90 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d1d5      	bne.n	8002eec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2210      	movs	r2, #16
 8002f46:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7ff fe71 	bl	8002c38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <I2C_IsAcknowledgeFailed+0xc8>)
 8002f62:	400b      	ands	r3, r1
 8002f64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	f043 0204 	orr.w	r2, r3, #4
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	fe00e800 	.word	0xfe00e800

08002f9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	817b      	strh	r3, [r7, #10]
 8002faa:	4613      	mov	r3, r2
 8002fac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	0d5b      	lsrs	r3, r3, #21
 8002fb8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <I2C_TransferConfig+0x58>)
 8002fbe:	430b      	orrs	r3, r1
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	ea02 0103 	and.w	r1, r2, r3
 8002fc6:	897b      	ldrh	r3, [r7, #10]
 8002fc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fcc:	7a7b      	ldrb	r3, [r7, #9]
 8002fce:	041b      	lsls	r3, r3, #16
 8002fd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	03ff63ff 	.word	0x03ff63ff

08002ff8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b20      	cmp	r3, #32
 800300c:	d138      	bne.n	8003080 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003018:	2302      	movs	r3, #2
 800301a:	e032      	b.n	8003082 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	; 0x24
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800304a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6819      	ldr	r1, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	e000      	b.n	8003082 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d139      	bne.n	8003118 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e033      	b.n	800311a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2224      	movs	r2, #36	; 0x24
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	e000      	b.n	800311a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003118:	2302      	movs	r3, #2
  }
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003132:	4b23      	ldr	r3, [pc, #140]	; (80031c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4a22      	ldr	r2, [pc, #136]	; (80031c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313c:	6413      	str	r3, [r2, #64]	; 0x40
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800314a:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003154:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003156:	f7fe ffbd 	bl	80020d4 <HAL_GetTick>
 800315a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800315c:	e009      	b.n	8003172 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800315e:	f7fe ffb9 	bl	80020d4 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800316c:	d901      	bls.n	8003172 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e022      	b.n	80031b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003172:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800317a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317e:	d1ee      	bne.n	800315e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003180:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0f      	ldr	r2, [pc, #60]	; (80031c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800318a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800318c:	f7fe ffa2 	bl	80020d4 <HAL_GetTick>
 8003190:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003192:	e009      	b.n	80031a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003194:	f7fe ff9e 	bl	80020d4 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031a2:	d901      	bls.n	80031a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e007      	b.n	80031b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031b4:	d1ee      	bne.n	8003194 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40007000 	.word	0x40007000

080031c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031d0:	2300      	movs	r3, #0
 80031d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e29b      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8087 	beq.w	80032fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031ec:	4b96      	ldr	r3, [pc, #600]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d00c      	beq.n	8003212 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f8:	4b93      	ldr	r3, [pc, #588]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b08      	cmp	r3, #8
 8003202:	d112      	bne.n	800322a <HAL_RCC_OscConfig+0x62>
 8003204:	4b90      	ldr	r3, [pc, #576]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003210:	d10b      	bne.n	800322a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003212:	4b8d      	ldr	r3, [pc, #564]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d06c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x130>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d168      	bne.n	80032f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e275      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x7a>
 8003234:	4b84      	ldr	r3, [pc, #528]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a83      	ldr	r2, [pc, #524]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800323a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	e02e      	b.n	80032a0 <HAL_RCC_OscConfig+0xd8>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x9c>
 800324a:	4b7f      	ldr	r3, [pc, #508]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a7e      	ldr	r2, [pc, #504]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b7c      	ldr	r3, [pc, #496]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a7b      	ldr	r2, [pc, #492]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800325c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e01d      	b.n	80032a0 <HAL_RCC_OscConfig+0xd8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800326c:	d10c      	bne.n	8003288 <HAL_RCC_OscConfig+0xc0>
 800326e:	4b76      	ldr	r3, [pc, #472]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a75      	ldr	r2, [pc, #468]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	4b73      	ldr	r3, [pc, #460]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a72      	ldr	r2, [pc, #456]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e00b      	b.n	80032a0 <HAL_RCC_OscConfig+0xd8>
 8003288:	4b6f      	ldr	r3, [pc, #444]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a6e      	ldr	r2, [pc, #440]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800328e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b6c      	ldr	r3, [pc, #432]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a6b      	ldr	r2, [pc, #428]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800329a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d013      	beq.n	80032d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fe ff14 	bl	80020d4 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fe ff10 	bl	80020d4 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e229      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	4b61      	ldr	r3, [pc, #388]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0xe8>
 80032ce:	e014      	b.n	80032fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe ff00 	bl	80020d4 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d8:	f7fe fefc 	bl	80020d4 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e215      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	4b57      	ldr	r3, [pc, #348]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x110>
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d069      	beq.n	80033da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003306:	4b50      	ldr	r3, [pc, #320]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003312:	4b4d      	ldr	r3, [pc, #308]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b08      	cmp	r3, #8
 800331c:	d11c      	bne.n	8003358 <HAL_RCC_OscConfig+0x190>
 800331e:	4b4a      	ldr	r3, [pc, #296]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d116      	bne.n	8003358 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_RCC_OscConfig+0x17a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d001      	beq.n	8003342 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e1e9      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	493d      	ldr	r1, [pc, #244]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003356:	e040      	b.n	80033da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d023      	beq.n	80033a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003360:	4b39      	ldr	r3, [pc, #228]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a38      	ldr	r2, [pc, #224]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fe feb2 	bl	80020d4 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003374:	f7fe feae 	bl	80020d4 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e1c7      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003386:	4b30      	ldr	r3, [pc, #192]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003392:	4b2d      	ldr	r3, [pc, #180]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4929      	ldr	r1, [pc, #164]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]
 80033a6:	e018      	b.n	80033da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a8:	4b27      	ldr	r3, [pc, #156]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a26      	ldr	r2, [pc, #152]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe fe8e 	bl	80020d4 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033bc:	f7fe fe8a 	bl	80020d4 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e1a3      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ce:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d038      	beq.n	8003458 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d019      	beq.n	8003422 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ee:	4b16      	ldr	r3, [pc, #88]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f2:	4a15      	ldr	r2, [pc, #84]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fe fe6b 	bl	80020d4 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003402:	f7fe fe67 	bl	80020d4 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e180      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x23a>
 8003420:	e01a      	b.n	8003458 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003426:	4a08      	ldr	r2, [pc, #32]	; (8003448 <HAL_RCC_OscConfig+0x280>)
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fe fe51 	bl	80020d4 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003434:	e00a      	b.n	800344c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003436:	f7fe fe4d 	bl	80020d4 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d903      	bls.n	800344c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e166      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
 8003448:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800344c:	4b92      	ldr	r3, [pc, #584]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 800344e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1ee      	bne.n	8003436 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80a4 	beq.w	80035ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003466:	4b8c      	ldr	r3, [pc, #560]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10d      	bne.n	800348e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003472:	4b89      	ldr	r3, [pc, #548]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	4a88      	ldr	r2, [pc, #544]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347c:	6413      	str	r3, [r2, #64]	; 0x40
 800347e:	4b86      	ldr	r3, [pc, #536]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348a:	2301      	movs	r3, #1
 800348c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800348e:	4b83      	ldr	r3, [pc, #524]	; (800369c <HAL_RCC_OscConfig+0x4d4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d118      	bne.n	80034cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800349a:	4b80      	ldr	r3, [pc, #512]	; (800369c <HAL_RCC_OscConfig+0x4d4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a7f      	ldr	r2, [pc, #508]	; (800369c <HAL_RCC_OscConfig+0x4d4>)
 80034a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a6:	f7fe fe15 	bl	80020d4 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ae:	f7fe fe11 	bl	80020d4 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b64      	cmp	r3, #100	; 0x64
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e12a      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c0:	4b76      	ldr	r3, [pc, #472]	; (800369c <HAL_RCC_OscConfig+0x4d4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d106      	bne.n	80034e2 <HAL_RCC_OscConfig+0x31a>
 80034d4:	4b70      	ldr	r3, [pc, #448]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	4a6f      	ldr	r2, [pc, #444]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6713      	str	r3, [r2, #112]	; 0x70
 80034e0:	e02d      	b.n	800353e <HAL_RCC_OscConfig+0x376>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10c      	bne.n	8003504 <HAL_RCC_OscConfig+0x33c>
 80034ea:	4b6b      	ldr	r3, [pc, #428]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	4a6a      	ldr	r2, [pc, #424]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	6713      	str	r3, [r2, #112]	; 0x70
 80034f6:	4b68      	ldr	r3, [pc, #416]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	4a67      	ldr	r2, [pc, #412]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	f023 0304 	bic.w	r3, r3, #4
 8003500:	6713      	str	r3, [r2, #112]	; 0x70
 8003502:	e01c      	b.n	800353e <HAL_RCC_OscConfig+0x376>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b05      	cmp	r3, #5
 800350a:	d10c      	bne.n	8003526 <HAL_RCC_OscConfig+0x35e>
 800350c:	4b62      	ldr	r3, [pc, #392]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003510:	4a61      	ldr	r2, [pc, #388]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003512:	f043 0304 	orr.w	r3, r3, #4
 8003516:	6713      	str	r3, [r2, #112]	; 0x70
 8003518:	4b5f      	ldr	r3, [pc, #380]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	4a5e      	ldr	r2, [pc, #376]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	6713      	str	r3, [r2, #112]	; 0x70
 8003524:	e00b      	b.n	800353e <HAL_RCC_OscConfig+0x376>
 8003526:	4b5c      	ldr	r3, [pc, #368]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	4a5b      	ldr	r2, [pc, #364]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	6713      	str	r3, [r2, #112]	; 0x70
 8003532:	4b59      	ldr	r3, [pc, #356]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4a58      	ldr	r2, [pc, #352]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003538:	f023 0304 	bic.w	r3, r3, #4
 800353c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d015      	beq.n	8003572 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7fe fdc5 	bl	80020d4 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354c:	e00a      	b.n	8003564 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354e:	f7fe fdc1 	bl	80020d4 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	f241 3288 	movw	r2, #5000	; 0x1388
 800355c:	4293      	cmp	r3, r2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e0d8      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003564:	4b4c      	ldr	r3, [pc, #304]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0ee      	beq.n	800354e <HAL_RCC_OscConfig+0x386>
 8003570:	e014      	b.n	800359c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003572:	f7fe fdaf 	bl	80020d4 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003578:	e00a      	b.n	8003590 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357a:	f7fe fdab 	bl	80020d4 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	f241 3288 	movw	r2, #5000	; 0x1388
 8003588:	4293      	cmp	r3, r2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e0c2      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003590:	4b41      	ldr	r3, [pc, #260]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ee      	bne.n	800357a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800359c:	7dfb      	ldrb	r3, [r7, #23]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d105      	bne.n	80035ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a2:	4b3d      	ldr	r3, [pc, #244]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a3c      	ldr	r2, [pc, #240]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80035a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 80ae 	beq.w	8003714 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035b8:	4b37      	ldr	r3, [pc, #220]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 030c 	and.w	r3, r3, #12
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d06d      	beq.n	80036a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d14b      	bne.n	8003664 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035cc:	4b32      	ldr	r3, [pc, #200]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a31      	ldr	r2, [pc, #196]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80035d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fe fd7c 	bl	80020d4 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e0:	f7fe fd78 	bl	80020d4 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e091      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f2:	4b29      	ldr	r3, [pc, #164]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	019b      	lsls	r3, r3, #6
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	085b      	lsrs	r3, r3, #1
 8003616:	3b01      	subs	r3, #1
 8003618:	041b      	lsls	r3, r3, #16
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	061b      	lsls	r3, r3, #24
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	071b      	lsls	r3, r3, #28
 800362a:	491b      	ldr	r1, [pc, #108]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 800362c:	4313      	orrs	r3, r2
 800362e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003630:	4b19      	ldr	r3, [pc, #100]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a18      	ldr	r2, [pc, #96]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800363a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fe fd4a 	bl	80020d4 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003644:	f7fe fd46 	bl	80020d4 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e05f      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003656:	4b10      	ldr	r3, [pc, #64]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x47c>
 8003662:	e057      	b.n	8003714 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003664:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a0b      	ldr	r2, [pc, #44]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 800366a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800366e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fe fd30 	bl	80020d4 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003678:	f7fe fd2c 	bl	80020d4 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e045      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368a:	4b03      	ldr	r3, [pc, #12]	; (8003698 <HAL_RCC_OscConfig+0x4d0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x4b0>
 8003696:	e03d      	b.n	8003714 <HAL_RCC_OscConfig+0x54c>
 8003698:	40023800 	.word	0x40023800
 800369c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80036a0:	4b1f      	ldr	r3, [pc, #124]	; (8003720 <HAL_RCC_OscConfig+0x558>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d030      	beq.n	8003710 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d129      	bne.n	8003710 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d122      	bne.n	8003710 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036d0:	4013      	ands	r3, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036d8:	4293      	cmp	r3, r2
 80036da:	d119      	bne.n	8003710 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	3b01      	subs	r3, #1
 80036ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d10f      	bne.n	8003710 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d107      	bne.n	8003710 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800

08003724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0d0      	b.n	80038de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800373c:	4b6a      	ldr	r3, [pc, #424]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d910      	bls.n	800376c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374a:	4b67      	ldr	r3, [pc, #412]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 020f 	bic.w	r2, r3, #15
 8003752:	4965      	ldr	r1, [pc, #404]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b63      	ldr	r3, [pc, #396]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0b8      	b.n	80038de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d020      	beq.n	80037ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003784:	4b59      	ldr	r3, [pc, #356]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4a58      	ldr	r2, [pc, #352]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 800378a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800378e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800379c:	4b53      	ldr	r3, [pc, #332]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	4a52      	ldr	r2, [pc, #328]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80037a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a8:	4b50      	ldr	r3, [pc, #320]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	494d      	ldr	r1, [pc, #308]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d040      	beq.n	8003848 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	4b47      	ldr	r3, [pc, #284]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d115      	bne.n	8003806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e07f      	b.n	80038de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e6:	4b41      	ldr	r3, [pc, #260]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e073      	b.n	80038de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f6:	4b3d      	ldr	r3, [pc, #244]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e06b      	b.n	80038de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003806:	4b39      	ldr	r3, [pc, #228]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f023 0203 	bic.w	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	4936      	ldr	r1, [pc, #216]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 8003814:	4313      	orrs	r3, r2
 8003816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003818:	f7fe fc5c 	bl	80020d4 <HAL_GetTick>
 800381c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	e00a      	b.n	8003836 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003820:	f7fe fc58 	bl	80020d4 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	; 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e053      	b.n	80038de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003836:	4b2d      	ldr	r3, [pc, #180]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 020c 	and.w	r2, r3, #12
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	429a      	cmp	r2, r3
 8003846:	d1eb      	bne.n	8003820 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003848:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d210      	bcs.n	8003878 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 020f 	bic.w	r2, r3, #15
 800385e:	4922      	ldr	r1, [pc, #136]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e032      	b.n	80038de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003884:	4b19      	ldr	r3, [pc, #100]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4916      	ldr	r1, [pc, #88]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 8003892:	4313      	orrs	r3, r2
 8003894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d009      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038a2:	4b12      	ldr	r3, [pc, #72]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	490e      	ldr	r1, [pc, #56]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038b6:	f000 f821 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 80038ba:	4602      	mov	r2, r0
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	490a      	ldr	r1, [pc, #40]	; (80038f0 <HAL_RCC_ClockConfig+0x1cc>)
 80038c8:	5ccb      	ldrb	r3, [r1, r3]
 80038ca:	fa22 f303 	lsr.w	r3, r2, r3
 80038ce:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <HAL_RCC_ClockConfig+0x1d0>)
 80038d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038d2:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <HAL_RCC_ClockConfig+0x1d4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe fbb8 	bl	800204c <HAL_InitTick>

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40023c00 	.word	0x40023c00
 80038ec:	40023800 	.word	0x40023800
 80038f0:	080083a0 	.word	0x080083a0
 80038f4:	20000034 	.word	0x20000034
 80038f8:	20000038 	.word	0x20000038

080038fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038fc:	b5b0      	push	{r4, r5, r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003902:	2100      	movs	r1, #0
 8003904:	6079      	str	r1, [r7, #4]
 8003906:	2100      	movs	r1, #0
 8003908:	60f9      	str	r1, [r7, #12]
 800390a:	2100      	movs	r1, #0
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800390e:	2100      	movs	r1, #0
 8003910:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003912:	4952      	ldr	r1, [pc, #328]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003914:	6889      	ldr	r1, [r1, #8]
 8003916:	f001 010c 	and.w	r1, r1, #12
 800391a:	2908      	cmp	r1, #8
 800391c:	d00d      	beq.n	800393a <HAL_RCC_GetSysClockFreq+0x3e>
 800391e:	2908      	cmp	r1, #8
 8003920:	f200 8094 	bhi.w	8003a4c <HAL_RCC_GetSysClockFreq+0x150>
 8003924:	2900      	cmp	r1, #0
 8003926:	d002      	beq.n	800392e <HAL_RCC_GetSysClockFreq+0x32>
 8003928:	2904      	cmp	r1, #4
 800392a:	d003      	beq.n	8003934 <HAL_RCC_GetSysClockFreq+0x38>
 800392c:	e08e      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800392e:	4b4c      	ldr	r3, [pc, #304]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x164>)
 8003930:	60bb      	str	r3, [r7, #8]
      break;
 8003932:	e08e      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003934:	4b4b      	ldr	r3, [pc, #300]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x168>)
 8003936:	60bb      	str	r3, [r7, #8]
      break;
 8003938:	e08b      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800393a:	4948      	ldr	r1, [pc, #288]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x160>)
 800393c:	6849      	ldr	r1, [r1, #4]
 800393e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003942:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003944:	4945      	ldr	r1, [pc, #276]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003946:	6849      	ldr	r1, [r1, #4]
 8003948:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800394c:	2900      	cmp	r1, #0
 800394e:	d024      	beq.n	800399a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003950:	4942      	ldr	r1, [pc, #264]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003952:	6849      	ldr	r1, [r1, #4]
 8003954:	0989      	lsrs	r1, r1, #6
 8003956:	4608      	mov	r0, r1
 8003958:	f04f 0100 	mov.w	r1, #0
 800395c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003960:	f04f 0500 	mov.w	r5, #0
 8003964:	ea00 0204 	and.w	r2, r0, r4
 8003968:	ea01 0305 	and.w	r3, r1, r5
 800396c:	493d      	ldr	r1, [pc, #244]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x168>)
 800396e:	fb01 f003 	mul.w	r0, r1, r3
 8003972:	2100      	movs	r1, #0
 8003974:	fb01 f102 	mul.w	r1, r1, r2
 8003978:	1844      	adds	r4, r0, r1
 800397a:	493a      	ldr	r1, [pc, #232]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x168>)
 800397c:	fba2 0101 	umull	r0, r1, r2, r1
 8003980:	1863      	adds	r3, r4, r1
 8003982:	4619      	mov	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	461a      	mov	r2, r3
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	f7fc fcb0 	bl	80002f0 <__aeabi_uldivmod>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4613      	mov	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	e04a      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399a:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x160>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	099b      	lsrs	r3, r3, #6
 80039a0:	461a      	mov	r2, r3
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039aa:	f04f 0100 	mov.w	r1, #0
 80039ae:	ea02 0400 	and.w	r4, r2, r0
 80039b2:	ea03 0501 	and.w	r5, r3, r1
 80039b6:	4620      	mov	r0, r4
 80039b8:	4629      	mov	r1, r5
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	014b      	lsls	r3, r1, #5
 80039c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039c8:	0142      	lsls	r2, r0, #5
 80039ca:	4610      	mov	r0, r2
 80039cc:	4619      	mov	r1, r3
 80039ce:	1b00      	subs	r0, r0, r4
 80039d0:	eb61 0105 	sbc.w	r1, r1, r5
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	018b      	lsls	r3, r1, #6
 80039de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039e2:	0182      	lsls	r2, r0, #6
 80039e4:	1a12      	subs	r2, r2, r0
 80039e6:	eb63 0301 	sbc.w	r3, r3, r1
 80039ea:	f04f 0000 	mov.w	r0, #0
 80039ee:	f04f 0100 	mov.w	r1, #0
 80039f2:	00d9      	lsls	r1, r3, #3
 80039f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039f8:	00d0      	lsls	r0, r2, #3
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	1912      	adds	r2, r2, r4
 8003a00:	eb45 0303 	adc.w	r3, r5, r3
 8003a04:	f04f 0000 	mov.w	r0, #0
 8003a08:	f04f 0100 	mov.w	r1, #0
 8003a0c:	0299      	lsls	r1, r3, #10
 8003a0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a12:	0290      	lsls	r0, r2, #10
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	f7fc fc64 	bl	80002f0 <__aeabi_uldivmod>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	0c1b      	lsrs	r3, r3, #16
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a48:	60bb      	str	r3, [r7, #8]
      break;
 8003a4a:	e002      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a4c:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a4e:	60bb      	str	r3, [r7, #8]
      break;
 8003a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a52:	68bb      	ldr	r3, [r7, #8]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	00f42400 	.word	0x00f42400
 8003a64:	017d7840 	.word	0x017d7840

08003a68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000034 	.word	0x20000034

08003a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a84:	f7ff fff0 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	0a9b      	lsrs	r3, r3, #10
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	4903      	ldr	r1, [pc, #12]	; (8003aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a96:	5ccb      	ldrb	r3, [r1, r3]
 8003a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	080083b0 	.word	0x080083b0

08003aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003aac:	f7ff ffdc 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	0b5b      	lsrs	r3, r3, #13
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4903      	ldr	r1, [pc, #12]	; (8003acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003abe:	5ccb      	ldrb	r3, [r1, r3]
 8003ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	080083b0 	.word	0x080083b0

08003ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d012      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003af8:	4b69      	ldr	r3, [pc, #420]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	4a68      	ldr	r2, [pc, #416]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b02:	6093      	str	r3, [r2, #8]
 8003b04:	4b66      	ldr	r3, [pc, #408]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0c:	4964      	ldr	r1, [pc, #400]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d017      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b2a:	4b5d      	ldr	r3, [pc, #372]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b38:	4959      	ldr	r1, [pc, #356]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b48:	d101      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b56:	2301      	movs	r3, #1
 8003b58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d017      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b66:	4b4e      	ldr	r3, [pc, #312]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	494a      	ldr	r1, [pc, #296]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b84:	d101      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b86:	2301      	movs	r3, #1
 8003b88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b92:	2301      	movs	r3, #1
 8003b94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 808b 	beq.w	8003cca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bb4:	4b3a      	ldr	r3, [pc, #232]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	4a39      	ldr	r2, [pc, #228]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc0:	4b37      	ldr	r3, [pc, #220]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bcc:	4b35      	ldr	r3, [pc, #212]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a34      	ldr	r2, [pc, #208]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd8:	f7fe fa7c 	bl	80020d4 <HAL_GetTick>
 8003bdc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be0:	f7fe fa78 	bl	80020d4 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b64      	cmp	r3, #100	; 0x64
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e38f      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bf2:	4b2c      	ldr	r3, [pc, #176]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0f0      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bfe:	4b28      	ldr	r3, [pc, #160]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d035      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d02e      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c1c:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c26:	4b1e      	ldr	r3, [pc, #120]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4a1d      	ldr	r2, [pc, #116]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c32:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	4a1a      	ldr	r2, [pc, #104]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c3e:	4a18      	ldr	r2, [pc, #96]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c44:	4b16      	ldr	r3, [pc, #88]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d114      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fe fa40 	bl	80020d4 <HAL_GetTick>
 8003c54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c56:	e00a      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c58:	f7fe fa3c 	bl	80020d4 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e351      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0ee      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c86:	d111      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c96:	400b      	ands	r3, r1
 8003c98:	4901      	ldr	r1, [pc, #4]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
 8003c9e:	e00b      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40007000 	.word	0x40007000
 8003ca8:	0ffffcff 	.word	0x0ffffcff
 8003cac:	4bb3      	ldr	r3, [pc, #716]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	4ab2      	ldr	r2, [pc, #712]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cb2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cb6:	6093      	str	r3, [r2, #8]
 8003cb8:	4bb0      	ldr	r3, [pc, #704]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc4:	49ad      	ldr	r1, [pc, #692]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d010      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cd6:	4ba9      	ldr	r3, [pc, #676]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cdc:	4aa7      	ldr	r2, [pc, #668]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ce2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ce6:	4ba5      	ldr	r3, [pc, #660]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ce8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	49a2      	ldr	r1, [pc, #648]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d04:	4b9d      	ldr	r3, [pc, #628]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d12:	499a      	ldr	r1, [pc, #616]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d26:	4b95      	ldr	r3, [pc, #596]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d34:	4991      	ldr	r1, [pc, #580]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d48:	4b8c      	ldr	r3, [pc, #560]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d56:	4989      	ldr	r1, [pc, #548]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d6a:	4b84      	ldr	r3, [pc, #528]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	4980      	ldr	r1, [pc, #512]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d8c:	4b7b      	ldr	r3, [pc, #492]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	f023 0203 	bic.w	r2, r3, #3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	4978      	ldr	r1, [pc, #480]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dae:	4b73      	ldr	r3, [pc, #460]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db4:	f023 020c 	bic.w	r2, r3, #12
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dbc:	496f      	ldr	r1, [pc, #444]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dd0:	4b6a      	ldr	r3, [pc, #424]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dde:	4967      	ldr	r1, [pc, #412]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003df2:	4b62      	ldr	r3, [pc, #392]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e00:	495e      	ldr	r1, [pc, #376]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e14:	4b59      	ldr	r3, [pc, #356]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	4956      	ldr	r1, [pc, #344]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e36:	4b51      	ldr	r3, [pc, #324]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	494d      	ldr	r1, [pc, #308]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e58:	4b48      	ldr	r3, [pc, #288]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e66:	4945      	ldr	r1, [pc, #276]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e7a:	4b40      	ldr	r3, [pc, #256]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e88:	493c      	ldr	r1, [pc, #240]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e9c:	4b37      	ldr	r3, [pc, #220]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eaa:	4934      	ldr	r1, [pc, #208]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d011      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ebe:	4b2f      	ldr	r3, [pc, #188]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ecc:	492b      	ldr	r1, [pc, #172]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ed8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003efe:	4b1f      	ldr	r3, [pc, #124]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f04:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0c:	491b      	ldr	r1, [pc, #108]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00b      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f20:	4b16      	ldr	r3, [pc, #88]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f30:	4912      	ldr	r1, [pc, #72]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00b      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f44:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f54:	4909      	ldr	r1, [pc, #36]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00f      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f68:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	e002      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003f7a:	bf00      	nop
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	4986      	ldr	r1, [pc, #536]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00b      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f94:	4b81      	ldr	r3, [pc, #516]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f9a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa4:	497d      	ldr	r1, [pc, #500]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d006      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 80d6 	beq.w	800416c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fc0:	4b76      	ldr	r3, [pc, #472]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a75      	ldr	r2, [pc, #468]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fcc:	f7fe f882 	bl	80020d4 <HAL_GetTick>
 8003fd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fd4:	f7fe f87e 	bl	80020d4 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b64      	cmp	r3, #100	; 0x64
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e195      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fe6:	4b6d      	ldr	r3, [pc, #436]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d021      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004002:	2b00      	cmp	r3, #0
 8004004:	d11d      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004006:	4b65      	ldr	r3, [pc, #404]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004014:	4b61      	ldr	r3, [pc, #388]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800401a:	0e1b      	lsrs	r3, r3, #24
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	019a      	lsls	r2, r3, #6
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	041b      	lsls	r3, r3, #16
 800402c:	431a      	orrs	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	061b      	lsls	r3, r3, #24
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	071b      	lsls	r3, r3, #28
 800403a:	4958      	ldr	r1, [pc, #352]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d004      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004060:	2b00      	cmp	r3, #0
 8004062:	d02e      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800406c:	d129      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800406e:	4b4b      	ldr	r3, [pc, #300]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004074:	0c1b      	lsrs	r3, r3, #16
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800407c:	4b47      	ldr	r3, [pc, #284]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004082:	0f1b      	lsrs	r3, r3, #28
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	019a      	lsls	r2, r3, #6
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	061b      	lsls	r3, r3, #24
 800409c:	431a      	orrs	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	071b      	lsls	r3, r3, #28
 80040a2:	493e      	ldr	r1, [pc, #248]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040aa:	4b3c      	ldr	r3, [pc, #240]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b0:	f023 021f 	bic.w	r2, r3, #31
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	3b01      	subs	r3, #1
 80040ba:	4938      	ldr	r1, [pc, #224]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d01d      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040ce:	4b33      	ldr	r3, [pc, #204]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d4:	0e1b      	lsrs	r3, r3, #24
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040dc:	4b2f      	ldr	r3, [pc, #188]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e2:	0f1b      	lsrs	r3, r3, #28
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	019a      	lsls	r2, r3, #6
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	041b      	lsls	r3, r3, #16
 80040f6:	431a      	orrs	r2, r3
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	061b      	lsls	r3, r3, #24
 80040fc:	431a      	orrs	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	071b      	lsls	r3, r3, #28
 8004102:	4926      	ldr	r1, [pc, #152]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d011      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	019a      	lsls	r2, r3, #6
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	041b      	lsls	r3, r3, #16
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	071b      	lsls	r3, r3, #28
 8004132:	491a      	ldr	r1, [pc, #104]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800413a:	4b18      	ldr	r3, [pc, #96]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a17      	ldr	r2, [pc, #92]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004140:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004146:	f7fd ffc5 	bl	80020d4 <HAL_GetTick>
 800414a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800414e:	f7fd ffc1 	bl	80020d4 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b64      	cmp	r3, #100	; 0x64
 800415a:	d901      	bls.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e0d8      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004160:	4b0e      	ldr	r3, [pc, #56]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b01      	cmp	r3, #1
 8004170:	f040 80ce 	bne.w	8004310 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004174:	4b09      	ldr	r3, [pc, #36]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a08      	ldr	r2, [pc, #32]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800417a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800417e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004180:	f7fd ffa8 	bl	80020d4 <HAL_GetTick>
 8004184:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004186:	e00b      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004188:	f7fd ffa4 	bl	80020d4 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	; 0x64
 8004194:	d904      	bls.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e0bb      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800419a:	bf00      	nop
 800419c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041a0:	4b5e      	ldr	r3, [pc, #376]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ac:	d0ec      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d02e      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d12a      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041d6:	4b51      	ldr	r3, [pc, #324]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	0c1b      	lsrs	r3, r3, #16
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041e4:	4b4d      	ldr	r3, [pc, #308]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	0f1b      	lsrs	r3, r3, #28
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	019a      	lsls	r2, r3, #6
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	041b      	lsls	r3, r3, #16
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	061b      	lsls	r3, r3, #24
 8004204:	431a      	orrs	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	071b      	lsls	r3, r3, #28
 800420a:	4944      	ldr	r1, [pc, #272]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004212:	4b42      	ldr	r3, [pc, #264]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004218:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	3b01      	subs	r3, #1
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	493d      	ldr	r1, [pc, #244]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d022      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800423c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004240:	d11d      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004242:	4b36      	ldr	r3, [pc, #216]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004248:	0e1b      	lsrs	r3, r3, #24
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004250:	4b32      	ldr	r3, [pc, #200]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	0f1b      	lsrs	r3, r3, #28
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	019a      	lsls	r2, r3, #6
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	041b      	lsls	r3, r3, #16
 800426a:	431a      	orrs	r2, r3
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	061b      	lsls	r3, r3, #24
 8004270:	431a      	orrs	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	071b      	lsls	r3, r3, #28
 8004276:	4929      	ldr	r1, [pc, #164]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d028      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800428a:	4b24      	ldr	r3, [pc, #144]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004290:	0e1b      	lsrs	r3, r3, #24
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004298:	4b20      	ldr	r3, [pc, #128]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429e:	0c1b      	lsrs	r3, r3, #16
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	019a      	lsls	r2, r3, #6
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	041b      	lsls	r3, r3, #16
 80042b0:	431a      	orrs	r2, r3
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	061b      	lsls	r3, r3, #24
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	071b      	lsls	r3, r3, #28
 80042be:	4917      	ldr	r1, [pc, #92]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042c6:	4b15      	ldr	r3, [pc, #84]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	4911      	ldr	r1, [pc, #68]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a0e      	ldr	r2, [pc, #56]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e8:	f7fd fef4 	bl	80020d4 <HAL_GetTick>
 80042ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042f0:	f7fd fef0 	bl	80020d4 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	; 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e007      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800430a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800430e:	d1ef      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800

08004320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e049      	b.n	80043c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fd fcd4 	bl	8001cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3304      	adds	r3, #4
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f000 fac6 	bl	80048f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d001      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e054      	b.n	8004492 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a26      	ldr	r2, [pc, #152]	; (80044a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d022      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x80>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004412:	d01d      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x80>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a22      	ldr	r2, [pc, #136]	; (80044a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d018      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x80>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a21      	ldr	r2, [pc, #132]	; (80044a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d013      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x80>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a1f      	ldr	r2, [pc, #124]	; (80044ac <HAL_TIM_Base_Start_IT+0xdc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00e      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x80>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1e      	ldr	r2, [pc, #120]	; (80044b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d009      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x80>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a1c      	ldr	r2, [pc, #112]	; (80044b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x80>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a1b      	ldr	r2, [pc, #108]	; (80044b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d115      	bne.n	800447c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	4b19      	ldr	r3, [pc, #100]	; (80044bc <HAL_TIM_Base_Start_IT+0xec>)
 8004458:	4013      	ands	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b06      	cmp	r3, #6
 8004460:	d015      	beq.n	800448e <HAL_TIM_Base_Start_IT+0xbe>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d011      	beq.n	800448e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0201 	orr.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447a:	e008      	b.n	800448e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	e000      	b.n	8004490 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40010000 	.word	0x40010000
 80044a4:	40000400 	.word	0x40000400
 80044a8:	40000800 	.word	0x40000800
 80044ac:	40000c00 	.word	0x40000c00
 80044b0:	40010400 	.word	0x40010400
 80044b4:	40014000 	.word	0x40014000
 80044b8:	40001800 	.word	0x40001800
 80044bc:	00010007 	.word	0x00010007

080044c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d122      	bne.n	800451c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d11b      	bne.n	800451c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0202 	mvn.w	r2, #2
 80044ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f9d6 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 8004508:	e005      	b.n	8004516 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f9c8 	bl	80048a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f9d9 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b04      	cmp	r3, #4
 8004528:	d122      	bne.n	8004570 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b04      	cmp	r3, #4
 8004536:	d11b      	bne.n	8004570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0204 	mvn.w	r2, #4
 8004540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f9ac 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 800455c:	e005      	b.n	800456a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f99e 	bl	80048a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f9af 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b08      	cmp	r3, #8
 800457c:	d122      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b08      	cmp	r3, #8
 800458a:	d11b      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0208 	mvn.w	r2, #8
 8004594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2204      	movs	r2, #4
 800459a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f982 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 80045b0:	e005      	b.n	80045be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f974 	bl	80048a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f985 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b10      	cmp	r3, #16
 80045d0:	d122      	bne.n	8004618 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d11b      	bne.n	8004618 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0210 	mvn.w	r2, #16
 80045e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2208      	movs	r2, #8
 80045ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f958 	bl	80048b4 <HAL_TIM_IC_CaptureCallback>
 8004604:	e005      	b.n	8004612 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f94a 	bl	80048a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f95b 	bl	80048c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b01      	cmp	r3, #1
 8004624:	d10e      	bne.n	8004644 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b01      	cmp	r3, #1
 8004632:	d107      	bne.n	8004644 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0201 	mvn.w	r2, #1
 800463c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f924 	bl	800488c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464e:	2b80      	cmp	r3, #128	; 0x80
 8004650:	d10e      	bne.n	8004670 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465c:	2b80      	cmp	r3, #128	; 0x80
 800465e:	d107      	bne.n	8004670 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fb12 	bl	8004c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800467e:	d10e      	bne.n	800469e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468a:	2b80      	cmp	r3, #128	; 0x80
 800468c:	d107      	bne.n	800469e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fb05 	bl	8004ca8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d10e      	bne.n	80046ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b6:	2b40      	cmp	r3, #64	; 0x40
 80046b8:	d107      	bne.n	80046ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f909 	bl	80048dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d10e      	bne.n	80046f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b20      	cmp	r3, #32
 80046e4:	d107      	bne.n	80046f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f06f 0220 	mvn.w	r2, #32
 80046ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fac5 	bl	8004c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_TIM_ConfigClockSource+0x18>
 8004714:	2302      	movs	r3, #2
 8004716:	e0b3      	b.n	8004880 <HAL_TIM_ConfigClockSource+0x180>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4b55      	ldr	r3, [pc, #340]	; (8004888 <HAL_TIM_ConfigClockSource+0x188>)
 8004734:	4013      	ands	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800473e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004750:	d03e      	beq.n	80047d0 <HAL_TIM_ConfigClockSource+0xd0>
 8004752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004756:	f200 8087 	bhi.w	8004868 <HAL_TIM_ConfigClockSource+0x168>
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475e:	f000 8085 	beq.w	800486c <HAL_TIM_ConfigClockSource+0x16c>
 8004762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004766:	d87f      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x168>
 8004768:	2b70      	cmp	r3, #112	; 0x70
 800476a:	d01a      	beq.n	80047a2 <HAL_TIM_ConfigClockSource+0xa2>
 800476c:	2b70      	cmp	r3, #112	; 0x70
 800476e:	d87b      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x168>
 8004770:	2b60      	cmp	r3, #96	; 0x60
 8004772:	d050      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x116>
 8004774:	2b60      	cmp	r3, #96	; 0x60
 8004776:	d877      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x168>
 8004778:	2b50      	cmp	r3, #80	; 0x50
 800477a:	d03c      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0xf6>
 800477c:	2b50      	cmp	r3, #80	; 0x50
 800477e:	d873      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x168>
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d058      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x136>
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	d86f      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x168>
 8004788:	2b30      	cmp	r3, #48	; 0x30
 800478a:	d064      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x156>
 800478c:	2b30      	cmp	r3, #48	; 0x30
 800478e:	d86b      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x168>
 8004790:	2b20      	cmp	r3, #32
 8004792:	d060      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x156>
 8004794:	2b20      	cmp	r3, #32
 8004796:	d867      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x168>
 8004798:	2b00      	cmp	r3, #0
 800479a:	d05c      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x156>
 800479c:	2b10      	cmp	r3, #16
 800479e:	d05a      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047a0:	e062      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6899      	ldr	r1, [r3, #8]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f000 f9b7 	bl	8004b24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	609a      	str	r2, [r3, #8]
      break;
 80047ce:	e04e      	b.n	800486e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6899      	ldr	r1, [r3, #8]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f000 f9a0 	bl	8004b24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047f2:	609a      	str	r2, [r3, #8]
      break;
 80047f4:	e03b      	b.n	800486e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6859      	ldr	r1, [r3, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	461a      	mov	r2, r3
 8004804:	f000 f914 	bl	8004a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2150      	movs	r1, #80	; 0x50
 800480e:	4618      	mov	r0, r3
 8004810:	f000 f96d 	bl	8004aee <TIM_ITRx_SetConfig>
      break;
 8004814:	e02b      	b.n	800486e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6859      	ldr	r1, [r3, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	461a      	mov	r2, r3
 8004824:	f000 f933 	bl	8004a8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2160      	movs	r1, #96	; 0x60
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f95d 	bl	8004aee <TIM_ITRx_SetConfig>
      break;
 8004834:	e01b      	b.n	800486e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	6859      	ldr	r1, [r3, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	461a      	mov	r2, r3
 8004844:	f000 f8f4 	bl	8004a30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2140      	movs	r1, #64	; 0x40
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f94d 	bl	8004aee <TIM_ITRx_SetConfig>
      break;
 8004854:	e00b      	b.n	800486e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f000 f944 	bl	8004aee <TIM_ITRx_SetConfig>
        break;
 8004866:	e002      	b.n	800486e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004868:	bf00      	nop
 800486a:	e000      	b.n	800486e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800486c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	fffeff88 	.word	0xfffeff88

0800488c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a40      	ldr	r2, [pc, #256]	; (8004a04 <TIM_Base_SetConfig+0x114>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d013      	beq.n	8004930 <TIM_Base_SetConfig+0x40>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490e:	d00f      	beq.n	8004930 <TIM_Base_SetConfig+0x40>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a3d      	ldr	r2, [pc, #244]	; (8004a08 <TIM_Base_SetConfig+0x118>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00b      	beq.n	8004930 <TIM_Base_SetConfig+0x40>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a3c      	ldr	r2, [pc, #240]	; (8004a0c <TIM_Base_SetConfig+0x11c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d007      	beq.n	8004930 <TIM_Base_SetConfig+0x40>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a3b      	ldr	r2, [pc, #236]	; (8004a10 <TIM_Base_SetConfig+0x120>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_Base_SetConfig+0x40>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a3a      	ldr	r2, [pc, #232]	; (8004a14 <TIM_Base_SetConfig+0x124>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d108      	bne.n	8004942 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a2f      	ldr	r2, [pc, #188]	; (8004a04 <TIM_Base_SetConfig+0x114>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d02b      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004950:	d027      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a2c      	ldr	r2, [pc, #176]	; (8004a08 <TIM_Base_SetConfig+0x118>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d023      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2b      	ldr	r2, [pc, #172]	; (8004a0c <TIM_Base_SetConfig+0x11c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01f      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a2a      	ldr	r2, [pc, #168]	; (8004a10 <TIM_Base_SetConfig+0x120>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d01b      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a29      	ldr	r2, [pc, #164]	; (8004a14 <TIM_Base_SetConfig+0x124>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d017      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a28      	ldr	r2, [pc, #160]	; (8004a18 <TIM_Base_SetConfig+0x128>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a27      	ldr	r2, [pc, #156]	; (8004a1c <TIM_Base_SetConfig+0x12c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00f      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a26      	ldr	r2, [pc, #152]	; (8004a20 <TIM_Base_SetConfig+0x130>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00b      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a25      	ldr	r2, [pc, #148]	; (8004a24 <TIM_Base_SetConfig+0x134>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d007      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a24      	ldr	r2, [pc, #144]	; (8004a28 <TIM_Base_SetConfig+0x138>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d003      	beq.n	80049a2 <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a23      	ldr	r2, [pc, #140]	; (8004a2c <TIM_Base_SetConfig+0x13c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d108      	bne.n	80049b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a0a      	ldr	r2, [pc, #40]	; (8004a04 <TIM_Base_SetConfig+0x114>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d003      	beq.n	80049e8 <TIM_Base_SetConfig+0xf8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a0c      	ldr	r2, [pc, #48]	; (8004a14 <TIM_Base_SetConfig+0x124>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d103      	bne.n	80049f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	615a      	str	r2, [r3, #20]
}
 80049f6:	bf00      	nop
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40010000 	.word	0x40010000
 8004a08:	40000400 	.word	0x40000400
 8004a0c:	40000800 	.word	0x40000800
 8004a10:	40000c00 	.word	0x40000c00
 8004a14:	40010400 	.word	0x40010400
 8004a18:	40014000 	.word	0x40014000
 8004a1c:	40014400 	.word	0x40014400
 8004a20:	40014800 	.word	0x40014800
 8004a24:	40001800 	.word	0x40001800
 8004a28:	40001c00 	.word	0x40001c00
 8004a2c:	40002000 	.word	0x40002000

08004a30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	f023 0201 	bic.w	r2, r3, #1
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f023 030a 	bic.w	r3, r3, #10
 8004a6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	621a      	str	r2, [r3, #32]
}
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b087      	sub	sp, #28
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f023 0210 	bic.w	r2, r3, #16
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ab8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	031b      	lsls	r3, r3, #12
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	621a      	str	r2, [r3, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b085      	sub	sp, #20
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f043 0307 	orr.w	r3, r3, #7
 8004b10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	609a      	str	r2, [r3, #8]
}
 8004b18:	bf00      	nop
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	021a      	lsls	r2, r3, #8
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	609a      	str	r2, [r3, #8]
}
 8004b58:	bf00      	nop
 8004b5a:	371c      	adds	r7, #28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e06d      	b.n	8004c58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a30      	ldr	r2, [pc, #192]	; (8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d004      	beq.n	8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a2f      	ldr	r2, [pc, #188]	; (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d108      	bne.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a20      	ldr	r2, [pc, #128]	; (8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d022      	beq.n	8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bee:	d01d      	beq.n	8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1d      	ldr	r2, [pc, #116]	; (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d018      	beq.n	8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a1c      	ldr	r2, [pc, #112]	; (8004c70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a1a      	ldr	r2, [pc, #104]	; (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00e      	beq.n	8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a15      	ldr	r2, [pc, #84]	; (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d009      	beq.n	8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d10c      	bne.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40010400 	.word	0x40010400
 8004c6c:	40000400 	.word	0x40000400
 8004c70:	40000800 	.word	0x40000800
 8004c74:	40000c00 	.word	0x40000c00
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40001800 	.word	0x40001800

08004c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e040      	b.n	8004d50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fd f8d8 	bl	8001e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2224      	movs	r2, #36	; 0x24
 8004ce8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0201 	bic.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f8c0 	bl	8004e80 <UART_SetConfig>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e022      	b.n	8004d50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fb16 	bl	8005344 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fb9d 	bl	8005488 <UART_CheckIdleState>
 8004d4e:	4603      	mov	r3, r0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08a      	sub	sp, #40	; 0x28
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	4613      	mov	r3, r2
 8004d66:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	f040 8081 	bne.w	8004e74 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <HAL_UART_Transmit+0x26>
 8004d78:	88fb      	ldrh	r3, [r7, #6]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e079      	b.n	8004e76 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_UART_Transmit+0x38>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e072      	b.n	8004e76 <HAL_UART_Transmit+0x11e>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2221      	movs	r2, #33	; 0x21
 8004da4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004da6:	f7fd f995 	bl	80020d4 <HAL_GetTick>
 8004daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	88fa      	ldrh	r2, [r7, #6]
 8004db0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	88fa      	ldrh	r2, [r7, #6]
 8004db8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc4:	d108      	bne.n	8004dd8 <HAL_UART_Transmit+0x80>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d104      	bne.n	8004dd8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	e003      	b.n	8004de0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004de8:	e02c      	b.n	8004e44 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2200      	movs	r2, #0
 8004df2:	2180      	movs	r1, #128	; 0x80
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fb90 	bl	800551a <UART_WaitOnFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e038      	b.n	8004e76 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10b      	bne.n	8004e22 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	3302      	adds	r3, #2
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	e007      	b.n	8004e32 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	781a      	ldrb	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1cc      	bne.n	8004dea <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2200      	movs	r2, #0
 8004e58:	2140      	movs	r1, #64	; 0x40
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fb5d 	bl	800551a <UART_WaitOnFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e005      	b.n	8004e76 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e000      	b.n	8004e76 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004e74:	2302      	movs	r3, #2
  }
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4ba7      	ldr	r3, [pc, #668]	; (8005148 <UART_SetConfig+0x2c8>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	6979      	ldr	r1, [r7, #20]
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a95      	ldr	r2, [pc, #596]	; (800514c <UART_SetConfig+0x2cc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d120      	bne.n	8004f3e <UART_SetConfig+0xbe>
 8004efc:	4b94      	ldr	r3, [pc, #592]	; (8005150 <UART_SetConfig+0x2d0>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d816      	bhi.n	8004f38 <UART_SetConfig+0xb8>
 8004f0a:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <UART_SetConfig+0x90>)
 8004f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f10:	08004f21 	.word	0x08004f21
 8004f14:	08004f2d 	.word	0x08004f2d
 8004f18:	08004f27 	.word	0x08004f27
 8004f1c:	08004f33 	.word	0x08004f33
 8004f20:	2301      	movs	r3, #1
 8004f22:	77fb      	strb	r3, [r7, #31]
 8004f24:	e14f      	b.n	80051c6 <UART_SetConfig+0x346>
 8004f26:	2302      	movs	r3, #2
 8004f28:	77fb      	strb	r3, [r7, #31]
 8004f2a:	e14c      	b.n	80051c6 <UART_SetConfig+0x346>
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	77fb      	strb	r3, [r7, #31]
 8004f30:	e149      	b.n	80051c6 <UART_SetConfig+0x346>
 8004f32:	2308      	movs	r3, #8
 8004f34:	77fb      	strb	r3, [r7, #31]
 8004f36:	e146      	b.n	80051c6 <UART_SetConfig+0x346>
 8004f38:	2310      	movs	r3, #16
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e143      	b.n	80051c6 <UART_SetConfig+0x346>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a84      	ldr	r2, [pc, #528]	; (8005154 <UART_SetConfig+0x2d4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d132      	bne.n	8004fae <UART_SetConfig+0x12e>
 8004f48:	4b81      	ldr	r3, [pc, #516]	; (8005150 <UART_SetConfig+0x2d0>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4e:	f003 030c 	and.w	r3, r3, #12
 8004f52:	2b0c      	cmp	r3, #12
 8004f54:	d828      	bhi.n	8004fa8 <UART_SetConfig+0x128>
 8004f56:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <UART_SetConfig+0xdc>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004f91 	.word	0x08004f91
 8004f60:	08004fa9 	.word	0x08004fa9
 8004f64:	08004fa9 	.word	0x08004fa9
 8004f68:	08004fa9 	.word	0x08004fa9
 8004f6c:	08004f9d 	.word	0x08004f9d
 8004f70:	08004fa9 	.word	0x08004fa9
 8004f74:	08004fa9 	.word	0x08004fa9
 8004f78:	08004fa9 	.word	0x08004fa9
 8004f7c:	08004f97 	.word	0x08004f97
 8004f80:	08004fa9 	.word	0x08004fa9
 8004f84:	08004fa9 	.word	0x08004fa9
 8004f88:	08004fa9 	.word	0x08004fa9
 8004f8c:	08004fa3 	.word	0x08004fa3
 8004f90:	2300      	movs	r3, #0
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e117      	b.n	80051c6 <UART_SetConfig+0x346>
 8004f96:	2302      	movs	r3, #2
 8004f98:	77fb      	strb	r3, [r7, #31]
 8004f9a:	e114      	b.n	80051c6 <UART_SetConfig+0x346>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e111      	b.n	80051c6 <UART_SetConfig+0x346>
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	77fb      	strb	r3, [r7, #31]
 8004fa6:	e10e      	b.n	80051c6 <UART_SetConfig+0x346>
 8004fa8:	2310      	movs	r3, #16
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	e10b      	b.n	80051c6 <UART_SetConfig+0x346>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a69      	ldr	r2, [pc, #420]	; (8005158 <UART_SetConfig+0x2d8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d120      	bne.n	8004ffa <UART_SetConfig+0x17a>
 8004fb8:	4b65      	ldr	r3, [pc, #404]	; (8005150 <UART_SetConfig+0x2d0>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fc2:	2b30      	cmp	r3, #48	; 0x30
 8004fc4:	d013      	beq.n	8004fee <UART_SetConfig+0x16e>
 8004fc6:	2b30      	cmp	r3, #48	; 0x30
 8004fc8:	d814      	bhi.n	8004ff4 <UART_SetConfig+0x174>
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d009      	beq.n	8004fe2 <UART_SetConfig+0x162>
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	d810      	bhi.n	8004ff4 <UART_SetConfig+0x174>
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <UART_SetConfig+0x15c>
 8004fd6:	2b10      	cmp	r3, #16
 8004fd8:	d006      	beq.n	8004fe8 <UART_SetConfig+0x168>
 8004fda:	e00b      	b.n	8004ff4 <UART_SetConfig+0x174>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e0f1      	b.n	80051c6 <UART_SetConfig+0x346>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	77fb      	strb	r3, [r7, #31]
 8004fe6:	e0ee      	b.n	80051c6 <UART_SetConfig+0x346>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	77fb      	strb	r3, [r7, #31]
 8004fec:	e0eb      	b.n	80051c6 <UART_SetConfig+0x346>
 8004fee:	2308      	movs	r3, #8
 8004ff0:	77fb      	strb	r3, [r7, #31]
 8004ff2:	e0e8      	b.n	80051c6 <UART_SetConfig+0x346>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	77fb      	strb	r3, [r7, #31]
 8004ff8:	e0e5      	b.n	80051c6 <UART_SetConfig+0x346>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a57      	ldr	r2, [pc, #348]	; (800515c <UART_SetConfig+0x2dc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d120      	bne.n	8005046 <UART_SetConfig+0x1c6>
 8005004:	4b52      	ldr	r3, [pc, #328]	; (8005150 <UART_SetConfig+0x2d0>)
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800500e:	2bc0      	cmp	r3, #192	; 0xc0
 8005010:	d013      	beq.n	800503a <UART_SetConfig+0x1ba>
 8005012:	2bc0      	cmp	r3, #192	; 0xc0
 8005014:	d814      	bhi.n	8005040 <UART_SetConfig+0x1c0>
 8005016:	2b80      	cmp	r3, #128	; 0x80
 8005018:	d009      	beq.n	800502e <UART_SetConfig+0x1ae>
 800501a:	2b80      	cmp	r3, #128	; 0x80
 800501c:	d810      	bhi.n	8005040 <UART_SetConfig+0x1c0>
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <UART_SetConfig+0x1a8>
 8005022:	2b40      	cmp	r3, #64	; 0x40
 8005024:	d006      	beq.n	8005034 <UART_SetConfig+0x1b4>
 8005026:	e00b      	b.n	8005040 <UART_SetConfig+0x1c0>
 8005028:	2300      	movs	r3, #0
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e0cb      	b.n	80051c6 <UART_SetConfig+0x346>
 800502e:	2302      	movs	r3, #2
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e0c8      	b.n	80051c6 <UART_SetConfig+0x346>
 8005034:	2304      	movs	r3, #4
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e0c5      	b.n	80051c6 <UART_SetConfig+0x346>
 800503a:	2308      	movs	r3, #8
 800503c:	77fb      	strb	r3, [r7, #31]
 800503e:	e0c2      	b.n	80051c6 <UART_SetConfig+0x346>
 8005040:	2310      	movs	r3, #16
 8005042:	77fb      	strb	r3, [r7, #31]
 8005044:	e0bf      	b.n	80051c6 <UART_SetConfig+0x346>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a45      	ldr	r2, [pc, #276]	; (8005160 <UART_SetConfig+0x2e0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d125      	bne.n	800509c <UART_SetConfig+0x21c>
 8005050:	4b3f      	ldr	r3, [pc, #252]	; (8005150 <UART_SetConfig+0x2d0>)
 8005052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800505a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800505e:	d017      	beq.n	8005090 <UART_SetConfig+0x210>
 8005060:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005064:	d817      	bhi.n	8005096 <UART_SetConfig+0x216>
 8005066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800506a:	d00b      	beq.n	8005084 <UART_SetConfig+0x204>
 800506c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005070:	d811      	bhi.n	8005096 <UART_SetConfig+0x216>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <UART_SetConfig+0x1fe>
 8005076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800507a:	d006      	beq.n	800508a <UART_SetConfig+0x20a>
 800507c:	e00b      	b.n	8005096 <UART_SetConfig+0x216>
 800507e:	2300      	movs	r3, #0
 8005080:	77fb      	strb	r3, [r7, #31]
 8005082:	e0a0      	b.n	80051c6 <UART_SetConfig+0x346>
 8005084:	2302      	movs	r3, #2
 8005086:	77fb      	strb	r3, [r7, #31]
 8005088:	e09d      	b.n	80051c6 <UART_SetConfig+0x346>
 800508a:	2304      	movs	r3, #4
 800508c:	77fb      	strb	r3, [r7, #31]
 800508e:	e09a      	b.n	80051c6 <UART_SetConfig+0x346>
 8005090:	2308      	movs	r3, #8
 8005092:	77fb      	strb	r3, [r7, #31]
 8005094:	e097      	b.n	80051c6 <UART_SetConfig+0x346>
 8005096:	2310      	movs	r3, #16
 8005098:	77fb      	strb	r3, [r7, #31]
 800509a:	e094      	b.n	80051c6 <UART_SetConfig+0x346>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a30      	ldr	r2, [pc, #192]	; (8005164 <UART_SetConfig+0x2e4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d125      	bne.n	80050f2 <UART_SetConfig+0x272>
 80050a6:	4b2a      	ldr	r3, [pc, #168]	; (8005150 <UART_SetConfig+0x2d0>)
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050b4:	d017      	beq.n	80050e6 <UART_SetConfig+0x266>
 80050b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050ba:	d817      	bhi.n	80050ec <UART_SetConfig+0x26c>
 80050bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050c0:	d00b      	beq.n	80050da <UART_SetConfig+0x25a>
 80050c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050c6:	d811      	bhi.n	80050ec <UART_SetConfig+0x26c>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <UART_SetConfig+0x254>
 80050cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d0:	d006      	beq.n	80050e0 <UART_SetConfig+0x260>
 80050d2:	e00b      	b.n	80050ec <UART_SetConfig+0x26c>
 80050d4:	2301      	movs	r3, #1
 80050d6:	77fb      	strb	r3, [r7, #31]
 80050d8:	e075      	b.n	80051c6 <UART_SetConfig+0x346>
 80050da:	2302      	movs	r3, #2
 80050dc:	77fb      	strb	r3, [r7, #31]
 80050de:	e072      	b.n	80051c6 <UART_SetConfig+0x346>
 80050e0:	2304      	movs	r3, #4
 80050e2:	77fb      	strb	r3, [r7, #31]
 80050e4:	e06f      	b.n	80051c6 <UART_SetConfig+0x346>
 80050e6:	2308      	movs	r3, #8
 80050e8:	77fb      	strb	r3, [r7, #31]
 80050ea:	e06c      	b.n	80051c6 <UART_SetConfig+0x346>
 80050ec:	2310      	movs	r3, #16
 80050ee:	77fb      	strb	r3, [r7, #31]
 80050f0:	e069      	b.n	80051c6 <UART_SetConfig+0x346>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1c      	ldr	r2, [pc, #112]	; (8005168 <UART_SetConfig+0x2e8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d137      	bne.n	800516c <UART_SetConfig+0x2ec>
 80050fc:	4b14      	ldr	r3, [pc, #80]	; (8005150 <UART_SetConfig+0x2d0>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005102:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005106:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800510a:	d017      	beq.n	800513c <UART_SetConfig+0x2bc>
 800510c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005110:	d817      	bhi.n	8005142 <UART_SetConfig+0x2c2>
 8005112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005116:	d00b      	beq.n	8005130 <UART_SetConfig+0x2b0>
 8005118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800511c:	d811      	bhi.n	8005142 <UART_SetConfig+0x2c2>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <UART_SetConfig+0x2aa>
 8005122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005126:	d006      	beq.n	8005136 <UART_SetConfig+0x2b6>
 8005128:	e00b      	b.n	8005142 <UART_SetConfig+0x2c2>
 800512a:	2300      	movs	r3, #0
 800512c:	77fb      	strb	r3, [r7, #31]
 800512e:	e04a      	b.n	80051c6 <UART_SetConfig+0x346>
 8005130:	2302      	movs	r3, #2
 8005132:	77fb      	strb	r3, [r7, #31]
 8005134:	e047      	b.n	80051c6 <UART_SetConfig+0x346>
 8005136:	2304      	movs	r3, #4
 8005138:	77fb      	strb	r3, [r7, #31]
 800513a:	e044      	b.n	80051c6 <UART_SetConfig+0x346>
 800513c:	2308      	movs	r3, #8
 800513e:	77fb      	strb	r3, [r7, #31]
 8005140:	e041      	b.n	80051c6 <UART_SetConfig+0x346>
 8005142:	2310      	movs	r3, #16
 8005144:	77fb      	strb	r3, [r7, #31]
 8005146:	e03e      	b.n	80051c6 <UART_SetConfig+0x346>
 8005148:	efff69f3 	.word	0xefff69f3
 800514c:	40011000 	.word	0x40011000
 8005150:	40023800 	.word	0x40023800
 8005154:	40004400 	.word	0x40004400
 8005158:	40004800 	.word	0x40004800
 800515c:	40004c00 	.word	0x40004c00
 8005160:	40005000 	.word	0x40005000
 8005164:	40011400 	.word	0x40011400
 8005168:	40007800 	.word	0x40007800
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a71      	ldr	r2, [pc, #452]	; (8005338 <UART_SetConfig+0x4b8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d125      	bne.n	80051c2 <UART_SetConfig+0x342>
 8005176:	4b71      	ldr	r3, [pc, #452]	; (800533c <UART_SetConfig+0x4bc>)
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005180:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005184:	d017      	beq.n	80051b6 <UART_SetConfig+0x336>
 8005186:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800518a:	d817      	bhi.n	80051bc <UART_SetConfig+0x33c>
 800518c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005190:	d00b      	beq.n	80051aa <UART_SetConfig+0x32a>
 8005192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005196:	d811      	bhi.n	80051bc <UART_SetConfig+0x33c>
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <UART_SetConfig+0x324>
 800519c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051a0:	d006      	beq.n	80051b0 <UART_SetConfig+0x330>
 80051a2:	e00b      	b.n	80051bc <UART_SetConfig+0x33c>
 80051a4:	2300      	movs	r3, #0
 80051a6:	77fb      	strb	r3, [r7, #31]
 80051a8:	e00d      	b.n	80051c6 <UART_SetConfig+0x346>
 80051aa:	2302      	movs	r3, #2
 80051ac:	77fb      	strb	r3, [r7, #31]
 80051ae:	e00a      	b.n	80051c6 <UART_SetConfig+0x346>
 80051b0:	2304      	movs	r3, #4
 80051b2:	77fb      	strb	r3, [r7, #31]
 80051b4:	e007      	b.n	80051c6 <UART_SetConfig+0x346>
 80051b6:	2308      	movs	r3, #8
 80051b8:	77fb      	strb	r3, [r7, #31]
 80051ba:	e004      	b.n	80051c6 <UART_SetConfig+0x346>
 80051bc:	2310      	movs	r3, #16
 80051be:	77fb      	strb	r3, [r7, #31]
 80051c0:	e001      	b.n	80051c6 <UART_SetConfig+0x346>
 80051c2:	2310      	movs	r3, #16
 80051c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ce:	d15b      	bne.n	8005288 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80051d0:	7ffb      	ldrb	r3, [r7, #31]
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d827      	bhi.n	8005226 <UART_SetConfig+0x3a6>
 80051d6:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <UART_SetConfig+0x35c>)
 80051d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051dc:	08005201 	.word	0x08005201
 80051e0:	08005209 	.word	0x08005209
 80051e4:	08005211 	.word	0x08005211
 80051e8:	08005227 	.word	0x08005227
 80051ec:	08005217 	.word	0x08005217
 80051f0:	08005227 	.word	0x08005227
 80051f4:	08005227 	.word	0x08005227
 80051f8:	08005227 	.word	0x08005227
 80051fc:	0800521f 	.word	0x0800521f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005200:	f7fe fc3e 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8005204:	61b8      	str	r0, [r7, #24]
        break;
 8005206:	e013      	b.n	8005230 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005208:	f7fe fc4e 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 800520c:	61b8      	str	r0, [r7, #24]
        break;
 800520e:	e00f      	b.n	8005230 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005210:	4b4b      	ldr	r3, [pc, #300]	; (8005340 <UART_SetConfig+0x4c0>)
 8005212:	61bb      	str	r3, [r7, #24]
        break;
 8005214:	e00c      	b.n	8005230 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005216:	f7fe fb71 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 800521a:	61b8      	str	r0, [r7, #24]
        break;
 800521c:	e008      	b.n	8005230 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005222:	61bb      	str	r3, [r7, #24]
        break;
 8005224:	e004      	b.n	8005230 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	77bb      	strb	r3, [r7, #30]
        break;
 800522e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d074      	beq.n	8005320 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	005a      	lsls	r2, r3, #1
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	085b      	lsrs	r3, r3, #1
 8005240:	441a      	add	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	fbb2 f3f3 	udiv	r3, r2, r3
 800524a:	b29b      	uxth	r3, r3
 800524c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	2b0f      	cmp	r3, #15
 8005252:	d916      	bls.n	8005282 <UART_SetConfig+0x402>
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800525a:	d212      	bcs.n	8005282 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	b29b      	uxth	r3, r3
 8005260:	f023 030f 	bic.w	r3, r3, #15
 8005264:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	085b      	lsrs	r3, r3, #1
 800526a:	b29b      	uxth	r3, r3
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	b29a      	uxth	r2, r3
 8005272:	89fb      	ldrh	r3, [r7, #14]
 8005274:	4313      	orrs	r3, r2
 8005276:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	89fa      	ldrh	r2, [r7, #14]
 800527e:	60da      	str	r2, [r3, #12]
 8005280:	e04e      	b.n	8005320 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	77bb      	strb	r3, [r7, #30]
 8005286:	e04b      	b.n	8005320 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005288:	7ffb      	ldrb	r3, [r7, #31]
 800528a:	2b08      	cmp	r3, #8
 800528c:	d827      	bhi.n	80052de <UART_SetConfig+0x45e>
 800528e:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <UART_SetConfig+0x414>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052b9 	.word	0x080052b9
 8005298:	080052c1 	.word	0x080052c1
 800529c:	080052c9 	.word	0x080052c9
 80052a0:	080052df 	.word	0x080052df
 80052a4:	080052cf 	.word	0x080052cf
 80052a8:	080052df 	.word	0x080052df
 80052ac:	080052df 	.word	0x080052df
 80052b0:	080052df 	.word	0x080052df
 80052b4:	080052d7 	.word	0x080052d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b8:	f7fe fbe2 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 80052bc:	61b8      	str	r0, [r7, #24]
        break;
 80052be:	e013      	b.n	80052e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c0:	f7fe fbf2 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 80052c4:	61b8      	str	r0, [r7, #24]
        break;
 80052c6:	e00f      	b.n	80052e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c8:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <UART_SetConfig+0x4c0>)
 80052ca:	61bb      	str	r3, [r7, #24]
        break;
 80052cc:	e00c      	b.n	80052e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ce:	f7fe fb15 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 80052d2:	61b8      	str	r0, [r7, #24]
        break;
 80052d4:	e008      	b.n	80052e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052da:	61bb      	str	r3, [r7, #24]
        break;
 80052dc:	e004      	b.n	80052e8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	77bb      	strb	r3, [r7, #30]
        break;
 80052e6:	bf00      	nop
    }

    if (pclk != 0U)
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d018      	beq.n	8005320 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	085a      	lsrs	r2, r3, #1
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	441a      	add	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005300:	b29b      	uxth	r3, r3
 8005302:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2b0f      	cmp	r3, #15
 8005308:	d908      	bls.n	800531c <UART_SetConfig+0x49c>
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005310:	d204      	bcs.n	800531c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	60da      	str	r2, [r3, #12]
 800531a:	e001      	b.n	8005320 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800532c:	7fbb      	ldrb	r3, [r7, #30]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40007c00 	.word	0x40007c00
 800533c:	40023800 	.word	0x40023800
 8005340:	00f42400 	.word	0x00f42400

08005344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00a      	beq.n	800536e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00a      	beq.n	80053b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	f003 0310 	and.w	r3, r3, #16
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01a      	beq.n	800545a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005442:	d10a      	bne.n	800545a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	605a      	str	r2, [r3, #4]
  }
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af02      	add	r7, sp, #8
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005498:	f7fc fe1c 	bl	80020d4 <HAL_GetTick>
 800549c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d10e      	bne.n	80054ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f82d 	bl	800551a <UART_WaitOnFlagUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e023      	b.n	8005512 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d10e      	bne.n	80054f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f817 	bl	800551a <UART_WaitOnFlagUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e00d      	b.n	8005512 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	603b      	str	r3, [r7, #0]
 8005526:	4613      	mov	r3, r2
 8005528:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800552a:	e05e      	b.n	80055ea <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005532:	d05a      	beq.n	80055ea <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005534:	f7fc fdce 	bl	80020d4 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	429a      	cmp	r2, r3
 8005542:	d302      	bcc.n	800554a <UART_WaitOnFlagUntilTimeout+0x30>
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d11b      	bne.n	8005582 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005558:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0201 	bic.w	r2, r2, #1
 8005568:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2220      	movs	r2, #32
 8005574:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e043      	b.n	800560a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	d02c      	beq.n	80055ea <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800559a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800559e:	d124      	bne.n	80055ea <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055b8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0201 	bic.w	r2, r2, #1
 80055c8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2220      	movs	r2, #32
 80055ce:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2220      	movs	r2, #32
 80055da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e00f      	b.n	800560a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4013      	ands	r3, r2
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	bf0c      	ite	eq
 80055fa:	2301      	moveq	r3, #1
 80055fc:	2300      	movne	r3, #0
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	461a      	mov	r2, r3
 8005602:	79fb      	ldrb	r3, [r7, #7]
 8005604:	429a      	cmp	r2, r3
 8005606:	d091      	beq.n	800552c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <__errno>:
 8005614:	4b01      	ldr	r3, [pc, #4]	; (800561c <__errno+0x8>)
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	20000040 	.word	0x20000040

08005620 <__libc_init_array>:
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	4d0d      	ldr	r5, [pc, #52]	; (8005658 <__libc_init_array+0x38>)
 8005624:	4c0d      	ldr	r4, [pc, #52]	; (800565c <__libc_init_array+0x3c>)
 8005626:	1b64      	subs	r4, r4, r5
 8005628:	10a4      	asrs	r4, r4, #2
 800562a:	2600      	movs	r6, #0
 800562c:	42a6      	cmp	r6, r4
 800562e:	d109      	bne.n	8005644 <__libc_init_array+0x24>
 8005630:	4d0b      	ldr	r5, [pc, #44]	; (8005660 <__libc_init_array+0x40>)
 8005632:	4c0c      	ldr	r4, [pc, #48]	; (8005664 <__libc_init_array+0x44>)
 8005634:	f002 fe26 	bl	8008284 <_init>
 8005638:	1b64      	subs	r4, r4, r5
 800563a:	10a4      	asrs	r4, r4, #2
 800563c:	2600      	movs	r6, #0
 800563e:	42a6      	cmp	r6, r4
 8005640:	d105      	bne.n	800564e <__libc_init_array+0x2e>
 8005642:	bd70      	pop	{r4, r5, r6, pc}
 8005644:	f855 3b04 	ldr.w	r3, [r5], #4
 8005648:	4798      	blx	r3
 800564a:	3601      	adds	r6, #1
 800564c:	e7ee      	b.n	800562c <__libc_init_array+0xc>
 800564e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005652:	4798      	blx	r3
 8005654:	3601      	adds	r6, #1
 8005656:	e7f2      	b.n	800563e <__libc_init_array+0x1e>
 8005658:	080087a4 	.word	0x080087a4
 800565c:	080087a4 	.word	0x080087a4
 8005660:	080087a4 	.word	0x080087a4
 8005664:	080087a8 	.word	0x080087a8

08005668 <memcpy>:
 8005668:	440a      	add	r2, r1
 800566a:	4291      	cmp	r1, r2
 800566c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005670:	d100      	bne.n	8005674 <memcpy+0xc>
 8005672:	4770      	bx	lr
 8005674:	b510      	push	{r4, lr}
 8005676:	f811 4b01 	ldrb.w	r4, [r1], #1
 800567a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800567e:	4291      	cmp	r1, r2
 8005680:	d1f9      	bne.n	8005676 <memcpy+0xe>
 8005682:	bd10      	pop	{r4, pc}

08005684 <memset>:
 8005684:	4402      	add	r2, r0
 8005686:	4603      	mov	r3, r0
 8005688:	4293      	cmp	r3, r2
 800568a:	d100      	bne.n	800568e <memset+0xa>
 800568c:	4770      	bx	lr
 800568e:	f803 1b01 	strb.w	r1, [r3], #1
 8005692:	e7f9      	b.n	8005688 <memset+0x4>

08005694 <__cvt>:
 8005694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005696:	ed2d 8b02 	vpush	{d8}
 800569a:	eeb0 8b40 	vmov.f64	d8, d0
 800569e:	b085      	sub	sp, #20
 80056a0:	4617      	mov	r7, r2
 80056a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80056a4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80056a6:	ee18 2a90 	vmov	r2, s17
 80056aa:	f025 0520 	bic.w	r5, r5, #32
 80056ae:	2a00      	cmp	r2, #0
 80056b0:	bfb6      	itet	lt
 80056b2:	222d      	movlt	r2, #45	; 0x2d
 80056b4:	2200      	movge	r2, #0
 80056b6:	eeb1 8b40 	vneglt.f64	d8, d0
 80056ba:	2d46      	cmp	r5, #70	; 0x46
 80056bc:	460c      	mov	r4, r1
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	d004      	beq.n	80056cc <__cvt+0x38>
 80056c2:	2d45      	cmp	r5, #69	; 0x45
 80056c4:	d100      	bne.n	80056c8 <__cvt+0x34>
 80056c6:	3401      	adds	r4, #1
 80056c8:	2102      	movs	r1, #2
 80056ca:	e000      	b.n	80056ce <__cvt+0x3a>
 80056cc:	2103      	movs	r1, #3
 80056ce:	ab03      	add	r3, sp, #12
 80056d0:	9301      	str	r3, [sp, #4]
 80056d2:	ab02      	add	r3, sp, #8
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	4622      	mov	r2, r4
 80056d8:	4633      	mov	r3, r6
 80056da:	eeb0 0b48 	vmov.f64	d0, d8
 80056de:	f000 fccb 	bl	8006078 <_dtoa_r>
 80056e2:	2d47      	cmp	r5, #71	; 0x47
 80056e4:	d109      	bne.n	80056fa <__cvt+0x66>
 80056e6:	07fb      	lsls	r3, r7, #31
 80056e8:	d407      	bmi.n	80056fa <__cvt+0x66>
 80056ea:	9b03      	ldr	r3, [sp, #12]
 80056ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056ee:	1a1b      	subs	r3, r3, r0
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	b005      	add	sp, #20
 80056f4:	ecbd 8b02 	vpop	{d8}
 80056f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056fa:	2d46      	cmp	r5, #70	; 0x46
 80056fc:	eb00 0204 	add.w	r2, r0, r4
 8005700:	d10c      	bne.n	800571c <__cvt+0x88>
 8005702:	7803      	ldrb	r3, [r0, #0]
 8005704:	2b30      	cmp	r3, #48	; 0x30
 8005706:	d107      	bne.n	8005718 <__cvt+0x84>
 8005708:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800570c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005710:	bf1c      	itt	ne
 8005712:	f1c4 0401 	rsbne	r4, r4, #1
 8005716:	6034      	strne	r4, [r6, #0]
 8005718:	6833      	ldr	r3, [r6, #0]
 800571a:	441a      	add	r2, r3
 800571c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005724:	bf08      	it	eq
 8005726:	9203      	streq	r2, [sp, #12]
 8005728:	2130      	movs	r1, #48	; 0x30
 800572a:	9b03      	ldr	r3, [sp, #12]
 800572c:	4293      	cmp	r3, r2
 800572e:	d2dc      	bcs.n	80056ea <__cvt+0x56>
 8005730:	1c5c      	adds	r4, r3, #1
 8005732:	9403      	str	r4, [sp, #12]
 8005734:	7019      	strb	r1, [r3, #0]
 8005736:	e7f8      	b.n	800572a <__cvt+0x96>

08005738 <__exponent>:
 8005738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800573a:	4603      	mov	r3, r0
 800573c:	2900      	cmp	r1, #0
 800573e:	bfb8      	it	lt
 8005740:	4249      	neglt	r1, r1
 8005742:	f803 2b02 	strb.w	r2, [r3], #2
 8005746:	bfb4      	ite	lt
 8005748:	222d      	movlt	r2, #45	; 0x2d
 800574a:	222b      	movge	r2, #43	; 0x2b
 800574c:	2909      	cmp	r1, #9
 800574e:	7042      	strb	r2, [r0, #1]
 8005750:	dd2a      	ble.n	80057a8 <__exponent+0x70>
 8005752:	f10d 0407 	add.w	r4, sp, #7
 8005756:	46a4      	mov	ip, r4
 8005758:	270a      	movs	r7, #10
 800575a:	46a6      	mov	lr, r4
 800575c:	460a      	mov	r2, r1
 800575e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005762:	fb07 1516 	mls	r5, r7, r6, r1
 8005766:	3530      	adds	r5, #48	; 0x30
 8005768:	2a63      	cmp	r2, #99	; 0x63
 800576a:	f104 34ff 	add.w	r4, r4, #4294967295
 800576e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005772:	4631      	mov	r1, r6
 8005774:	dcf1      	bgt.n	800575a <__exponent+0x22>
 8005776:	3130      	adds	r1, #48	; 0x30
 8005778:	f1ae 0502 	sub.w	r5, lr, #2
 800577c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005780:	1c44      	adds	r4, r0, #1
 8005782:	4629      	mov	r1, r5
 8005784:	4561      	cmp	r1, ip
 8005786:	d30a      	bcc.n	800579e <__exponent+0x66>
 8005788:	f10d 0209 	add.w	r2, sp, #9
 800578c:	eba2 020e 	sub.w	r2, r2, lr
 8005790:	4565      	cmp	r5, ip
 8005792:	bf88      	it	hi
 8005794:	2200      	movhi	r2, #0
 8005796:	4413      	add	r3, r2
 8005798:	1a18      	subs	r0, r3, r0
 800579a:	b003      	add	sp, #12
 800579c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800579e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80057a6:	e7ed      	b.n	8005784 <__exponent+0x4c>
 80057a8:	2330      	movs	r3, #48	; 0x30
 80057aa:	3130      	adds	r1, #48	; 0x30
 80057ac:	7083      	strb	r3, [r0, #2]
 80057ae:	70c1      	strb	r1, [r0, #3]
 80057b0:	1d03      	adds	r3, r0, #4
 80057b2:	e7f1      	b.n	8005798 <__exponent+0x60>
 80057b4:	0000      	movs	r0, r0
	...

080057b8 <_printf_float>:
 80057b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057bc:	b08b      	sub	sp, #44	; 0x2c
 80057be:	460c      	mov	r4, r1
 80057c0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80057c4:	4616      	mov	r6, r2
 80057c6:	461f      	mov	r7, r3
 80057c8:	4605      	mov	r5, r0
 80057ca:	f001 f9d7 	bl	8006b7c <_localeconv_r>
 80057ce:	f8d0 b000 	ldr.w	fp, [r0]
 80057d2:	4658      	mov	r0, fp
 80057d4:	f7fa fd34 	bl	8000240 <strlen>
 80057d8:	2300      	movs	r3, #0
 80057da:	9308      	str	r3, [sp, #32]
 80057dc:	f8d8 3000 	ldr.w	r3, [r8]
 80057e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80057e4:	6822      	ldr	r2, [r4, #0]
 80057e6:	3307      	adds	r3, #7
 80057e8:	f023 0307 	bic.w	r3, r3, #7
 80057ec:	f103 0108 	add.w	r1, r3, #8
 80057f0:	f8c8 1000 	str.w	r1, [r8]
 80057f4:	4682      	mov	sl, r0
 80057f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057fa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80057fe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8005a60 <_printf_float+0x2a8>
 8005802:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005806:	eeb0 6bc0 	vabs.f64	d6, d0
 800580a:	eeb4 6b47 	vcmp.f64	d6, d7
 800580e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005812:	dd24      	ble.n	800585e <_printf_float+0xa6>
 8005814:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800581c:	d502      	bpl.n	8005824 <_printf_float+0x6c>
 800581e:	232d      	movs	r3, #45	; 0x2d
 8005820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005824:	4b90      	ldr	r3, [pc, #576]	; (8005a68 <_printf_float+0x2b0>)
 8005826:	4891      	ldr	r0, [pc, #580]	; (8005a6c <_printf_float+0x2b4>)
 8005828:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800582c:	bf94      	ite	ls
 800582e:	4698      	movls	r8, r3
 8005830:	4680      	movhi	r8, r0
 8005832:	2303      	movs	r3, #3
 8005834:	6123      	str	r3, [r4, #16]
 8005836:	f022 0204 	bic.w	r2, r2, #4
 800583a:	2300      	movs	r3, #0
 800583c:	6022      	str	r2, [r4, #0]
 800583e:	9304      	str	r3, [sp, #16]
 8005840:	9700      	str	r7, [sp, #0]
 8005842:	4633      	mov	r3, r6
 8005844:	aa09      	add	r2, sp, #36	; 0x24
 8005846:	4621      	mov	r1, r4
 8005848:	4628      	mov	r0, r5
 800584a:	f000 f9d3 	bl	8005bf4 <_printf_common>
 800584e:	3001      	adds	r0, #1
 8005850:	f040 808a 	bne.w	8005968 <_printf_float+0x1b0>
 8005854:	f04f 30ff 	mov.w	r0, #4294967295
 8005858:	b00b      	add	sp, #44	; 0x2c
 800585a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585e:	eeb4 0b40 	vcmp.f64	d0, d0
 8005862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005866:	d709      	bvc.n	800587c <_printf_float+0xc4>
 8005868:	ee10 3a90 	vmov	r3, s1
 800586c:	2b00      	cmp	r3, #0
 800586e:	bfbc      	itt	lt
 8005870:	232d      	movlt	r3, #45	; 0x2d
 8005872:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005876:	487e      	ldr	r0, [pc, #504]	; (8005a70 <_printf_float+0x2b8>)
 8005878:	4b7e      	ldr	r3, [pc, #504]	; (8005a74 <_printf_float+0x2bc>)
 800587a:	e7d5      	b.n	8005828 <_printf_float+0x70>
 800587c:	6863      	ldr	r3, [r4, #4]
 800587e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005882:	9104      	str	r1, [sp, #16]
 8005884:	1c59      	adds	r1, r3, #1
 8005886:	d13c      	bne.n	8005902 <_printf_float+0x14a>
 8005888:	2306      	movs	r3, #6
 800588a:	6063      	str	r3, [r4, #4]
 800588c:	2300      	movs	r3, #0
 800588e:	9303      	str	r3, [sp, #12]
 8005890:	ab08      	add	r3, sp, #32
 8005892:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005896:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800589a:	ab07      	add	r3, sp, #28
 800589c:	6861      	ldr	r1, [r4, #4]
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	6022      	str	r2, [r4, #0]
 80058a2:	f10d 031b 	add.w	r3, sp, #27
 80058a6:	4628      	mov	r0, r5
 80058a8:	f7ff fef4 	bl	8005694 <__cvt>
 80058ac:	9b04      	ldr	r3, [sp, #16]
 80058ae:	9907      	ldr	r1, [sp, #28]
 80058b0:	2b47      	cmp	r3, #71	; 0x47
 80058b2:	4680      	mov	r8, r0
 80058b4:	d108      	bne.n	80058c8 <_printf_float+0x110>
 80058b6:	1cc8      	adds	r0, r1, #3
 80058b8:	db02      	blt.n	80058c0 <_printf_float+0x108>
 80058ba:	6863      	ldr	r3, [r4, #4]
 80058bc:	4299      	cmp	r1, r3
 80058be:	dd41      	ble.n	8005944 <_printf_float+0x18c>
 80058c0:	f1a9 0902 	sub.w	r9, r9, #2
 80058c4:	fa5f f989 	uxtb.w	r9, r9
 80058c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80058cc:	d820      	bhi.n	8005910 <_printf_float+0x158>
 80058ce:	3901      	subs	r1, #1
 80058d0:	464a      	mov	r2, r9
 80058d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058d6:	9107      	str	r1, [sp, #28]
 80058d8:	f7ff ff2e 	bl	8005738 <__exponent>
 80058dc:	9a08      	ldr	r2, [sp, #32]
 80058de:	9004      	str	r0, [sp, #16]
 80058e0:	1813      	adds	r3, r2, r0
 80058e2:	2a01      	cmp	r2, #1
 80058e4:	6123      	str	r3, [r4, #16]
 80058e6:	dc02      	bgt.n	80058ee <_printf_float+0x136>
 80058e8:	6822      	ldr	r2, [r4, #0]
 80058ea:	07d2      	lsls	r2, r2, #31
 80058ec:	d501      	bpl.n	80058f2 <_printf_float+0x13a>
 80058ee:	3301      	adds	r3, #1
 80058f0:	6123      	str	r3, [r4, #16]
 80058f2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0a2      	beq.n	8005840 <_printf_float+0x88>
 80058fa:	232d      	movs	r3, #45	; 0x2d
 80058fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005900:	e79e      	b.n	8005840 <_printf_float+0x88>
 8005902:	9904      	ldr	r1, [sp, #16]
 8005904:	2947      	cmp	r1, #71	; 0x47
 8005906:	d1c1      	bne.n	800588c <_printf_float+0xd4>
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1bf      	bne.n	800588c <_printf_float+0xd4>
 800590c:	2301      	movs	r3, #1
 800590e:	e7bc      	b.n	800588a <_printf_float+0xd2>
 8005910:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005914:	d118      	bne.n	8005948 <_printf_float+0x190>
 8005916:	2900      	cmp	r1, #0
 8005918:	6863      	ldr	r3, [r4, #4]
 800591a:	dd0b      	ble.n	8005934 <_printf_float+0x17c>
 800591c:	6121      	str	r1, [r4, #16]
 800591e:	b913      	cbnz	r3, 8005926 <_printf_float+0x16e>
 8005920:	6822      	ldr	r2, [r4, #0]
 8005922:	07d0      	lsls	r0, r2, #31
 8005924:	d502      	bpl.n	800592c <_printf_float+0x174>
 8005926:	3301      	adds	r3, #1
 8005928:	440b      	add	r3, r1
 800592a:	6123      	str	r3, [r4, #16]
 800592c:	2300      	movs	r3, #0
 800592e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005930:	9304      	str	r3, [sp, #16]
 8005932:	e7de      	b.n	80058f2 <_printf_float+0x13a>
 8005934:	b913      	cbnz	r3, 800593c <_printf_float+0x184>
 8005936:	6822      	ldr	r2, [r4, #0]
 8005938:	07d2      	lsls	r2, r2, #31
 800593a:	d501      	bpl.n	8005940 <_printf_float+0x188>
 800593c:	3302      	adds	r3, #2
 800593e:	e7f4      	b.n	800592a <_printf_float+0x172>
 8005940:	2301      	movs	r3, #1
 8005942:	e7f2      	b.n	800592a <_printf_float+0x172>
 8005944:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005948:	9b08      	ldr	r3, [sp, #32]
 800594a:	4299      	cmp	r1, r3
 800594c:	db05      	blt.n	800595a <_printf_float+0x1a2>
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	6121      	str	r1, [r4, #16]
 8005952:	07d8      	lsls	r0, r3, #31
 8005954:	d5ea      	bpl.n	800592c <_printf_float+0x174>
 8005956:	1c4b      	adds	r3, r1, #1
 8005958:	e7e7      	b.n	800592a <_printf_float+0x172>
 800595a:	2900      	cmp	r1, #0
 800595c:	bfd4      	ite	le
 800595e:	f1c1 0202 	rsble	r2, r1, #2
 8005962:	2201      	movgt	r2, #1
 8005964:	4413      	add	r3, r2
 8005966:	e7e0      	b.n	800592a <_printf_float+0x172>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	055a      	lsls	r2, r3, #21
 800596c:	d407      	bmi.n	800597e <_printf_float+0x1c6>
 800596e:	6923      	ldr	r3, [r4, #16]
 8005970:	4642      	mov	r2, r8
 8005972:	4631      	mov	r1, r6
 8005974:	4628      	mov	r0, r5
 8005976:	47b8      	blx	r7
 8005978:	3001      	adds	r0, #1
 800597a:	d12a      	bne.n	80059d2 <_printf_float+0x21a>
 800597c:	e76a      	b.n	8005854 <_printf_float+0x9c>
 800597e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005982:	f240 80e2 	bls.w	8005b4a <_printf_float+0x392>
 8005986:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800598a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800598e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005992:	d133      	bne.n	80059fc <_printf_float+0x244>
 8005994:	4a38      	ldr	r2, [pc, #224]	; (8005a78 <_printf_float+0x2c0>)
 8005996:	2301      	movs	r3, #1
 8005998:	4631      	mov	r1, r6
 800599a:	4628      	mov	r0, r5
 800599c:	47b8      	blx	r7
 800599e:	3001      	adds	r0, #1
 80059a0:	f43f af58 	beq.w	8005854 <_printf_float+0x9c>
 80059a4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	db02      	blt.n	80059b2 <_printf_float+0x1fa>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	07d8      	lsls	r0, r3, #31
 80059b0:	d50f      	bpl.n	80059d2 <_printf_float+0x21a>
 80059b2:	4653      	mov	r3, sl
 80059b4:	465a      	mov	r2, fp
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b8      	blx	r7
 80059bc:	3001      	adds	r0, #1
 80059be:	f43f af49 	beq.w	8005854 <_printf_float+0x9c>
 80059c2:	f04f 0800 	mov.w	r8, #0
 80059c6:	f104 091a 	add.w	r9, r4, #26
 80059ca:	9b08      	ldr	r3, [sp, #32]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	4543      	cmp	r3, r8
 80059d0:	dc09      	bgt.n	80059e6 <_printf_float+0x22e>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	079b      	lsls	r3, r3, #30
 80059d6:	f100 8108 	bmi.w	8005bea <_printf_float+0x432>
 80059da:	68e0      	ldr	r0, [r4, #12]
 80059dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059de:	4298      	cmp	r0, r3
 80059e0:	bfb8      	it	lt
 80059e2:	4618      	movlt	r0, r3
 80059e4:	e738      	b.n	8005858 <_printf_float+0xa0>
 80059e6:	2301      	movs	r3, #1
 80059e8:	464a      	mov	r2, r9
 80059ea:	4631      	mov	r1, r6
 80059ec:	4628      	mov	r0, r5
 80059ee:	47b8      	blx	r7
 80059f0:	3001      	adds	r0, #1
 80059f2:	f43f af2f 	beq.w	8005854 <_printf_float+0x9c>
 80059f6:	f108 0801 	add.w	r8, r8, #1
 80059fa:	e7e6      	b.n	80059ca <_printf_float+0x212>
 80059fc:	9b07      	ldr	r3, [sp, #28]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	dc3c      	bgt.n	8005a7c <_printf_float+0x2c4>
 8005a02:	4a1d      	ldr	r2, [pc, #116]	; (8005a78 <_printf_float+0x2c0>)
 8005a04:	2301      	movs	r3, #1
 8005a06:	4631      	mov	r1, r6
 8005a08:	4628      	mov	r0, r5
 8005a0a:	47b8      	blx	r7
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	f43f af21 	beq.w	8005854 <_printf_float+0x9c>
 8005a12:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	d102      	bne.n	8005a20 <_printf_float+0x268>
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	07d9      	lsls	r1, r3, #31
 8005a1e:	d5d8      	bpl.n	80059d2 <_printf_float+0x21a>
 8005a20:	4653      	mov	r3, sl
 8005a22:	465a      	mov	r2, fp
 8005a24:	4631      	mov	r1, r6
 8005a26:	4628      	mov	r0, r5
 8005a28:	47b8      	blx	r7
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	f43f af12 	beq.w	8005854 <_printf_float+0x9c>
 8005a30:	f04f 0900 	mov.w	r9, #0
 8005a34:	f104 0a1a 	add.w	sl, r4, #26
 8005a38:	9b07      	ldr	r3, [sp, #28]
 8005a3a:	425b      	negs	r3, r3
 8005a3c:	454b      	cmp	r3, r9
 8005a3e:	dc01      	bgt.n	8005a44 <_printf_float+0x28c>
 8005a40:	9b08      	ldr	r3, [sp, #32]
 8005a42:	e795      	b.n	8005970 <_printf_float+0x1b8>
 8005a44:	2301      	movs	r3, #1
 8005a46:	4652      	mov	r2, sl
 8005a48:	4631      	mov	r1, r6
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b8      	blx	r7
 8005a4e:	3001      	adds	r0, #1
 8005a50:	f43f af00 	beq.w	8005854 <_printf_float+0x9c>
 8005a54:	f109 0901 	add.w	r9, r9, #1
 8005a58:	e7ee      	b.n	8005a38 <_printf_float+0x280>
 8005a5a:	bf00      	nop
 8005a5c:	f3af 8000 	nop.w
 8005a60:	ffffffff 	.word	0xffffffff
 8005a64:	7fefffff 	.word	0x7fefffff
 8005a68:	080083bc 	.word	0x080083bc
 8005a6c:	080083c0 	.word	0x080083c0
 8005a70:	080083c8 	.word	0x080083c8
 8005a74:	080083c4 	.word	0x080083c4
 8005a78:	080083cc 	.word	0x080083cc
 8005a7c:	9a08      	ldr	r2, [sp, #32]
 8005a7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a80:	429a      	cmp	r2, r3
 8005a82:	bfa8      	it	ge
 8005a84:	461a      	movge	r2, r3
 8005a86:	2a00      	cmp	r2, #0
 8005a88:	4691      	mov	r9, r2
 8005a8a:	dc38      	bgt.n	8005afe <_printf_float+0x346>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9305      	str	r3, [sp, #20]
 8005a90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a94:	f104 021a 	add.w	r2, r4, #26
 8005a98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a9a:	9905      	ldr	r1, [sp, #20]
 8005a9c:	9304      	str	r3, [sp, #16]
 8005a9e:	eba3 0309 	sub.w	r3, r3, r9
 8005aa2:	428b      	cmp	r3, r1
 8005aa4:	dc33      	bgt.n	8005b0e <_printf_float+0x356>
 8005aa6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	db3c      	blt.n	8005b28 <_printf_float+0x370>
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	07da      	lsls	r2, r3, #31
 8005ab2:	d439      	bmi.n	8005b28 <_printf_float+0x370>
 8005ab4:	9a08      	ldr	r2, [sp, #32]
 8005ab6:	9b04      	ldr	r3, [sp, #16]
 8005ab8:	9907      	ldr	r1, [sp, #28]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	eba2 0901 	sub.w	r9, r2, r1
 8005ac0:	4599      	cmp	r9, r3
 8005ac2:	bfa8      	it	ge
 8005ac4:	4699      	movge	r9, r3
 8005ac6:	f1b9 0f00 	cmp.w	r9, #0
 8005aca:	dc35      	bgt.n	8005b38 <_printf_float+0x380>
 8005acc:	f04f 0800 	mov.w	r8, #0
 8005ad0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ad4:	f104 0a1a 	add.w	sl, r4, #26
 8005ad8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005adc:	1a9b      	subs	r3, r3, r2
 8005ade:	eba3 0309 	sub.w	r3, r3, r9
 8005ae2:	4543      	cmp	r3, r8
 8005ae4:	f77f af75 	ble.w	80059d2 <_printf_float+0x21a>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	4652      	mov	r2, sl
 8005aec:	4631      	mov	r1, r6
 8005aee:	4628      	mov	r0, r5
 8005af0:	47b8      	blx	r7
 8005af2:	3001      	adds	r0, #1
 8005af4:	f43f aeae 	beq.w	8005854 <_printf_float+0x9c>
 8005af8:	f108 0801 	add.w	r8, r8, #1
 8005afc:	e7ec      	b.n	8005ad8 <_printf_float+0x320>
 8005afe:	4613      	mov	r3, r2
 8005b00:	4631      	mov	r1, r6
 8005b02:	4642      	mov	r2, r8
 8005b04:	4628      	mov	r0, r5
 8005b06:	47b8      	blx	r7
 8005b08:	3001      	adds	r0, #1
 8005b0a:	d1bf      	bne.n	8005a8c <_printf_float+0x2d4>
 8005b0c:	e6a2      	b.n	8005854 <_printf_float+0x9c>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	4631      	mov	r1, r6
 8005b12:	4628      	mov	r0, r5
 8005b14:	9204      	str	r2, [sp, #16]
 8005b16:	47b8      	blx	r7
 8005b18:	3001      	adds	r0, #1
 8005b1a:	f43f ae9b 	beq.w	8005854 <_printf_float+0x9c>
 8005b1e:	9b05      	ldr	r3, [sp, #20]
 8005b20:	9a04      	ldr	r2, [sp, #16]
 8005b22:	3301      	adds	r3, #1
 8005b24:	9305      	str	r3, [sp, #20]
 8005b26:	e7b7      	b.n	8005a98 <_printf_float+0x2e0>
 8005b28:	4653      	mov	r3, sl
 8005b2a:	465a      	mov	r2, fp
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	4628      	mov	r0, r5
 8005b30:	47b8      	blx	r7
 8005b32:	3001      	adds	r0, #1
 8005b34:	d1be      	bne.n	8005ab4 <_printf_float+0x2fc>
 8005b36:	e68d      	b.n	8005854 <_printf_float+0x9c>
 8005b38:	9a04      	ldr	r2, [sp, #16]
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	4442      	add	r2, r8
 8005b3e:	4631      	mov	r1, r6
 8005b40:	4628      	mov	r0, r5
 8005b42:	47b8      	blx	r7
 8005b44:	3001      	adds	r0, #1
 8005b46:	d1c1      	bne.n	8005acc <_printf_float+0x314>
 8005b48:	e684      	b.n	8005854 <_printf_float+0x9c>
 8005b4a:	9a08      	ldr	r2, [sp, #32]
 8005b4c:	2a01      	cmp	r2, #1
 8005b4e:	dc01      	bgt.n	8005b54 <_printf_float+0x39c>
 8005b50:	07db      	lsls	r3, r3, #31
 8005b52:	d537      	bpl.n	8005bc4 <_printf_float+0x40c>
 8005b54:	2301      	movs	r3, #1
 8005b56:	4642      	mov	r2, r8
 8005b58:	4631      	mov	r1, r6
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b8      	blx	r7
 8005b5e:	3001      	adds	r0, #1
 8005b60:	f43f ae78 	beq.w	8005854 <_printf_float+0x9c>
 8005b64:	4653      	mov	r3, sl
 8005b66:	465a      	mov	r2, fp
 8005b68:	4631      	mov	r1, r6
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	47b8      	blx	r7
 8005b6e:	3001      	adds	r0, #1
 8005b70:	f43f ae70 	beq.w	8005854 <_printf_float+0x9c>
 8005b74:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005b78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b80:	d01b      	beq.n	8005bba <_printf_float+0x402>
 8005b82:	9b08      	ldr	r3, [sp, #32]
 8005b84:	f108 0201 	add.w	r2, r8, #1
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	47b8      	blx	r7
 8005b90:	3001      	adds	r0, #1
 8005b92:	d10e      	bne.n	8005bb2 <_printf_float+0x3fa>
 8005b94:	e65e      	b.n	8005854 <_printf_float+0x9c>
 8005b96:	2301      	movs	r3, #1
 8005b98:	464a      	mov	r2, r9
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	47b8      	blx	r7
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	f43f ae57 	beq.w	8005854 <_printf_float+0x9c>
 8005ba6:	f108 0801 	add.w	r8, r8, #1
 8005baa:	9b08      	ldr	r3, [sp, #32]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	4543      	cmp	r3, r8
 8005bb0:	dcf1      	bgt.n	8005b96 <_printf_float+0x3de>
 8005bb2:	9b04      	ldr	r3, [sp, #16]
 8005bb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bb8:	e6db      	b.n	8005972 <_printf_float+0x1ba>
 8005bba:	f04f 0800 	mov.w	r8, #0
 8005bbe:	f104 091a 	add.w	r9, r4, #26
 8005bc2:	e7f2      	b.n	8005baa <_printf_float+0x3f2>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	e7df      	b.n	8005b8a <_printf_float+0x3d2>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	464a      	mov	r2, r9
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	47b8      	blx	r7
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	f43f ae3d 	beq.w	8005854 <_printf_float+0x9c>
 8005bda:	f108 0801 	add.w	r8, r8, #1
 8005bde:	68e3      	ldr	r3, [r4, #12]
 8005be0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005be2:	1a5b      	subs	r3, r3, r1
 8005be4:	4543      	cmp	r3, r8
 8005be6:	dcf0      	bgt.n	8005bca <_printf_float+0x412>
 8005be8:	e6f7      	b.n	80059da <_printf_float+0x222>
 8005bea:	f04f 0800 	mov.w	r8, #0
 8005bee:	f104 0919 	add.w	r9, r4, #25
 8005bf2:	e7f4      	b.n	8005bde <_printf_float+0x426>

08005bf4 <_printf_common>:
 8005bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf8:	4616      	mov	r6, r2
 8005bfa:	4699      	mov	r9, r3
 8005bfc:	688a      	ldr	r2, [r1, #8]
 8005bfe:	690b      	ldr	r3, [r1, #16]
 8005c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c04:	4293      	cmp	r3, r2
 8005c06:	bfb8      	it	lt
 8005c08:	4613      	movlt	r3, r2
 8005c0a:	6033      	str	r3, [r6, #0]
 8005c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c10:	4607      	mov	r7, r0
 8005c12:	460c      	mov	r4, r1
 8005c14:	b10a      	cbz	r2, 8005c1a <_printf_common+0x26>
 8005c16:	3301      	adds	r3, #1
 8005c18:	6033      	str	r3, [r6, #0]
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	0699      	lsls	r1, r3, #26
 8005c1e:	bf42      	ittt	mi
 8005c20:	6833      	ldrmi	r3, [r6, #0]
 8005c22:	3302      	addmi	r3, #2
 8005c24:	6033      	strmi	r3, [r6, #0]
 8005c26:	6825      	ldr	r5, [r4, #0]
 8005c28:	f015 0506 	ands.w	r5, r5, #6
 8005c2c:	d106      	bne.n	8005c3c <_printf_common+0x48>
 8005c2e:	f104 0a19 	add.w	sl, r4, #25
 8005c32:	68e3      	ldr	r3, [r4, #12]
 8005c34:	6832      	ldr	r2, [r6, #0]
 8005c36:	1a9b      	subs	r3, r3, r2
 8005c38:	42ab      	cmp	r3, r5
 8005c3a:	dc26      	bgt.n	8005c8a <_printf_common+0x96>
 8005c3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c40:	1e13      	subs	r3, r2, #0
 8005c42:	6822      	ldr	r2, [r4, #0]
 8005c44:	bf18      	it	ne
 8005c46:	2301      	movne	r3, #1
 8005c48:	0692      	lsls	r2, r2, #26
 8005c4a:	d42b      	bmi.n	8005ca4 <_printf_common+0xb0>
 8005c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c50:	4649      	mov	r1, r9
 8005c52:	4638      	mov	r0, r7
 8005c54:	47c0      	blx	r8
 8005c56:	3001      	adds	r0, #1
 8005c58:	d01e      	beq.n	8005c98 <_printf_common+0xa4>
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	68e5      	ldr	r5, [r4, #12]
 8005c5e:	6832      	ldr	r2, [r6, #0]
 8005c60:	f003 0306 	and.w	r3, r3, #6
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	bf08      	it	eq
 8005c68:	1aad      	subeq	r5, r5, r2
 8005c6a:	68a3      	ldr	r3, [r4, #8]
 8005c6c:	6922      	ldr	r2, [r4, #16]
 8005c6e:	bf0c      	ite	eq
 8005c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c74:	2500      	movne	r5, #0
 8005c76:	4293      	cmp	r3, r2
 8005c78:	bfc4      	itt	gt
 8005c7a:	1a9b      	subgt	r3, r3, r2
 8005c7c:	18ed      	addgt	r5, r5, r3
 8005c7e:	2600      	movs	r6, #0
 8005c80:	341a      	adds	r4, #26
 8005c82:	42b5      	cmp	r5, r6
 8005c84:	d11a      	bne.n	8005cbc <_printf_common+0xc8>
 8005c86:	2000      	movs	r0, #0
 8005c88:	e008      	b.n	8005c9c <_printf_common+0xa8>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	4652      	mov	r2, sl
 8005c8e:	4649      	mov	r1, r9
 8005c90:	4638      	mov	r0, r7
 8005c92:	47c0      	blx	r8
 8005c94:	3001      	adds	r0, #1
 8005c96:	d103      	bne.n	8005ca0 <_printf_common+0xac>
 8005c98:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca0:	3501      	adds	r5, #1
 8005ca2:	e7c6      	b.n	8005c32 <_printf_common+0x3e>
 8005ca4:	18e1      	adds	r1, r4, r3
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	2030      	movs	r0, #48	; 0x30
 8005caa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cae:	4422      	add	r2, r4
 8005cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cb8:	3302      	adds	r3, #2
 8005cba:	e7c7      	b.n	8005c4c <_printf_common+0x58>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	4622      	mov	r2, r4
 8005cc0:	4649      	mov	r1, r9
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	47c0      	blx	r8
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	d0e6      	beq.n	8005c98 <_printf_common+0xa4>
 8005cca:	3601      	adds	r6, #1
 8005ccc:	e7d9      	b.n	8005c82 <_printf_common+0x8e>
	...

08005cd0 <_printf_i>:
 8005cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	4691      	mov	r9, r2
 8005cd8:	7e27      	ldrb	r7, [r4, #24]
 8005cda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005cdc:	2f78      	cmp	r7, #120	; 0x78
 8005cde:	4680      	mov	r8, r0
 8005ce0:	469a      	mov	sl, r3
 8005ce2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ce6:	d807      	bhi.n	8005cf8 <_printf_i+0x28>
 8005ce8:	2f62      	cmp	r7, #98	; 0x62
 8005cea:	d80a      	bhi.n	8005d02 <_printf_i+0x32>
 8005cec:	2f00      	cmp	r7, #0
 8005cee:	f000 80d8 	beq.w	8005ea2 <_printf_i+0x1d2>
 8005cf2:	2f58      	cmp	r7, #88	; 0x58
 8005cf4:	f000 80a3 	beq.w	8005e3e <_printf_i+0x16e>
 8005cf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d00:	e03a      	b.n	8005d78 <_printf_i+0xa8>
 8005d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d06:	2b15      	cmp	r3, #21
 8005d08:	d8f6      	bhi.n	8005cf8 <_printf_i+0x28>
 8005d0a:	a001      	add	r0, pc, #4	; (adr r0, 8005d10 <_printf_i+0x40>)
 8005d0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005d10:	08005d69 	.word	0x08005d69
 8005d14:	08005d7d 	.word	0x08005d7d
 8005d18:	08005cf9 	.word	0x08005cf9
 8005d1c:	08005cf9 	.word	0x08005cf9
 8005d20:	08005cf9 	.word	0x08005cf9
 8005d24:	08005cf9 	.word	0x08005cf9
 8005d28:	08005d7d 	.word	0x08005d7d
 8005d2c:	08005cf9 	.word	0x08005cf9
 8005d30:	08005cf9 	.word	0x08005cf9
 8005d34:	08005cf9 	.word	0x08005cf9
 8005d38:	08005cf9 	.word	0x08005cf9
 8005d3c:	08005e89 	.word	0x08005e89
 8005d40:	08005dad 	.word	0x08005dad
 8005d44:	08005e6b 	.word	0x08005e6b
 8005d48:	08005cf9 	.word	0x08005cf9
 8005d4c:	08005cf9 	.word	0x08005cf9
 8005d50:	08005eab 	.word	0x08005eab
 8005d54:	08005cf9 	.word	0x08005cf9
 8005d58:	08005dad 	.word	0x08005dad
 8005d5c:	08005cf9 	.word	0x08005cf9
 8005d60:	08005cf9 	.word	0x08005cf9
 8005d64:	08005e73 	.word	0x08005e73
 8005d68:	680b      	ldr	r3, [r1, #0]
 8005d6a:	1d1a      	adds	r2, r3, #4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	600a      	str	r2, [r1, #0]
 8005d70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0a3      	b.n	8005ec4 <_printf_i+0x1f4>
 8005d7c:	6825      	ldr	r5, [r4, #0]
 8005d7e:	6808      	ldr	r0, [r1, #0]
 8005d80:	062e      	lsls	r6, r5, #24
 8005d82:	f100 0304 	add.w	r3, r0, #4
 8005d86:	d50a      	bpl.n	8005d9e <_printf_i+0xce>
 8005d88:	6805      	ldr	r5, [r0, #0]
 8005d8a:	600b      	str	r3, [r1, #0]
 8005d8c:	2d00      	cmp	r5, #0
 8005d8e:	da03      	bge.n	8005d98 <_printf_i+0xc8>
 8005d90:	232d      	movs	r3, #45	; 0x2d
 8005d92:	426d      	negs	r5, r5
 8005d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d98:	485e      	ldr	r0, [pc, #376]	; (8005f14 <_printf_i+0x244>)
 8005d9a:	230a      	movs	r3, #10
 8005d9c:	e019      	b.n	8005dd2 <_printf_i+0x102>
 8005d9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005da2:	6805      	ldr	r5, [r0, #0]
 8005da4:	600b      	str	r3, [r1, #0]
 8005da6:	bf18      	it	ne
 8005da8:	b22d      	sxthne	r5, r5
 8005daa:	e7ef      	b.n	8005d8c <_printf_i+0xbc>
 8005dac:	680b      	ldr	r3, [r1, #0]
 8005dae:	6825      	ldr	r5, [r4, #0]
 8005db0:	1d18      	adds	r0, r3, #4
 8005db2:	6008      	str	r0, [r1, #0]
 8005db4:	0628      	lsls	r0, r5, #24
 8005db6:	d501      	bpl.n	8005dbc <_printf_i+0xec>
 8005db8:	681d      	ldr	r5, [r3, #0]
 8005dba:	e002      	b.n	8005dc2 <_printf_i+0xf2>
 8005dbc:	0669      	lsls	r1, r5, #25
 8005dbe:	d5fb      	bpl.n	8005db8 <_printf_i+0xe8>
 8005dc0:	881d      	ldrh	r5, [r3, #0]
 8005dc2:	4854      	ldr	r0, [pc, #336]	; (8005f14 <_printf_i+0x244>)
 8005dc4:	2f6f      	cmp	r7, #111	; 0x6f
 8005dc6:	bf0c      	ite	eq
 8005dc8:	2308      	moveq	r3, #8
 8005dca:	230a      	movne	r3, #10
 8005dcc:	2100      	movs	r1, #0
 8005dce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dd2:	6866      	ldr	r6, [r4, #4]
 8005dd4:	60a6      	str	r6, [r4, #8]
 8005dd6:	2e00      	cmp	r6, #0
 8005dd8:	bfa2      	ittt	ge
 8005dda:	6821      	ldrge	r1, [r4, #0]
 8005ddc:	f021 0104 	bicge.w	r1, r1, #4
 8005de0:	6021      	strge	r1, [r4, #0]
 8005de2:	b90d      	cbnz	r5, 8005de8 <_printf_i+0x118>
 8005de4:	2e00      	cmp	r6, #0
 8005de6:	d04d      	beq.n	8005e84 <_printf_i+0x1b4>
 8005de8:	4616      	mov	r6, r2
 8005dea:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dee:	fb03 5711 	mls	r7, r3, r1, r5
 8005df2:	5dc7      	ldrb	r7, [r0, r7]
 8005df4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005df8:	462f      	mov	r7, r5
 8005dfa:	42bb      	cmp	r3, r7
 8005dfc:	460d      	mov	r5, r1
 8005dfe:	d9f4      	bls.n	8005dea <_printf_i+0x11a>
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d10b      	bne.n	8005e1c <_printf_i+0x14c>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	07df      	lsls	r7, r3, #31
 8005e08:	d508      	bpl.n	8005e1c <_printf_i+0x14c>
 8005e0a:	6923      	ldr	r3, [r4, #16]
 8005e0c:	6861      	ldr	r1, [r4, #4]
 8005e0e:	4299      	cmp	r1, r3
 8005e10:	bfde      	ittt	le
 8005e12:	2330      	movle	r3, #48	; 0x30
 8005e14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e1c:	1b92      	subs	r2, r2, r6
 8005e1e:	6122      	str	r2, [r4, #16]
 8005e20:	f8cd a000 	str.w	sl, [sp]
 8005e24:	464b      	mov	r3, r9
 8005e26:	aa03      	add	r2, sp, #12
 8005e28:	4621      	mov	r1, r4
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	f7ff fee2 	bl	8005bf4 <_printf_common>
 8005e30:	3001      	adds	r0, #1
 8005e32:	d14c      	bne.n	8005ece <_printf_i+0x1fe>
 8005e34:	f04f 30ff 	mov.w	r0, #4294967295
 8005e38:	b004      	add	sp, #16
 8005e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3e:	4835      	ldr	r0, [pc, #212]	; (8005f14 <_printf_i+0x244>)
 8005e40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	680e      	ldr	r6, [r1, #0]
 8005e48:	061f      	lsls	r7, r3, #24
 8005e4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005e4e:	600e      	str	r6, [r1, #0]
 8005e50:	d514      	bpl.n	8005e7c <_printf_i+0x1ac>
 8005e52:	07d9      	lsls	r1, r3, #31
 8005e54:	bf44      	itt	mi
 8005e56:	f043 0320 	orrmi.w	r3, r3, #32
 8005e5a:	6023      	strmi	r3, [r4, #0]
 8005e5c:	b91d      	cbnz	r5, 8005e66 <_printf_i+0x196>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	f023 0320 	bic.w	r3, r3, #32
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	2310      	movs	r3, #16
 8005e68:	e7b0      	b.n	8005dcc <_printf_i+0xfc>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	f043 0320 	orr.w	r3, r3, #32
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	2378      	movs	r3, #120	; 0x78
 8005e74:	4828      	ldr	r0, [pc, #160]	; (8005f18 <_printf_i+0x248>)
 8005e76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e7a:	e7e3      	b.n	8005e44 <_printf_i+0x174>
 8005e7c:	065e      	lsls	r6, r3, #25
 8005e7e:	bf48      	it	mi
 8005e80:	b2ad      	uxthmi	r5, r5
 8005e82:	e7e6      	b.n	8005e52 <_printf_i+0x182>
 8005e84:	4616      	mov	r6, r2
 8005e86:	e7bb      	b.n	8005e00 <_printf_i+0x130>
 8005e88:	680b      	ldr	r3, [r1, #0]
 8005e8a:	6826      	ldr	r6, [r4, #0]
 8005e8c:	6960      	ldr	r0, [r4, #20]
 8005e8e:	1d1d      	adds	r5, r3, #4
 8005e90:	600d      	str	r5, [r1, #0]
 8005e92:	0635      	lsls	r5, r6, #24
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	d501      	bpl.n	8005e9c <_printf_i+0x1cc>
 8005e98:	6018      	str	r0, [r3, #0]
 8005e9a:	e002      	b.n	8005ea2 <_printf_i+0x1d2>
 8005e9c:	0671      	lsls	r1, r6, #25
 8005e9e:	d5fb      	bpl.n	8005e98 <_printf_i+0x1c8>
 8005ea0:	8018      	strh	r0, [r3, #0]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	6123      	str	r3, [r4, #16]
 8005ea6:	4616      	mov	r6, r2
 8005ea8:	e7ba      	b.n	8005e20 <_printf_i+0x150>
 8005eaa:	680b      	ldr	r3, [r1, #0]
 8005eac:	1d1a      	adds	r2, r3, #4
 8005eae:	600a      	str	r2, [r1, #0]
 8005eb0:	681e      	ldr	r6, [r3, #0]
 8005eb2:	6862      	ldr	r2, [r4, #4]
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	f7fa f9ca 	bl	8000250 <memchr>
 8005ebc:	b108      	cbz	r0, 8005ec2 <_printf_i+0x1f2>
 8005ebe:	1b80      	subs	r0, r0, r6
 8005ec0:	6060      	str	r0, [r4, #4]
 8005ec2:	6863      	ldr	r3, [r4, #4]
 8005ec4:	6123      	str	r3, [r4, #16]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ecc:	e7a8      	b.n	8005e20 <_printf_i+0x150>
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	4632      	mov	r2, r6
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	47d0      	blx	sl
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d0ab      	beq.n	8005e34 <_printf_i+0x164>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	079b      	lsls	r3, r3, #30
 8005ee0:	d413      	bmi.n	8005f0a <_printf_i+0x23a>
 8005ee2:	68e0      	ldr	r0, [r4, #12]
 8005ee4:	9b03      	ldr	r3, [sp, #12]
 8005ee6:	4298      	cmp	r0, r3
 8005ee8:	bfb8      	it	lt
 8005eea:	4618      	movlt	r0, r3
 8005eec:	e7a4      	b.n	8005e38 <_printf_i+0x168>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	4632      	mov	r2, r6
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	4640      	mov	r0, r8
 8005ef6:	47d0      	blx	sl
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d09b      	beq.n	8005e34 <_printf_i+0x164>
 8005efc:	3501      	adds	r5, #1
 8005efe:	68e3      	ldr	r3, [r4, #12]
 8005f00:	9903      	ldr	r1, [sp, #12]
 8005f02:	1a5b      	subs	r3, r3, r1
 8005f04:	42ab      	cmp	r3, r5
 8005f06:	dcf2      	bgt.n	8005eee <_printf_i+0x21e>
 8005f08:	e7eb      	b.n	8005ee2 <_printf_i+0x212>
 8005f0a:	2500      	movs	r5, #0
 8005f0c:	f104 0619 	add.w	r6, r4, #25
 8005f10:	e7f5      	b.n	8005efe <_printf_i+0x22e>
 8005f12:	bf00      	nop
 8005f14:	080083ce 	.word	0x080083ce
 8005f18:	080083df 	.word	0x080083df

08005f1c <siprintf>:
 8005f1c:	b40e      	push	{r1, r2, r3}
 8005f1e:	b500      	push	{lr}
 8005f20:	b09c      	sub	sp, #112	; 0x70
 8005f22:	ab1d      	add	r3, sp, #116	; 0x74
 8005f24:	9002      	str	r0, [sp, #8]
 8005f26:	9006      	str	r0, [sp, #24]
 8005f28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f2c:	4809      	ldr	r0, [pc, #36]	; (8005f54 <siprintf+0x38>)
 8005f2e:	9107      	str	r1, [sp, #28]
 8005f30:	9104      	str	r1, [sp, #16]
 8005f32:	4909      	ldr	r1, [pc, #36]	; (8005f58 <siprintf+0x3c>)
 8005f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f38:	9105      	str	r1, [sp, #20]
 8005f3a:	6800      	ldr	r0, [r0, #0]
 8005f3c:	9301      	str	r3, [sp, #4]
 8005f3e:	a902      	add	r1, sp, #8
 8005f40:	f001 fabc 	bl	80074bc <_svfiprintf_r>
 8005f44:	9b02      	ldr	r3, [sp, #8]
 8005f46:	2200      	movs	r2, #0
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	b01c      	add	sp, #112	; 0x70
 8005f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f50:	b003      	add	sp, #12
 8005f52:	4770      	bx	lr
 8005f54:	20000040 	.word	0x20000040
 8005f58:	ffff0208 	.word	0xffff0208

08005f5c <quorem>:
 8005f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f60:	6903      	ldr	r3, [r0, #16]
 8005f62:	690c      	ldr	r4, [r1, #16]
 8005f64:	42a3      	cmp	r3, r4
 8005f66:	4607      	mov	r7, r0
 8005f68:	f2c0 8081 	blt.w	800606e <quorem+0x112>
 8005f6c:	3c01      	subs	r4, #1
 8005f6e:	f101 0814 	add.w	r8, r1, #20
 8005f72:	f100 0514 	add.w	r5, r0, #20
 8005f76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f7a:	9301      	str	r3, [sp, #4]
 8005f7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f84:	3301      	adds	r3, #1
 8005f86:	429a      	cmp	r2, r3
 8005f88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f90:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f94:	d331      	bcc.n	8005ffa <quorem+0x9e>
 8005f96:	f04f 0e00 	mov.w	lr, #0
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	46ac      	mov	ip, r5
 8005f9e:	46f2      	mov	sl, lr
 8005fa0:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fa4:	b293      	uxth	r3, r2
 8005fa6:	fb06 e303 	mla	r3, r6, r3, lr
 8005faa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	ebaa 0303 	sub.w	r3, sl, r3
 8005fb4:	0c12      	lsrs	r2, r2, #16
 8005fb6:	f8dc a000 	ldr.w	sl, [ip]
 8005fba:	fb06 e202 	mla	r2, r6, r2, lr
 8005fbe:	fa13 f38a 	uxtah	r3, r3, sl
 8005fc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005fc6:	fa1f fa82 	uxth.w	sl, r2
 8005fca:	f8dc 2000 	ldr.w	r2, [ip]
 8005fce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005fd2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fdc:	4581      	cmp	r9, r0
 8005fde:	f84c 3b04 	str.w	r3, [ip], #4
 8005fe2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005fe6:	d2db      	bcs.n	8005fa0 <quorem+0x44>
 8005fe8:	f855 300b 	ldr.w	r3, [r5, fp]
 8005fec:	b92b      	cbnz	r3, 8005ffa <quorem+0x9e>
 8005fee:	9b01      	ldr	r3, [sp, #4]
 8005ff0:	3b04      	subs	r3, #4
 8005ff2:	429d      	cmp	r5, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	d32e      	bcc.n	8006056 <quorem+0xfa>
 8005ff8:	613c      	str	r4, [r7, #16]
 8005ffa:	4638      	mov	r0, r7
 8005ffc:	f001 f848 	bl	8007090 <__mcmp>
 8006000:	2800      	cmp	r0, #0
 8006002:	db24      	blt.n	800604e <quorem+0xf2>
 8006004:	3601      	adds	r6, #1
 8006006:	4628      	mov	r0, r5
 8006008:	f04f 0c00 	mov.w	ip, #0
 800600c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006010:	f8d0 e000 	ldr.w	lr, [r0]
 8006014:	b293      	uxth	r3, r2
 8006016:	ebac 0303 	sub.w	r3, ip, r3
 800601a:	0c12      	lsrs	r2, r2, #16
 800601c:	fa13 f38e 	uxtah	r3, r3, lr
 8006020:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006024:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800602e:	45c1      	cmp	r9, r8
 8006030:	f840 3b04 	str.w	r3, [r0], #4
 8006034:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006038:	d2e8      	bcs.n	800600c <quorem+0xb0>
 800603a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800603e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006042:	b922      	cbnz	r2, 800604e <quorem+0xf2>
 8006044:	3b04      	subs	r3, #4
 8006046:	429d      	cmp	r5, r3
 8006048:	461a      	mov	r2, r3
 800604a:	d30a      	bcc.n	8006062 <quorem+0x106>
 800604c:	613c      	str	r4, [r7, #16]
 800604e:	4630      	mov	r0, r6
 8006050:	b003      	add	sp, #12
 8006052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006056:	6812      	ldr	r2, [r2, #0]
 8006058:	3b04      	subs	r3, #4
 800605a:	2a00      	cmp	r2, #0
 800605c:	d1cc      	bne.n	8005ff8 <quorem+0x9c>
 800605e:	3c01      	subs	r4, #1
 8006060:	e7c7      	b.n	8005ff2 <quorem+0x96>
 8006062:	6812      	ldr	r2, [r2, #0]
 8006064:	3b04      	subs	r3, #4
 8006066:	2a00      	cmp	r2, #0
 8006068:	d1f0      	bne.n	800604c <quorem+0xf0>
 800606a:	3c01      	subs	r4, #1
 800606c:	e7eb      	b.n	8006046 <quorem+0xea>
 800606e:	2000      	movs	r0, #0
 8006070:	e7ee      	b.n	8006050 <quorem+0xf4>
 8006072:	0000      	movs	r0, r0
 8006074:	0000      	movs	r0, r0
	...

08006078 <_dtoa_r>:
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	ec59 8b10 	vmov	r8, r9, d0
 8006080:	b095      	sub	sp, #84	; 0x54
 8006082:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006084:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8006086:	9107      	str	r1, [sp, #28]
 8006088:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800608c:	4606      	mov	r6, r0
 800608e:	9209      	str	r2, [sp, #36]	; 0x24
 8006090:	9310      	str	r3, [sp, #64]	; 0x40
 8006092:	b975      	cbnz	r5, 80060b2 <_dtoa_r+0x3a>
 8006094:	2010      	movs	r0, #16
 8006096:	f000 fd75 	bl	8006b84 <malloc>
 800609a:	4602      	mov	r2, r0
 800609c:	6270      	str	r0, [r6, #36]	; 0x24
 800609e:	b920      	cbnz	r0, 80060aa <_dtoa_r+0x32>
 80060a0:	4bab      	ldr	r3, [pc, #684]	; (8006350 <_dtoa_r+0x2d8>)
 80060a2:	21ea      	movs	r1, #234	; 0xea
 80060a4:	48ab      	ldr	r0, [pc, #684]	; (8006354 <_dtoa_r+0x2dc>)
 80060a6:	f001 fb19 	bl	80076dc <__assert_func>
 80060aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80060ae:	6005      	str	r5, [r0, #0]
 80060b0:	60c5      	str	r5, [r0, #12]
 80060b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80060b4:	6819      	ldr	r1, [r3, #0]
 80060b6:	b151      	cbz	r1, 80060ce <_dtoa_r+0x56>
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	604a      	str	r2, [r1, #4]
 80060bc:	2301      	movs	r3, #1
 80060be:	4093      	lsls	r3, r2
 80060c0:	608b      	str	r3, [r1, #8]
 80060c2:	4630      	mov	r0, r6
 80060c4:	f000 fda6 	bl	8006c14 <_Bfree>
 80060c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80060ca:	2200      	movs	r2, #0
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	f1b9 0300 	subs.w	r3, r9, #0
 80060d2:	bfbb      	ittet	lt
 80060d4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80060d8:	9303      	strlt	r3, [sp, #12]
 80060da:	2300      	movge	r3, #0
 80060dc:	2201      	movlt	r2, #1
 80060de:	bfac      	ite	ge
 80060e0:	6023      	strge	r3, [r4, #0]
 80060e2:	6022      	strlt	r2, [r4, #0]
 80060e4:	4b9c      	ldr	r3, [pc, #624]	; (8006358 <_dtoa_r+0x2e0>)
 80060e6:	9c03      	ldr	r4, [sp, #12]
 80060e8:	43a3      	bics	r3, r4
 80060ea:	d11a      	bne.n	8006122 <_dtoa_r+0xaa>
 80060ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80060ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80060f8:	ea53 0308 	orrs.w	r3, r3, r8
 80060fc:	f000 8512 	beq.w	8006b24 <_dtoa_r+0xaac>
 8006100:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006102:	b953      	cbnz	r3, 800611a <_dtoa_r+0xa2>
 8006104:	4b95      	ldr	r3, [pc, #596]	; (800635c <_dtoa_r+0x2e4>)
 8006106:	e01f      	b.n	8006148 <_dtoa_r+0xd0>
 8006108:	4b95      	ldr	r3, [pc, #596]	; (8006360 <_dtoa_r+0x2e8>)
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	3308      	adds	r3, #8
 800610e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	9800      	ldr	r0, [sp, #0]
 8006114:	b015      	add	sp, #84	; 0x54
 8006116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611a:	4b90      	ldr	r3, [pc, #576]	; (800635c <_dtoa_r+0x2e4>)
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	3303      	adds	r3, #3
 8006120:	e7f5      	b.n	800610e <_dtoa_r+0x96>
 8006122:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006126:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800612a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006132:	d10b      	bne.n	800614c <_dtoa_r+0xd4>
 8006134:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006136:	2301      	movs	r3, #1
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 84ee 	beq.w	8006b1e <_dtoa_r+0xaa6>
 8006142:	4888      	ldr	r0, [pc, #544]	; (8006364 <_dtoa_r+0x2ec>)
 8006144:	6018      	str	r0, [r3, #0]
 8006146:	1e43      	subs	r3, r0, #1
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	e7e2      	b.n	8006112 <_dtoa_r+0x9a>
 800614c:	a913      	add	r1, sp, #76	; 0x4c
 800614e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006152:	aa12      	add	r2, sp, #72	; 0x48
 8006154:	4630      	mov	r0, r6
 8006156:	f001 f83f 	bl	80071d8 <__d2b>
 800615a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800615e:	4605      	mov	r5, r0
 8006160:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006162:	2900      	cmp	r1, #0
 8006164:	d047      	beq.n	80061f6 <_dtoa_r+0x17e>
 8006166:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006168:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800616c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006170:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8006174:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006178:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800617c:	2400      	movs	r4, #0
 800617e:	ec43 2b16 	vmov	d6, r2, r3
 8006182:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8006186:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8006338 <_dtoa_r+0x2c0>
 800618a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800618e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8006340 <_dtoa_r+0x2c8>
 8006192:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006196:	eeb0 7b46 	vmov.f64	d7, d6
 800619a:	ee06 1a90 	vmov	s13, r1
 800619e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80061a2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8006348 <_dtoa_r+0x2d0>
 80061a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80061aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80061ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80061b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b6:	ee16 ba90 	vmov	fp, s13
 80061ba:	9411      	str	r4, [sp, #68]	; 0x44
 80061bc:	d508      	bpl.n	80061d0 <_dtoa_r+0x158>
 80061be:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80061c2:	eeb4 6b47 	vcmp.f64	d6, d7
 80061c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ca:	bf18      	it	ne
 80061cc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80061d0:	f1bb 0f16 	cmp.w	fp, #22
 80061d4:	d832      	bhi.n	800623c <_dtoa_r+0x1c4>
 80061d6:	4b64      	ldr	r3, [pc, #400]	; (8006368 <_dtoa_r+0x2f0>)
 80061d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80061dc:	ed93 7b00 	vldr	d7, [r3]
 80061e0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80061e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80061e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ec:	d501      	bpl.n	80061f2 <_dtoa_r+0x17a>
 80061ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061f2:	2300      	movs	r3, #0
 80061f4:	e023      	b.n	800623e <_dtoa_r+0x1c6>
 80061f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80061f8:	4401      	add	r1, r0
 80061fa:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80061fe:	2b20      	cmp	r3, #32
 8006200:	bfc3      	ittte	gt
 8006202:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006206:	fa04 f303 	lslgt.w	r3, r4, r3
 800620a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800620e:	f1c3 0320 	rsble	r3, r3, #32
 8006212:	bfc6      	itte	gt
 8006214:	fa28 f804 	lsrgt.w	r8, r8, r4
 8006218:	ea43 0308 	orrgt.w	r3, r3, r8
 800621c:	fa08 f303 	lslle.w	r3, r8, r3
 8006220:	ee07 3a90 	vmov	s15, r3
 8006224:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006228:	3901      	subs	r1, #1
 800622a:	ed8d 7b00 	vstr	d7, [sp]
 800622e:	9c01      	ldr	r4, [sp, #4]
 8006230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006234:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8006238:	2401      	movs	r4, #1
 800623a:	e7a0      	b.n	800617e <_dtoa_r+0x106>
 800623c:	2301      	movs	r3, #1
 800623e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006240:	1a43      	subs	r3, r0, r1
 8006242:	1e5a      	subs	r2, r3, #1
 8006244:	bf45      	ittet	mi
 8006246:	f1c3 0301 	rsbmi	r3, r3, #1
 800624a:	9305      	strmi	r3, [sp, #20]
 800624c:	2300      	movpl	r3, #0
 800624e:	2300      	movmi	r3, #0
 8006250:	9206      	str	r2, [sp, #24]
 8006252:	bf54      	ite	pl
 8006254:	9305      	strpl	r3, [sp, #20]
 8006256:	9306      	strmi	r3, [sp, #24]
 8006258:	f1bb 0f00 	cmp.w	fp, #0
 800625c:	db18      	blt.n	8006290 <_dtoa_r+0x218>
 800625e:	9b06      	ldr	r3, [sp, #24]
 8006260:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006264:	445b      	add	r3, fp
 8006266:	9306      	str	r3, [sp, #24]
 8006268:	2300      	movs	r3, #0
 800626a:	9a07      	ldr	r2, [sp, #28]
 800626c:	2a09      	cmp	r2, #9
 800626e:	d849      	bhi.n	8006304 <_dtoa_r+0x28c>
 8006270:	2a05      	cmp	r2, #5
 8006272:	bfc4      	itt	gt
 8006274:	3a04      	subgt	r2, #4
 8006276:	9207      	strgt	r2, [sp, #28]
 8006278:	9a07      	ldr	r2, [sp, #28]
 800627a:	f1a2 0202 	sub.w	r2, r2, #2
 800627e:	bfcc      	ite	gt
 8006280:	2400      	movgt	r4, #0
 8006282:	2401      	movle	r4, #1
 8006284:	2a03      	cmp	r2, #3
 8006286:	d848      	bhi.n	800631a <_dtoa_r+0x2a2>
 8006288:	e8df f002 	tbb	[pc, r2]
 800628c:	3a2c2e0b 	.word	0x3a2c2e0b
 8006290:	9b05      	ldr	r3, [sp, #20]
 8006292:	2200      	movs	r2, #0
 8006294:	eba3 030b 	sub.w	r3, r3, fp
 8006298:	9305      	str	r3, [sp, #20]
 800629a:	920e      	str	r2, [sp, #56]	; 0x38
 800629c:	f1cb 0300 	rsb	r3, fp, #0
 80062a0:	e7e3      	b.n	800626a <_dtoa_r+0x1f2>
 80062a2:	2200      	movs	r2, #0
 80062a4:	9208      	str	r2, [sp, #32]
 80062a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062a8:	2a00      	cmp	r2, #0
 80062aa:	dc39      	bgt.n	8006320 <_dtoa_r+0x2a8>
 80062ac:	f04f 0a01 	mov.w	sl, #1
 80062b0:	46d1      	mov	r9, sl
 80062b2:	4652      	mov	r2, sl
 80062b4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80062b8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80062ba:	2100      	movs	r1, #0
 80062bc:	6079      	str	r1, [r7, #4]
 80062be:	2004      	movs	r0, #4
 80062c0:	f100 0c14 	add.w	ip, r0, #20
 80062c4:	4594      	cmp	ip, r2
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	d92f      	bls.n	800632a <_dtoa_r+0x2b2>
 80062ca:	4630      	mov	r0, r6
 80062cc:	930c      	str	r3, [sp, #48]	; 0x30
 80062ce:	f000 fc61 	bl	8006b94 <_Balloc>
 80062d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062d4:	9000      	str	r0, [sp, #0]
 80062d6:	4602      	mov	r2, r0
 80062d8:	2800      	cmp	r0, #0
 80062da:	d149      	bne.n	8006370 <_dtoa_r+0x2f8>
 80062dc:	4b23      	ldr	r3, [pc, #140]	; (800636c <_dtoa_r+0x2f4>)
 80062de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80062e2:	e6df      	b.n	80060a4 <_dtoa_r+0x2c>
 80062e4:	2201      	movs	r2, #1
 80062e6:	e7dd      	b.n	80062a4 <_dtoa_r+0x22c>
 80062e8:	2200      	movs	r2, #0
 80062ea:	9208      	str	r2, [sp, #32]
 80062ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062ee:	eb0b 0a02 	add.w	sl, fp, r2
 80062f2:	f10a 0901 	add.w	r9, sl, #1
 80062f6:	464a      	mov	r2, r9
 80062f8:	2a01      	cmp	r2, #1
 80062fa:	bfb8      	it	lt
 80062fc:	2201      	movlt	r2, #1
 80062fe:	e7db      	b.n	80062b8 <_dtoa_r+0x240>
 8006300:	2201      	movs	r2, #1
 8006302:	e7f2      	b.n	80062ea <_dtoa_r+0x272>
 8006304:	2401      	movs	r4, #1
 8006306:	2200      	movs	r2, #0
 8006308:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800630c:	f04f 3aff 	mov.w	sl, #4294967295
 8006310:	2100      	movs	r1, #0
 8006312:	46d1      	mov	r9, sl
 8006314:	2212      	movs	r2, #18
 8006316:	9109      	str	r1, [sp, #36]	; 0x24
 8006318:	e7ce      	b.n	80062b8 <_dtoa_r+0x240>
 800631a:	2201      	movs	r2, #1
 800631c:	9208      	str	r2, [sp, #32]
 800631e:	e7f5      	b.n	800630c <_dtoa_r+0x294>
 8006320:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8006324:	46d1      	mov	r9, sl
 8006326:	4652      	mov	r2, sl
 8006328:	e7c6      	b.n	80062b8 <_dtoa_r+0x240>
 800632a:	3101      	adds	r1, #1
 800632c:	6079      	str	r1, [r7, #4]
 800632e:	0040      	lsls	r0, r0, #1
 8006330:	e7c6      	b.n	80062c0 <_dtoa_r+0x248>
 8006332:	bf00      	nop
 8006334:	f3af 8000 	nop.w
 8006338:	636f4361 	.word	0x636f4361
 800633c:	3fd287a7 	.word	0x3fd287a7
 8006340:	8b60c8b3 	.word	0x8b60c8b3
 8006344:	3fc68a28 	.word	0x3fc68a28
 8006348:	509f79fb 	.word	0x509f79fb
 800634c:	3fd34413 	.word	0x3fd34413
 8006350:	080083fd 	.word	0x080083fd
 8006354:	08008414 	.word	0x08008414
 8006358:	7ff00000 	.word	0x7ff00000
 800635c:	080083f9 	.word	0x080083f9
 8006360:	080083f0 	.word	0x080083f0
 8006364:	080083cd 	.word	0x080083cd
 8006368:	08008510 	.word	0x08008510
 800636c:	08008473 	.word	0x08008473
 8006370:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006372:	9900      	ldr	r1, [sp, #0]
 8006374:	6011      	str	r1, [r2, #0]
 8006376:	f1b9 0f0e 	cmp.w	r9, #14
 800637a:	d872      	bhi.n	8006462 <_dtoa_r+0x3ea>
 800637c:	2c00      	cmp	r4, #0
 800637e:	d070      	beq.n	8006462 <_dtoa_r+0x3ea>
 8006380:	f1bb 0f00 	cmp.w	fp, #0
 8006384:	f340 80a6 	ble.w	80064d4 <_dtoa_r+0x45c>
 8006388:	49ca      	ldr	r1, [pc, #808]	; (80066b4 <_dtoa_r+0x63c>)
 800638a:	f00b 020f 	and.w	r2, fp, #15
 800638e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006392:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006396:	ed92 7b00 	vldr	d7, [r2]
 800639a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800639e:	f000 808d 	beq.w	80064bc <_dtoa_r+0x444>
 80063a2:	4ac5      	ldr	r2, [pc, #788]	; (80066b8 <_dtoa_r+0x640>)
 80063a4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80063a8:	ed92 6b08 	vldr	d6, [r2, #32]
 80063ac:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80063b0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80063b4:	f001 010f 	and.w	r1, r1, #15
 80063b8:	2203      	movs	r2, #3
 80063ba:	48bf      	ldr	r0, [pc, #764]	; (80066b8 <_dtoa_r+0x640>)
 80063bc:	2900      	cmp	r1, #0
 80063be:	d17f      	bne.n	80064c0 <_dtoa_r+0x448>
 80063c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80063c4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80063c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80063cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063ce:	2900      	cmp	r1, #0
 80063d0:	f000 80b2 	beq.w	8006538 <_dtoa_r+0x4c0>
 80063d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80063d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80063e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e4:	f140 80a8 	bpl.w	8006538 <_dtoa_r+0x4c0>
 80063e8:	f1b9 0f00 	cmp.w	r9, #0
 80063ec:	f000 80a4 	beq.w	8006538 <_dtoa_r+0x4c0>
 80063f0:	f1ba 0f00 	cmp.w	sl, #0
 80063f4:	dd31      	ble.n	800645a <_dtoa_r+0x3e2>
 80063f6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80063fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80063fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006402:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006406:	3201      	adds	r2, #1
 8006408:	4650      	mov	r0, sl
 800640a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800640e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006412:	ee07 2a90 	vmov	s15, r2
 8006416:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800641a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800641e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8006422:	9c03      	ldr	r4, [sp, #12]
 8006424:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006428:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800642c:	2800      	cmp	r0, #0
 800642e:	f040 8086 	bne.w	800653e <_dtoa_r+0x4c6>
 8006432:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006436:	ee36 6b47 	vsub.f64	d6, d6, d7
 800643a:	ec42 1b17 	vmov	d7, r1, r2
 800643e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006446:	f300 8272 	bgt.w	800692e <_dtoa_r+0x8b6>
 800644a:	eeb1 7b47 	vneg.f64	d7, d7
 800644e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006456:	f100 8267 	bmi.w	8006928 <_dtoa_r+0x8b0>
 800645a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800645e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006462:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006464:	2a00      	cmp	r2, #0
 8006466:	f2c0 8129 	blt.w	80066bc <_dtoa_r+0x644>
 800646a:	f1bb 0f0e 	cmp.w	fp, #14
 800646e:	f300 8125 	bgt.w	80066bc <_dtoa_r+0x644>
 8006472:	4b90      	ldr	r3, [pc, #576]	; (80066b4 <_dtoa_r+0x63c>)
 8006474:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006478:	ed93 6b00 	vldr	d6, [r3]
 800647c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800647e:	2b00      	cmp	r3, #0
 8006480:	f280 80c3 	bge.w	800660a <_dtoa_r+0x592>
 8006484:	f1b9 0f00 	cmp.w	r9, #0
 8006488:	f300 80bf 	bgt.w	800660a <_dtoa_r+0x592>
 800648c:	f040 824c 	bne.w	8006928 <_dtoa_r+0x8b0>
 8006490:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006494:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006498:	ed9d 7b02 	vldr	d7, [sp, #8]
 800649c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80064a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a4:	464c      	mov	r4, r9
 80064a6:	464f      	mov	r7, r9
 80064a8:	f280 8222 	bge.w	80068f0 <_dtoa_r+0x878>
 80064ac:	f8dd 8000 	ldr.w	r8, [sp]
 80064b0:	2331      	movs	r3, #49	; 0x31
 80064b2:	f808 3b01 	strb.w	r3, [r8], #1
 80064b6:	f10b 0b01 	add.w	fp, fp, #1
 80064ba:	e21e      	b.n	80068fa <_dtoa_r+0x882>
 80064bc:	2202      	movs	r2, #2
 80064be:	e77c      	b.n	80063ba <_dtoa_r+0x342>
 80064c0:	07cc      	lsls	r4, r1, #31
 80064c2:	d504      	bpl.n	80064ce <_dtoa_r+0x456>
 80064c4:	ed90 6b00 	vldr	d6, [r0]
 80064c8:	3201      	adds	r2, #1
 80064ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80064ce:	1049      	asrs	r1, r1, #1
 80064d0:	3008      	adds	r0, #8
 80064d2:	e773      	b.n	80063bc <_dtoa_r+0x344>
 80064d4:	d02e      	beq.n	8006534 <_dtoa_r+0x4bc>
 80064d6:	f1cb 0100 	rsb	r1, fp, #0
 80064da:	4a76      	ldr	r2, [pc, #472]	; (80066b4 <_dtoa_r+0x63c>)
 80064dc:	f001 000f 	and.w	r0, r1, #15
 80064e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80064e4:	ed92 7b00 	vldr	d7, [r2]
 80064e8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80064ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80064f0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80064f4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80064f8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80064fc:	486e      	ldr	r0, [pc, #440]	; (80066b8 <_dtoa_r+0x640>)
 80064fe:	1109      	asrs	r1, r1, #4
 8006500:	2400      	movs	r4, #0
 8006502:	2202      	movs	r2, #2
 8006504:	b939      	cbnz	r1, 8006516 <_dtoa_r+0x49e>
 8006506:	2c00      	cmp	r4, #0
 8006508:	f43f af60 	beq.w	80063cc <_dtoa_r+0x354>
 800650c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006510:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006514:	e75a      	b.n	80063cc <_dtoa_r+0x354>
 8006516:	07cf      	lsls	r7, r1, #31
 8006518:	d509      	bpl.n	800652e <_dtoa_r+0x4b6>
 800651a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800651e:	ed90 7b00 	vldr	d7, [r0]
 8006522:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006526:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800652a:	3201      	adds	r2, #1
 800652c:	2401      	movs	r4, #1
 800652e:	1049      	asrs	r1, r1, #1
 8006530:	3008      	adds	r0, #8
 8006532:	e7e7      	b.n	8006504 <_dtoa_r+0x48c>
 8006534:	2202      	movs	r2, #2
 8006536:	e749      	b.n	80063cc <_dtoa_r+0x354>
 8006538:	465f      	mov	r7, fp
 800653a:	4648      	mov	r0, r9
 800653c:	e765      	b.n	800640a <_dtoa_r+0x392>
 800653e:	ec42 1b17 	vmov	d7, r1, r2
 8006542:	4a5c      	ldr	r2, [pc, #368]	; (80066b4 <_dtoa_r+0x63c>)
 8006544:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006548:	ed12 4b02 	vldr	d4, [r2, #-8]
 800654c:	9a00      	ldr	r2, [sp, #0]
 800654e:	1814      	adds	r4, r2, r0
 8006550:	9a08      	ldr	r2, [sp, #32]
 8006552:	b352      	cbz	r2, 80065aa <_dtoa_r+0x532>
 8006554:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006558:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800655c:	f8dd 8000 	ldr.w	r8, [sp]
 8006560:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006564:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006568:	ee35 7b47 	vsub.f64	d7, d5, d7
 800656c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006570:	ee14 2a90 	vmov	r2, s9
 8006574:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006578:	3230      	adds	r2, #48	; 0x30
 800657a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800657e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006586:	f808 2b01 	strb.w	r2, [r8], #1
 800658a:	d439      	bmi.n	8006600 <_dtoa_r+0x588>
 800658c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006590:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006598:	d472      	bmi.n	8006680 <_dtoa_r+0x608>
 800659a:	45a0      	cmp	r8, r4
 800659c:	f43f af5d 	beq.w	800645a <_dtoa_r+0x3e2>
 80065a0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80065a4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80065a8:	e7e0      	b.n	800656c <_dtoa_r+0x4f4>
 80065aa:	f8dd 8000 	ldr.w	r8, [sp]
 80065ae:	ee27 7b04 	vmul.f64	d7, d7, d4
 80065b2:	4621      	mov	r1, r4
 80065b4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80065b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80065bc:	ee14 2a90 	vmov	r2, s9
 80065c0:	3230      	adds	r2, #48	; 0x30
 80065c2:	f808 2b01 	strb.w	r2, [r8], #1
 80065c6:	45a0      	cmp	r8, r4
 80065c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80065cc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80065d0:	d118      	bne.n	8006604 <_dtoa_r+0x58c>
 80065d2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80065d6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80065da:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80065de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e2:	dc4d      	bgt.n	8006680 <_dtoa_r+0x608>
 80065e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80065e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80065ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f0:	f57f af33 	bpl.w	800645a <_dtoa_r+0x3e2>
 80065f4:	4688      	mov	r8, r1
 80065f6:	3901      	subs	r1, #1
 80065f8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80065fc:	2b30      	cmp	r3, #48	; 0x30
 80065fe:	d0f9      	beq.n	80065f4 <_dtoa_r+0x57c>
 8006600:	46bb      	mov	fp, r7
 8006602:	e02a      	b.n	800665a <_dtoa_r+0x5e2>
 8006604:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006608:	e7d6      	b.n	80065b8 <_dtoa_r+0x540>
 800660a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800660e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006612:	f8dd 8000 	ldr.w	r8, [sp]
 8006616:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800661a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800661e:	ee15 3a10 	vmov	r3, s10
 8006622:	3330      	adds	r3, #48	; 0x30
 8006624:	f808 3b01 	strb.w	r3, [r8], #1
 8006628:	9b00      	ldr	r3, [sp, #0]
 800662a:	eba8 0303 	sub.w	r3, r8, r3
 800662e:	4599      	cmp	r9, r3
 8006630:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006634:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006638:	d133      	bne.n	80066a2 <_dtoa_r+0x62a>
 800663a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800663e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006646:	dc1a      	bgt.n	800667e <_dtoa_r+0x606>
 8006648:	eeb4 7b46 	vcmp.f64	d7, d6
 800664c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006650:	d103      	bne.n	800665a <_dtoa_r+0x5e2>
 8006652:	ee15 3a10 	vmov	r3, s10
 8006656:	07d9      	lsls	r1, r3, #31
 8006658:	d411      	bmi.n	800667e <_dtoa_r+0x606>
 800665a:	4629      	mov	r1, r5
 800665c:	4630      	mov	r0, r6
 800665e:	f000 fad9 	bl	8006c14 <_Bfree>
 8006662:	2300      	movs	r3, #0
 8006664:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006666:	f888 3000 	strb.w	r3, [r8]
 800666a:	f10b 0301 	add.w	r3, fp, #1
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006672:	2b00      	cmp	r3, #0
 8006674:	f43f ad4d 	beq.w	8006112 <_dtoa_r+0x9a>
 8006678:	f8c3 8000 	str.w	r8, [r3]
 800667c:	e549      	b.n	8006112 <_dtoa_r+0x9a>
 800667e:	465f      	mov	r7, fp
 8006680:	4643      	mov	r3, r8
 8006682:	4698      	mov	r8, r3
 8006684:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006688:	2a39      	cmp	r2, #57	; 0x39
 800668a:	d106      	bne.n	800669a <_dtoa_r+0x622>
 800668c:	9a00      	ldr	r2, [sp, #0]
 800668e:	429a      	cmp	r2, r3
 8006690:	d1f7      	bne.n	8006682 <_dtoa_r+0x60a>
 8006692:	9900      	ldr	r1, [sp, #0]
 8006694:	2230      	movs	r2, #48	; 0x30
 8006696:	3701      	adds	r7, #1
 8006698:	700a      	strb	r2, [r1, #0]
 800669a:	781a      	ldrb	r2, [r3, #0]
 800669c:	3201      	adds	r2, #1
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	e7ae      	b.n	8006600 <_dtoa_r+0x588>
 80066a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80066a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80066aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ae:	d1b2      	bne.n	8006616 <_dtoa_r+0x59e>
 80066b0:	e7d3      	b.n	800665a <_dtoa_r+0x5e2>
 80066b2:	bf00      	nop
 80066b4:	08008510 	.word	0x08008510
 80066b8:	080084e8 	.word	0x080084e8
 80066bc:	9908      	ldr	r1, [sp, #32]
 80066be:	2900      	cmp	r1, #0
 80066c0:	f000 80d1 	beq.w	8006866 <_dtoa_r+0x7ee>
 80066c4:	9907      	ldr	r1, [sp, #28]
 80066c6:	2901      	cmp	r1, #1
 80066c8:	f300 80b4 	bgt.w	8006834 <_dtoa_r+0x7bc>
 80066cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80066ce:	2900      	cmp	r1, #0
 80066d0:	f000 80ac 	beq.w	800682c <_dtoa_r+0x7b4>
 80066d4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80066d8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80066dc:	461c      	mov	r4, r3
 80066de:	930a      	str	r3, [sp, #40]	; 0x28
 80066e0:	9b05      	ldr	r3, [sp, #20]
 80066e2:	4413      	add	r3, r2
 80066e4:	9305      	str	r3, [sp, #20]
 80066e6:	9b06      	ldr	r3, [sp, #24]
 80066e8:	2101      	movs	r1, #1
 80066ea:	4413      	add	r3, r2
 80066ec:	4630      	mov	r0, r6
 80066ee:	9306      	str	r3, [sp, #24]
 80066f0:	f000 fb4c 	bl	8006d8c <__i2b>
 80066f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f6:	4607      	mov	r7, r0
 80066f8:	f1b8 0f00 	cmp.w	r8, #0
 80066fc:	dd0d      	ble.n	800671a <_dtoa_r+0x6a2>
 80066fe:	9a06      	ldr	r2, [sp, #24]
 8006700:	2a00      	cmp	r2, #0
 8006702:	dd0a      	ble.n	800671a <_dtoa_r+0x6a2>
 8006704:	4542      	cmp	r2, r8
 8006706:	9905      	ldr	r1, [sp, #20]
 8006708:	bfa8      	it	ge
 800670a:	4642      	movge	r2, r8
 800670c:	1a89      	subs	r1, r1, r2
 800670e:	9105      	str	r1, [sp, #20]
 8006710:	9906      	ldr	r1, [sp, #24]
 8006712:	eba8 0802 	sub.w	r8, r8, r2
 8006716:	1a8a      	subs	r2, r1, r2
 8006718:	9206      	str	r2, [sp, #24]
 800671a:	b303      	cbz	r3, 800675e <_dtoa_r+0x6e6>
 800671c:	9a08      	ldr	r2, [sp, #32]
 800671e:	2a00      	cmp	r2, #0
 8006720:	f000 80a6 	beq.w	8006870 <_dtoa_r+0x7f8>
 8006724:	2c00      	cmp	r4, #0
 8006726:	dd13      	ble.n	8006750 <_dtoa_r+0x6d8>
 8006728:	4639      	mov	r1, r7
 800672a:	4622      	mov	r2, r4
 800672c:	4630      	mov	r0, r6
 800672e:	930c      	str	r3, [sp, #48]	; 0x30
 8006730:	f000 fbe8 	bl	8006f04 <__pow5mult>
 8006734:	462a      	mov	r2, r5
 8006736:	4601      	mov	r1, r0
 8006738:	4607      	mov	r7, r0
 800673a:	4630      	mov	r0, r6
 800673c:	f000 fb3c 	bl	8006db8 <__multiply>
 8006740:	4629      	mov	r1, r5
 8006742:	900a      	str	r0, [sp, #40]	; 0x28
 8006744:	4630      	mov	r0, r6
 8006746:	f000 fa65 	bl	8006c14 <_Bfree>
 800674a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800674c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800674e:	4615      	mov	r5, r2
 8006750:	1b1a      	subs	r2, r3, r4
 8006752:	d004      	beq.n	800675e <_dtoa_r+0x6e6>
 8006754:	4629      	mov	r1, r5
 8006756:	4630      	mov	r0, r6
 8006758:	f000 fbd4 	bl	8006f04 <__pow5mult>
 800675c:	4605      	mov	r5, r0
 800675e:	2101      	movs	r1, #1
 8006760:	4630      	mov	r0, r6
 8006762:	f000 fb13 	bl	8006d8c <__i2b>
 8006766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006768:	2b00      	cmp	r3, #0
 800676a:	4604      	mov	r4, r0
 800676c:	f340 8082 	ble.w	8006874 <_dtoa_r+0x7fc>
 8006770:	461a      	mov	r2, r3
 8006772:	4601      	mov	r1, r0
 8006774:	4630      	mov	r0, r6
 8006776:	f000 fbc5 	bl	8006f04 <__pow5mult>
 800677a:	9b07      	ldr	r3, [sp, #28]
 800677c:	2b01      	cmp	r3, #1
 800677e:	4604      	mov	r4, r0
 8006780:	dd7b      	ble.n	800687a <_dtoa_r+0x802>
 8006782:	2300      	movs	r3, #0
 8006784:	930a      	str	r3, [sp, #40]	; 0x28
 8006786:	6922      	ldr	r2, [r4, #16]
 8006788:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800678c:	6910      	ldr	r0, [r2, #16]
 800678e:	f000 faad 	bl	8006cec <__hi0bits>
 8006792:	f1c0 0020 	rsb	r0, r0, #32
 8006796:	9b06      	ldr	r3, [sp, #24]
 8006798:	4418      	add	r0, r3
 800679a:	f010 001f 	ands.w	r0, r0, #31
 800679e:	f000 808d 	beq.w	80068bc <_dtoa_r+0x844>
 80067a2:	f1c0 0220 	rsb	r2, r0, #32
 80067a6:	2a04      	cmp	r2, #4
 80067a8:	f340 8086 	ble.w	80068b8 <_dtoa_r+0x840>
 80067ac:	f1c0 001c 	rsb	r0, r0, #28
 80067b0:	9b05      	ldr	r3, [sp, #20]
 80067b2:	4403      	add	r3, r0
 80067b4:	9305      	str	r3, [sp, #20]
 80067b6:	9b06      	ldr	r3, [sp, #24]
 80067b8:	4403      	add	r3, r0
 80067ba:	4480      	add	r8, r0
 80067bc:	9306      	str	r3, [sp, #24]
 80067be:	9b05      	ldr	r3, [sp, #20]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	dd05      	ble.n	80067d0 <_dtoa_r+0x758>
 80067c4:	4629      	mov	r1, r5
 80067c6:	461a      	mov	r2, r3
 80067c8:	4630      	mov	r0, r6
 80067ca:	f000 fbf5 	bl	8006fb8 <__lshift>
 80067ce:	4605      	mov	r5, r0
 80067d0:	9b06      	ldr	r3, [sp, #24]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	dd05      	ble.n	80067e2 <_dtoa_r+0x76a>
 80067d6:	4621      	mov	r1, r4
 80067d8:	461a      	mov	r2, r3
 80067da:	4630      	mov	r0, r6
 80067dc:	f000 fbec 	bl	8006fb8 <__lshift>
 80067e0:	4604      	mov	r4, r0
 80067e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d06b      	beq.n	80068c0 <_dtoa_r+0x848>
 80067e8:	4621      	mov	r1, r4
 80067ea:	4628      	mov	r0, r5
 80067ec:	f000 fc50 	bl	8007090 <__mcmp>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	da65      	bge.n	80068c0 <_dtoa_r+0x848>
 80067f4:	2300      	movs	r3, #0
 80067f6:	4629      	mov	r1, r5
 80067f8:	220a      	movs	r2, #10
 80067fa:	4630      	mov	r0, r6
 80067fc:	f000 fa2c 	bl	8006c58 <__multadd>
 8006800:	9b08      	ldr	r3, [sp, #32]
 8006802:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006806:	4605      	mov	r5, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 8192 	beq.w	8006b32 <_dtoa_r+0xaba>
 800680e:	4639      	mov	r1, r7
 8006810:	2300      	movs	r3, #0
 8006812:	220a      	movs	r2, #10
 8006814:	4630      	mov	r0, r6
 8006816:	f000 fa1f 	bl	8006c58 <__multadd>
 800681a:	f1ba 0f00 	cmp.w	sl, #0
 800681e:	4607      	mov	r7, r0
 8006820:	f300 808e 	bgt.w	8006940 <_dtoa_r+0x8c8>
 8006824:	9b07      	ldr	r3, [sp, #28]
 8006826:	2b02      	cmp	r3, #2
 8006828:	dc51      	bgt.n	80068ce <_dtoa_r+0x856>
 800682a:	e089      	b.n	8006940 <_dtoa_r+0x8c8>
 800682c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800682e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006832:	e751      	b.n	80066d8 <_dtoa_r+0x660>
 8006834:	f109 34ff 	add.w	r4, r9, #4294967295
 8006838:	42a3      	cmp	r3, r4
 800683a:	bfbf      	itttt	lt
 800683c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800683e:	1ae3      	sublt	r3, r4, r3
 8006840:	18d2      	addlt	r2, r2, r3
 8006842:	4613      	movlt	r3, r2
 8006844:	bfb7      	itett	lt
 8006846:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006848:	1b1c      	subge	r4, r3, r4
 800684a:	4623      	movlt	r3, r4
 800684c:	2400      	movlt	r4, #0
 800684e:	f1b9 0f00 	cmp.w	r9, #0
 8006852:	bfb5      	itete	lt
 8006854:	9a05      	ldrlt	r2, [sp, #20]
 8006856:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800685a:	eba2 0809 	sublt.w	r8, r2, r9
 800685e:	464a      	movge	r2, r9
 8006860:	bfb8      	it	lt
 8006862:	2200      	movlt	r2, #0
 8006864:	e73b      	b.n	80066de <_dtoa_r+0x666>
 8006866:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800686a:	9f08      	ldr	r7, [sp, #32]
 800686c:	461c      	mov	r4, r3
 800686e:	e743      	b.n	80066f8 <_dtoa_r+0x680>
 8006870:	461a      	mov	r2, r3
 8006872:	e76f      	b.n	8006754 <_dtoa_r+0x6dc>
 8006874:	9b07      	ldr	r3, [sp, #28]
 8006876:	2b01      	cmp	r3, #1
 8006878:	dc18      	bgt.n	80068ac <_dtoa_r+0x834>
 800687a:	9b02      	ldr	r3, [sp, #8]
 800687c:	b9b3      	cbnz	r3, 80068ac <_dtoa_r+0x834>
 800687e:	9b03      	ldr	r3, [sp, #12]
 8006880:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006884:	b9a2      	cbnz	r2, 80068b0 <_dtoa_r+0x838>
 8006886:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800688a:	0d12      	lsrs	r2, r2, #20
 800688c:	0512      	lsls	r2, r2, #20
 800688e:	b18a      	cbz	r2, 80068b4 <_dtoa_r+0x83c>
 8006890:	9b05      	ldr	r3, [sp, #20]
 8006892:	3301      	adds	r3, #1
 8006894:	9305      	str	r3, [sp, #20]
 8006896:	9b06      	ldr	r3, [sp, #24]
 8006898:	3301      	adds	r3, #1
 800689a:	9306      	str	r3, [sp, #24]
 800689c:	2301      	movs	r3, #1
 800689e:	930a      	str	r3, [sp, #40]	; 0x28
 80068a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f47f af6f 	bne.w	8006786 <_dtoa_r+0x70e>
 80068a8:	2001      	movs	r0, #1
 80068aa:	e774      	b.n	8006796 <_dtoa_r+0x71e>
 80068ac:	2300      	movs	r3, #0
 80068ae:	e7f6      	b.n	800689e <_dtoa_r+0x826>
 80068b0:	9b02      	ldr	r3, [sp, #8]
 80068b2:	e7f4      	b.n	800689e <_dtoa_r+0x826>
 80068b4:	920a      	str	r2, [sp, #40]	; 0x28
 80068b6:	e7f3      	b.n	80068a0 <_dtoa_r+0x828>
 80068b8:	d081      	beq.n	80067be <_dtoa_r+0x746>
 80068ba:	4610      	mov	r0, r2
 80068bc:	301c      	adds	r0, #28
 80068be:	e777      	b.n	80067b0 <_dtoa_r+0x738>
 80068c0:	f1b9 0f00 	cmp.w	r9, #0
 80068c4:	dc37      	bgt.n	8006936 <_dtoa_r+0x8be>
 80068c6:	9b07      	ldr	r3, [sp, #28]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	dd34      	ble.n	8006936 <_dtoa_r+0x8be>
 80068cc:	46ca      	mov	sl, r9
 80068ce:	f1ba 0f00 	cmp.w	sl, #0
 80068d2:	d10d      	bne.n	80068f0 <_dtoa_r+0x878>
 80068d4:	4621      	mov	r1, r4
 80068d6:	4653      	mov	r3, sl
 80068d8:	2205      	movs	r2, #5
 80068da:	4630      	mov	r0, r6
 80068dc:	f000 f9bc 	bl	8006c58 <__multadd>
 80068e0:	4601      	mov	r1, r0
 80068e2:	4604      	mov	r4, r0
 80068e4:	4628      	mov	r0, r5
 80068e6:	f000 fbd3 	bl	8007090 <__mcmp>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	f73f adde 	bgt.w	80064ac <_dtoa_r+0x434>
 80068f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f2:	f8dd 8000 	ldr.w	r8, [sp]
 80068f6:	ea6f 0b03 	mvn.w	fp, r3
 80068fa:	f04f 0900 	mov.w	r9, #0
 80068fe:	4621      	mov	r1, r4
 8006900:	4630      	mov	r0, r6
 8006902:	f000 f987 	bl	8006c14 <_Bfree>
 8006906:	2f00      	cmp	r7, #0
 8006908:	f43f aea7 	beq.w	800665a <_dtoa_r+0x5e2>
 800690c:	f1b9 0f00 	cmp.w	r9, #0
 8006910:	d005      	beq.n	800691e <_dtoa_r+0x8a6>
 8006912:	45b9      	cmp	r9, r7
 8006914:	d003      	beq.n	800691e <_dtoa_r+0x8a6>
 8006916:	4649      	mov	r1, r9
 8006918:	4630      	mov	r0, r6
 800691a:	f000 f97b 	bl	8006c14 <_Bfree>
 800691e:	4639      	mov	r1, r7
 8006920:	4630      	mov	r0, r6
 8006922:	f000 f977 	bl	8006c14 <_Bfree>
 8006926:	e698      	b.n	800665a <_dtoa_r+0x5e2>
 8006928:	2400      	movs	r4, #0
 800692a:	4627      	mov	r7, r4
 800692c:	e7e0      	b.n	80068f0 <_dtoa_r+0x878>
 800692e:	46bb      	mov	fp, r7
 8006930:	4604      	mov	r4, r0
 8006932:	4607      	mov	r7, r0
 8006934:	e5ba      	b.n	80064ac <_dtoa_r+0x434>
 8006936:	9b08      	ldr	r3, [sp, #32]
 8006938:	46ca      	mov	sl, r9
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 8100 	beq.w	8006b40 <_dtoa_r+0xac8>
 8006940:	f1b8 0f00 	cmp.w	r8, #0
 8006944:	dd05      	ble.n	8006952 <_dtoa_r+0x8da>
 8006946:	4639      	mov	r1, r7
 8006948:	4642      	mov	r2, r8
 800694a:	4630      	mov	r0, r6
 800694c:	f000 fb34 	bl	8006fb8 <__lshift>
 8006950:	4607      	mov	r7, r0
 8006952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006954:	2b00      	cmp	r3, #0
 8006956:	d05d      	beq.n	8006a14 <_dtoa_r+0x99c>
 8006958:	6879      	ldr	r1, [r7, #4]
 800695a:	4630      	mov	r0, r6
 800695c:	f000 f91a 	bl	8006b94 <_Balloc>
 8006960:	4680      	mov	r8, r0
 8006962:	b928      	cbnz	r0, 8006970 <_dtoa_r+0x8f8>
 8006964:	4b82      	ldr	r3, [pc, #520]	; (8006b70 <_dtoa_r+0xaf8>)
 8006966:	4602      	mov	r2, r0
 8006968:	f240 21ea 	movw	r1, #746	; 0x2ea
 800696c:	f7ff bb9a 	b.w	80060a4 <_dtoa_r+0x2c>
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	3202      	adds	r2, #2
 8006974:	0092      	lsls	r2, r2, #2
 8006976:	f107 010c 	add.w	r1, r7, #12
 800697a:	300c      	adds	r0, #12
 800697c:	f7fe fe74 	bl	8005668 <memcpy>
 8006980:	2201      	movs	r2, #1
 8006982:	4641      	mov	r1, r8
 8006984:	4630      	mov	r0, r6
 8006986:	f000 fb17 	bl	8006fb8 <__lshift>
 800698a:	9b00      	ldr	r3, [sp, #0]
 800698c:	3301      	adds	r3, #1
 800698e:	9305      	str	r3, [sp, #20]
 8006990:	9b00      	ldr	r3, [sp, #0]
 8006992:	4453      	add	r3, sl
 8006994:	9309      	str	r3, [sp, #36]	; 0x24
 8006996:	9b02      	ldr	r3, [sp, #8]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	46b9      	mov	r9, r7
 800699e:	9308      	str	r3, [sp, #32]
 80069a0:	4607      	mov	r7, r0
 80069a2:	9b05      	ldr	r3, [sp, #20]
 80069a4:	4621      	mov	r1, r4
 80069a6:	3b01      	subs	r3, #1
 80069a8:	4628      	mov	r0, r5
 80069aa:	9302      	str	r3, [sp, #8]
 80069ac:	f7ff fad6 	bl	8005f5c <quorem>
 80069b0:	4603      	mov	r3, r0
 80069b2:	3330      	adds	r3, #48	; 0x30
 80069b4:	9006      	str	r0, [sp, #24]
 80069b6:	4649      	mov	r1, r9
 80069b8:	4628      	mov	r0, r5
 80069ba:	930a      	str	r3, [sp, #40]	; 0x28
 80069bc:	f000 fb68 	bl	8007090 <__mcmp>
 80069c0:	463a      	mov	r2, r7
 80069c2:	4682      	mov	sl, r0
 80069c4:	4621      	mov	r1, r4
 80069c6:	4630      	mov	r0, r6
 80069c8:	f000 fb7e 	bl	80070c8 <__mdiff>
 80069cc:	68c2      	ldr	r2, [r0, #12]
 80069ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d0:	4680      	mov	r8, r0
 80069d2:	bb0a      	cbnz	r2, 8006a18 <_dtoa_r+0x9a0>
 80069d4:	4601      	mov	r1, r0
 80069d6:	4628      	mov	r0, r5
 80069d8:	f000 fb5a 	bl	8007090 <__mcmp>
 80069dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069de:	4602      	mov	r2, r0
 80069e0:	4641      	mov	r1, r8
 80069e2:	4630      	mov	r0, r6
 80069e4:	920e      	str	r2, [sp, #56]	; 0x38
 80069e6:	930a      	str	r3, [sp, #40]	; 0x28
 80069e8:	f000 f914 	bl	8006c14 <_Bfree>
 80069ec:	9b07      	ldr	r3, [sp, #28]
 80069ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80069f4:	ea43 0102 	orr.w	r1, r3, r2
 80069f8:	9b08      	ldr	r3, [sp, #32]
 80069fa:	430b      	orrs	r3, r1
 80069fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069fe:	d10d      	bne.n	8006a1c <_dtoa_r+0x9a4>
 8006a00:	2b39      	cmp	r3, #57	; 0x39
 8006a02:	d029      	beq.n	8006a58 <_dtoa_r+0x9e0>
 8006a04:	f1ba 0f00 	cmp.w	sl, #0
 8006a08:	dd01      	ble.n	8006a0e <_dtoa_r+0x996>
 8006a0a:	9b06      	ldr	r3, [sp, #24]
 8006a0c:	3331      	adds	r3, #49	; 0x31
 8006a0e:	9a02      	ldr	r2, [sp, #8]
 8006a10:	7013      	strb	r3, [r2, #0]
 8006a12:	e774      	b.n	80068fe <_dtoa_r+0x886>
 8006a14:	4638      	mov	r0, r7
 8006a16:	e7b8      	b.n	800698a <_dtoa_r+0x912>
 8006a18:	2201      	movs	r2, #1
 8006a1a:	e7e1      	b.n	80069e0 <_dtoa_r+0x968>
 8006a1c:	f1ba 0f00 	cmp.w	sl, #0
 8006a20:	db06      	blt.n	8006a30 <_dtoa_r+0x9b8>
 8006a22:	9907      	ldr	r1, [sp, #28]
 8006a24:	ea41 0a0a 	orr.w	sl, r1, sl
 8006a28:	9908      	ldr	r1, [sp, #32]
 8006a2a:	ea5a 0101 	orrs.w	r1, sl, r1
 8006a2e:	d120      	bne.n	8006a72 <_dtoa_r+0x9fa>
 8006a30:	2a00      	cmp	r2, #0
 8006a32:	ddec      	ble.n	8006a0e <_dtoa_r+0x996>
 8006a34:	4629      	mov	r1, r5
 8006a36:	2201      	movs	r2, #1
 8006a38:	4630      	mov	r0, r6
 8006a3a:	9305      	str	r3, [sp, #20]
 8006a3c:	f000 fabc 	bl	8006fb8 <__lshift>
 8006a40:	4621      	mov	r1, r4
 8006a42:	4605      	mov	r5, r0
 8006a44:	f000 fb24 	bl	8007090 <__mcmp>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	9b05      	ldr	r3, [sp, #20]
 8006a4c:	dc02      	bgt.n	8006a54 <_dtoa_r+0x9dc>
 8006a4e:	d1de      	bne.n	8006a0e <_dtoa_r+0x996>
 8006a50:	07da      	lsls	r2, r3, #31
 8006a52:	d5dc      	bpl.n	8006a0e <_dtoa_r+0x996>
 8006a54:	2b39      	cmp	r3, #57	; 0x39
 8006a56:	d1d8      	bne.n	8006a0a <_dtoa_r+0x992>
 8006a58:	9a02      	ldr	r2, [sp, #8]
 8006a5a:	2339      	movs	r3, #57	; 0x39
 8006a5c:	7013      	strb	r3, [r2, #0]
 8006a5e:	4643      	mov	r3, r8
 8006a60:	4698      	mov	r8, r3
 8006a62:	3b01      	subs	r3, #1
 8006a64:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8006a68:	2a39      	cmp	r2, #57	; 0x39
 8006a6a:	d051      	beq.n	8006b10 <_dtoa_r+0xa98>
 8006a6c:	3201      	adds	r2, #1
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	e745      	b.n	80068fe <_dtoa_r+0x886>
 8006a72:	2a00      	cmp	r2, #0
 8006a74:	dd03      	ble.n	8006a7e <_dtoa_r+0xa06>
 8006a76:	2b39      	cmp	r3, #57	; 0x39
 8006a78:	d0ee      	beq.n	8006a58 <_dtoa_r+0x9e0>
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	e7c7      	b.n	8006a0e <_dtoa_r+0x996>
 8006a7e:	9a05      	ldr	r2, [sp, #20]
 8006a80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a82:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006a86:	428a      	cmp	r2, r1
 8006a88:	d02b      	beq.n	8006ae2 <_dtoa_r+0xa6a>
 8006a8a:	4629      	mov	r1, r5
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	220a      	movs	r2, #10
 8006a90:	4630      	mov	r0, r6
 8006a92:	f000 f8e1 	bl	8006c58 <__multadd>
 8006a96:	45b9      	cmp	r9, r7
 8006a98:	4605      	mov	r5, r0
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	f04f 020a 	mov.w	r2, #10
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	d107      	bne.n	8006ab8 <_dtoa_r+0xa40>
 8006aa8:	f000 f8d6 	bl	8006c58 <__multadd>
 8006aac:	4681      	mov	r9, r0
 8006aae:	4607      	mov	r7, r0
 8006ab0:	9b05      	ldr	r3, [sp, #20]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	9305      	str	r3, [sp, #20]
 8006ab6:	e774      	b.n	80069a2 <_dtoa_r+0x92a>
 8006ab8:	f000 f8ce 	bl	8006c58 <__multadd>
 8006abc:	4639      	mov	r1, r7
 8006abe:	4681      	mov	r9, r0
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	220a      	movs	r2, #10
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f000 f8c7 	bl	8006c58 <__multadd>
 8006aca:	4607      	mov	r7, r0
 8006acc:	e7f0      	b.n	8006ab0 <_dtoa_r+0xa38>
 8006ace:	f1ba 0f00 	cmp.w	sl, #0
 8006ad2:	9a00      	ldr	r2, [sp, #0]
 8006ad4:	bfcc      	ite	gt
 8006ad6:	46d0      	movgt	r8, sl
 8006ad8:	f04f 0801 	movle.w	r8, #1
 8006adc:	4490      	add	r8, r2
 8006ade:	f04f 0900 	mov.w	r9, #0
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	9302      	str	r3, [sp, #8]
 8006aea:	f000 fa65 	bl	8006fb8 <__lshift>
 8006aee:	4621      	mov	r1, r4
 8006af0:	4605      	mov	r5, r0
 8006af2:	f000 facd 	bl	8007090 <__mcmp>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	dcb1      	bgt.n	8006a5e <_dtoa_r+0x9e6>
 8006afa:	d102      	bne.n	8006b02 <_dtoa_r+0xa8a>
 8006afc:	9b02      	ldr	r3, [sp, #8]
 8006afe:	07db      	lsls	r3, r3, #31
 8006b00:	d4ad      	bmi.n	8006a5e <_dtoa_r+0x9e6>
 8006b02:	4643      	mov	r3, r8
 8006b04:	4698      	mov	r8, r3
 8006b06:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b0a:	2a30      	cmp	r2, #48	; 0x30
 8006b0c:	d0fa      	beq.n	8006b04 <_dtoa_r+0xa8c>
 8006b0e:	e6f6      	b.n	80068fe <_dtoa_r+0x886>
 8006b10:	9a00      	ldr	r2, [sp, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d1a4      	bne.n	8006a60 <_dtoa_r+0x9e8>
 8006b16:	f10b 0b01 	add.w	fp, fp, #1
 8006b1a:	2331      	movs	r3, #49	; 0x31
 8006b1c:	e778      	b.n	8006a10 <_dtoa_r+0x998>
 8006b1e:	4b15      	ldr	r3, [pc, #84]	; (8006b74 <_dtoa_r+0xafc>)
 8006b20:	f7ff bb12 	b.w	8006148 <_dtoa_r+0xd0>
 8006b24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f47f aaee 	bne.w	8006108 <_dtoa_r+0x90>
 8006b2c:	4b12      	ldr	r3, [pc, #72]	; (8006b78 <_dtoa_r+0xb00>)
 8006b2e:	f7ff bb0b 	b.w	8006148 <_dtoa_r+0xd0>
 8006b32:	f1ba 0f00 	cmp.w	sl, #0
 8006b36:	dc03      	bgt.n	8006b40 <_dtoa_r+0xac8>
 8006b38:	9b07      	ldr	r3, [sp, #28]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	f73f aec7 	bgt.w	80068ce <_dtoa_r+0x856>
 8006b40:	f8dd 8000 	ldr.w	r8, [sp]
 8006b44:	4621      	mov	r1, r4
 8006b46:	4628      	mov	r0, r5
 8006b48:	f7ff fa08 	bl	8005f5c <quorem>
 8006b4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006b50:	f808 3b01 	strb.w	r3, [r8], #1
 8006b54:	9a00      	ldr	r2, [sp, #0]
 8006b56:	eba8 0202 	sub.w	r2, r8, r2
 8006b5a:	4592      	cmp	sl, r2
 8006b5c:	ddb7      	ble.n	8006ace <_dtoa_r+0xa56>
 8006b5e:	4629      	mov	r1, r5
 8006b60:	2300      	movs	r3, #0
 8006b62:	220a      	movs	r2, #10
 8006b64:	4630      	mov	r0, r6
 8006b66:	f000 f877 	bl	8006c58 <__multadd>
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	e7ea      	b.n	8006b44 <_dtoa_r+0xacc>
 8006b6e:	bf00      	nop
 8006b70:	08008473 	.word	0x08008473
 8006b74:	080083cc 	.word	0x080083cc
 8006b78:	080083f0 	.word	0x080083f0

08006b7c <_localeconv_r>:
 8006b7c:	4800      	ldr	r0, [pc, #0]	; (8006b80 <_localeconv_r+0x4>)
 8006b7e:	4770      	bx	lr
 8006b80:	20000194 	.word	0x20000194

08006b84 <malloc>:
 8006b84:	4b02      	ldr	r3, [pc, #8]	; (8006b90 <malloc+0xc>)
 8006b86:	4601      	mov	r1, r0
 8006b88:	6818      	ldr	r0, [r3, #0]
 8006b8a:	f000 bbe1 	b.w	8007350 <_malloc_r>
 8006b8e:	bf00      	nop
 8006b90:	20000040 	.word	0x20000040

08006b94 <_Balloc>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b98:	4604      	mov	r4, r0
 8006b9a:	460d      	mov	r5, r1
 8006b9c:	b976      	cbnz	r6, 8006bbc <_Balloc+0x28>
 8006b9e:	2010      	movs	r0, #16
 8006ba0:	f7ff fff0 	bl	8006b84 <malloc>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	6260      	str	r0, [r4, #36]	; 0x24
 8006ba8:	b920      	cbnz	r0, 8006bb4 <_Balloc+0x20>
 8006baa:	4b18      	ldr	r3, [pc, #96]	; (8006c0c <_Balloc+0x78>)
 8006bac:	4818      	ldr	r0, [pc, #96]	; (8006c10 <_Balloc+0x7c>)
 8006bae:	2166      	movs	r1, #102	; 0x66
 8006bb0:	f000 fd94 	bl	80076dc <__assert_func>
 8006bb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bb8:	6006      	str	r6, [r0, #0]
 8006bba:	60c6      	str	r6, [r0, #12]
 8006bbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006bbe:	68f3      	ldr	r3, [r6, #12]
 8006bc0:	b183      	cbz	r3, 8006be4 <_Balloc+0x50>
 8006bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bca:	b9b8      	cbnz	r0, 8006bfc <_Balloc+0x68>
 8006bcc:	2101      	movs	r1, #1
 8006bce:	fa01 f605 	lsl.w	r6, r1, r5
 8006bd2:	1d72      	adds	r2, r6, #5
 8006bd4:	0092      	lsls	r2, r2, #2
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f000 fb5a 	bl	8007290 <_calloc_r>
 8006bdc:	b160      	cbz	r0, 8006bf8 <_Balloc+0x64>
 8006bde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006be2:	e00e      	b.n	8006c02 <_Balloc+0x6e>
 8006be4:	2221      	movs	r2, #33	; 0x21
 8006be6:	2104      	movs	r1, #4
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 fb51 	bl	8007290 <_calloc_r>
 8006bee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bf0:	60f0      	str	r0, [r6, #12]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e4      	bne.n	8006bc2 <_Balloc+0x2e>
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	bd70      	pop	{r4, r5, r6, pc}
 8006bfc:	6802      	ldr	r2, [r0, #0]
 8006bfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c02:	2300      	movs	r3, #0
 8006c04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c08:	e7f7      	b.n	8006bfa <_Balloc+0x66>
 8006c0a:	bf00      	nop
 8006c0c:	080083fd 	.word	0x080083fd
 8006c10:	08008484 	.word	0x08008484

08006c14 <_Bfree>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c18:	4605      	mov	r5, r0
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	b976      	cbnz	r6, 8006c3c <_Bfree+0x28>
 8006c1e:	2010      	movs	r0, #16
 8006c20:	f7ff ffb0 	bl	8006b84 <malloc>
 8006c24:	4602      	mov	r2, r0
 8006c26:	6268      	str	r0, [r5, #36]	; 0x24
 8006c28:	b920      	cbnz	r0, 8006c34 <_Bfree+0x20>
 8006c2a:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <_Bfree+0x3c>)
 8006c2c:	4809      	ldr	r0, [pc, #36]	; (8006c54 <_Bfree+0x40>)
 8006c2e:	218a      	movs	r1, #138	; 0x8a
 8006c30:	f000 fd54 	bl	80076dc <__assert_func>
 8006c34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c38:	6006      	str	r6, [r0, #0]
 8006c3a:	60c6      	str	r6, [r0, #12]
 8006c3c:	b13c      	cbz	r4, 8006c4e <_Bfree+0x3a>
 8006c3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c40:	6862      	ldr	r2, [r4, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c48:	6021      	str	r1, [r4, #0]
 8006c4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	080083fd 	.word	0x080083fd
 8006c54:	08008484 	.word	0x08008484

08006c58 <__multadd>:
 8006c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5c:	690e      	ldr	r6, [r1, #16]
 8006c5e:	4607      	mov	r7, r0
 8006c60:	4698      	mov	r8, r3
 8006c62:	460c      	mov	r4, r1
 8006c64:	f101 0014 	add.w	r0, r1, #20
 8006c68:	2300      	movs	r3, #0
 8006c6a:	6805      	ldr	r5, [r0, #0]
 8006c6c:	b2a9      	uxth	r1, r5
 8006c6e:	fb02 8101 	mla	r1, r2, r1, r8
 8006c72:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006c76:	0c2d      	lsrs	r5, r5, #16
 8006c78:	fb02 c505 	mla	r5, r2, r5, ip
 8006c7c:	b289      	uxth	r1, r1
 8006c7e:	3301      	adds	r3, #1
 8006c80:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006c84:	429e      	cmp	r6, r3
 8006c86:	f840 1b04 	str.w	r1, [r0], #4
 8006c8a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006c8e:	dcec      	bgt.n	8006c6a <__multadd+0x12>
 8006c90:	f1b8 0f00 	cmp.w	r8, #0
 8006c94:	d022      	beq.n	8006cdc <__multadd+0x84>
 8006c96:	68a3      	ldr	r3, [r4, #8]
 8006c98:	42b3      	cmp	r3, r6
 8006c9a:	dc19      	bgt.n	8006cd0 <__multadd+0x78>
 8006c9c:	6861      	ldr	r1, [r4, #4]
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	3101      	adds	r1, #1
 8006ca2:	f7ff ff77 	bl	8006b94 <_Balloc>
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	b928      	cbnz	r0, 8006cb6 <__multadd+0x5e>
 8006caa:	4602      	mov	r2, r0
 8006cac:	4b0d      	ldr	r3, [pc, #52]	; (8006ce4 <__multadd+0x8c>)
 8006cae:	480e      	ldr	r0, [pc, #56]	; (8006ce8 <__multadd+0x90>)
 8006cb0:	21b5      	movs	r1, #181	; 0xb5
 8006cb2:	f000 fd13 	bl	80076dc <__assert_func>
 8006cb6:	6922      	ldr	r2, [r4, #16]
 8006cb8:	3202      	adds	r2, #2
 8006cba:	f104 010c 	add.w	r1, r4, #12
 8006cbe:	0092      	lsls	r2, r2, #2
 8006cc0:	300c      	adds	r0, #12
 8006cc2:	f7fe fcd1 	bl	8005668 <memcpy>
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	4638      	mov	r0, r7
 8006cca:	f7ff ffa3 	bl	8006c14 <_Bfree>
 8006cce:	462c      	mov	r4, r5
 8006cd0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006cd4:	3601      	adds	r6, #1
 8006cd6:	f8c3 8014 	str.w	r8, [r3, #20]
 8006cda:	6126      	str	r6, [r4, #16]
 8006cdc:	4620      	mov	r0, r4
 8006cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ce2:	bf00      	nop
 8006ce4:	08008473 	.word	0x08008473
 8006ce8:	08008484 	.word	0x08008484

08006cec <__hi0bits>:
 8006cec:	0c03      	lsrs	r3, r0, #16
 8006cee:	041b      	lsls	r3, r3, #16
 8006cf0:	b9d3      	cbnz	r3, 8006d28 <__hi0bits+0x3c>
 8006cf2:	0400      	lsls	r0, r0, #16
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006cfa:	bf04      	itt	eq
 8006cfc:	0200      	lsleq	r0, r0, #8
 8006cfe:	3308      	addeq	r3, #8
 8006d00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d04:	bf04      	itt	eq
 8006d06:	0100      	lsleq	r0, r0, #4
 8006d08:	3304      	addeq	r3, #4
 8006d0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d0e:	bf04      	itt	eq
 8006d10:	0080      	lsleq	r0, r0, #2
 8006d12:	3302      	addeq	r3, #2
 8006d14:	2800      	cmp	r0, #0
 8006d16:	db05      	blt.n	8006d24 <__hi0bits+0x38>
 8006d18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d1c:	f103 0301 	add.w	r3, r3, #1
 8006d20:	bf08      	it	eq
 8006d22:	2320      	moveq	r3, #32
 8006d24:	4618      	mov	r0, r3
 8006d26:	4770      	bx	lr
 8006d28:	2300      	movs	r3, #0
 8006d2a:	e7e4      	b.n	8006cf6 <__hi0bits+0xa>

08006d2c <__lo0bits>:
 8006d2c:	6803      	ldr	r3, [r0, #0]
 8006d2e:	f013 0207 	ands.w	r2, r3, #7
 8006d32:	4601      	mov	r1, r0
 8006d34:	d00b      	beq.n	8006d4e <__lo0bits+0x22>
 8006d36:	07da      	lsls	r2, r3, #31
 8006d38:	d424      	bmi.n	8006d84 <__lo0bits+0x58>
 8006d3a:	0798      	lsls	r0, r3, #30
 8006d3c:	bf49      	itett	mi
 8006d3e:	085b      	lsrmi	r3, r3, #1
 8006d40:	089b      	lsrpl	r3, r3, #2
 8006d42:	2001      	movmi	r0, #1
 8006d44:	600b      	strmi	r3, [r1, #0]
 8006d46:	bf5c      	itt	pl
 8006d48:	600b      	strpl	r3, [r1, #0]
 8006d4a:	2002      	movpl	r0, #2
 8006d4c:	4770      	bx	lr
 8006d4e:	b298      	uxth	r0, r3
 8006d50:	b9b0      	cbnz	r0, 8006d80 <__lo0bits+0x54>
 8006d52:	0c1b      	lsrs	r3, r3, #16
 8006d54:	2010      	movs	r0, #16
 8006d56:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006d5a:	bf04      	itt	eq
 8006d5c:	0a1b      	lsreq	r3, r3, #8
 8006d5e:	3008      	addeq	r0, #8
 8006d60:	071a      	lsls	r2, r3, #28
 8006d62:	bf04      	itt	eq
 8006d64:	091b      	lsreq	r3, r3, #4
 8006d66:	3004      	addeq	r0, #4
 8006d68:	079a      	lsls	r2, r3, #30
 8006d6a:	bf04      	itt	eq
 8006d6c:	089b      	lsreq	r3, r3, #2
 8006d6e:	3002      	addeq	r0, #2
 8006d70:	07da      	lsls	r2, r3, #31
 8006d72:	d403      	bmi.n	8006d7c <__lo0bits+0x50>
 8006d74:	085b      	lsrs	r3, r3, #1
 8006d76:	f100 0001 	add.w	r0, r0, #1
 8006d7a:	d005      	beq.n	8006d88 <__lo0bits+0x5c>
 8006d7c:	600b      	str	r3, [r1, #0]
 8006d7e:	4770      	bx	lr
 8006d80:	4610      	mov	r0, r2
 8006d82:	e7e8      	b.n	8006d56 <__lo0bits+0x2a>
 8006d84:	2000      	movs	r0, #0
 8006d86:	4770      	bx	lr
 8006d88:	2020      	movs	r0, #32
 8006d8a:	4770      	bx	lr

08006d8c <__i2b>:
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	460c      	mov	r4, r1
 8006d90:	2101      	movs	r1, #1
 8006d92:	f7ff feff 	bl	8006b94 <_Balloc>
 8006d96:	4602      	mov	r2, r0
 8006d98:	b928      	cbnz	r0, 8006da6 <__i2b+0x1a>
 8006d9a:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <__i2b+0x24>)
 8006d9c:	4805      	ldr	r0, [pc, #20]	; (8006db4 <__i2b+0x28>)
 8006d9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006da2:	f000 fc9b 	bl	80076dc <__assert_func>
 8006da6:	2301      	movs	r3, #1
 8006da8:	6144      	str	r4, [r0, #20]
 8006daa:	6103      	str	r3, [r0, #16]
 8006dac:	bd10      	pop	{r4, pc}
 8006dae:	bf00      	nop
 8006db0:	08008473 	.word	0x08008473
 8006db4:	08008484 	.word	0x08008484

08006db8 <__multiply>:
 8006db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dbc:	4614      	mov	r4, r2
 8006dbe:	690a      	ldr	r2, [r1, #16]
 8006dc0:	6923      	ldr	r3, [r4, #16]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	bfb8      	it	lt
 8006dc6:	460b      	movlt	r3, r1
 8006dc8:	460d      	mov	r5, r1
 8006dca:	bfbc      	itt	lt
 8006dcc:	4625      	movlt	r5, r4
 8006dce:	461c      	movlt	r4, r3
 8006dd0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006dd4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006dd8:	68ab      	ldr	r3, [r5, #8]
 8006dda:	6869      	ldr	r1, [r5, #4]
 8006ddc:	eb0a 0709 	add.w	r7, sl, r9
 8006de0:	42bb      	cmp	r3, r7
 8006de2:	b085      	sub	sp, #20
 8006de4:	bfb8      	it	lt
 8006de6:	3101      	addlt	r1, #1
 8006de8:	f7ff fed4 	bl	8006b94 <_Balloc>
 8006dec:	b930      	cbnz	r0, 8006dfc <__multiply+0x44>
 8006dee:	4602      	mov	r2, r0
 8006df0:	4b42      	ldr	r3, [pc, #264]	; (8006efc <__multiply+0x144>)
 8006df2:	4843      	ldr	r0, [pc, #268]	; (8006f00 <__multiply+0x148>)
 8006df4:	f240 115d 	movw	r1, #349	; 0x15d
 8006df8:	f000 fc70 	bl	80076dc <__assert_func>
 8006dfc:	f100 0614 	add.w	r6, r0, #20
 8006e00:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006e04:	4633      	mov	r3, r6
 8006e06:	2200      	movs	r2, #0
 8006e08:	4543      	cmp	r3, r8
 8006e0a:	d31e      	bcc.n	8006e4a <__multiply+0x92>
 8006e0c:	f105 0c14 	add.w	ip, r5, #20
 8006e10:	f104 0314 	add.w	r3, r4, #20
 8006e14:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006e18:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006e1c:	9202      	str	r2, [sp, #8]
 8006e1e:	ebac 0205 	sub.w	r2, ip, r5
 8006e22:	3a15      	subs	r2, #21
 8006e24:	f022 0203 	bic.w	r2, r2, #3
 8006e28:	3204      	adds	r2, #4
 8006e2a:	f105 0115 	add.w	r1, r5, #21
 8006e2e:	458c      	cmp	ip, r1
 8006e30:	bf38      	it	cc
 8006e32:	2204      	movcc	r2, #4
 8006e34:	9201      	str	r2, [sp, #4]
 8006e36:	9a02      	ldr	r2, [sp, #8]
 8006e38:	9303      	str	r3, [sp, #12]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d808      	bhi.n	8006e50 <__multiply+0x98>
 8006e3e:	2f00      	cmp	r7, #0
 8006e40:	dc55      	bgt.n	8006eee <__multiply+0x136>
 8006e42:	6107      	str	r7, [r0, #16]
 8006e44:	b005      	add	sp, #20
 8006e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4a:	f843 2b04 	str.w	r2, [r3], #4
 8006e4e:	e7db      	b.n	8006e08 <__multiply+0x50>
 8006e50:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e54:	f1ba 0f00 	cmp.w	sl, #0
 8006e58:	d020      	beq.n	8006e9c <__multiply+0xe4>
 8006e5a:	f105 0e14 	add.w	lr, r5, #20
 8006e5e:	46b1      	mov	r9, r6
 8006e60:	2200      	movs	r2, #0
 8006e62:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006e66:	f8d9 b000 	ldr.w	fp, [r9]
 8006e6a:	b2a1      	uxth	r1, r4
 8006e6c:	fa1f fb8b 	uxth.w	fp, fp
 8006e70:	fb0a b101 	mla	r1, sl, r1, fp
 8006e74:	4411      	add	r1, r2
 8006e76:	f8d9 2000 	ldr.w	r2, [r9]
 8006e7a:	0c24      	lsrs	r4, r4, #16
 8006e7c:	0c12      	lsrs	r2, r2, #16
 8006e7e:	fb0a 2404 	mla	r4, sl, r4, r2
 8006e82:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006e86:	b289      	uxth	r1, r1
 8006e88:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006e8c:	45f4      	cmp	ip, lr
 8006e8e:	f849 1b04 	str.w	r1, [r9], #4
 8006e92:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006e96:	d8e4      	bhi.n	8006e62 <__multiply+0xaa>
 8006e98:	9901      	ldr	r1, [sp, #4]
 8006e9a:	5072      	str	r2, [r6, r1]
 8006e9c:	9a03      	ldr	r2, [sp, #12]
 8006e9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	f1b9 0f00 	cmp.w	r9, #0
 8006ea8:	d01f      	beq.n	8006eea <__multiply+0x132>
 8006eaa:	6834      	ldr	r4, [r6, #0]
 8006eac:	f105 0114 	add.w	r1, r5, #20
 8006eb0:	46b6      	mov	lr, r6
 8006eb2:	f04f 0a00 	mov.w	sl, #0
 8006eb6:	880a      	ldrh	r2, [r1, #0]
 8006eb8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006ebc:	fb09 b202 	mla	r2, r9, r2, fp
 8006ec0:	4492      	add	sl, r2
 8006ec2:	b2a4      	uxth	r4, r4
 8006ec4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006ec8:	f84e 4b04 	str.w	r4, [lr], #4
 8006ecc:	f851 4b04 	ldr.w	r4, [r1], #4
 8006ed0:	f8be 2000 	ldrh.w	r2, [lr]
 8006ed4:	0c24      	lsrs	r4, r4, #16
 8006ed6:	fb09 2404 	mla	r4, r9, r4, r2
 8006eda:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006ede:	458c      	cmp	ip, r1
 8006ee0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006ee4:	d8e7      	bhi.n	8006eb6 <__multiply+0xfe>
 8006ee6:	9a01      	ldr	r2, [sp, #4]
 8006ee8:	50b4      	str	r4, [r6, r2]
 8006eea:	3604      	adds	r6, #4
 8006eec:	e7a3      	b.n	8006e36 <__multiply+0x7e>
 8006eee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1a5      	bne.n	8006e42 <__multiply+0x8a>
 8006ef6:	3f01      	subs	r7, #1
 8006ef8:	e7a1      	b.n	8006e3e <__multiply+0x86>
 8006efa:	bf00      	nop
 8006efc:	08008473 	.word	0x08008473
 8006f00:	08008484 	.word	0x08008484

08006f04 <__pow5mult>:
 8006f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f08:	4615      	mov	r5, r2
 8006f0a:	f012 0203 	ands.w	r2, r2, #3
 8006f0e:	4606      	mov	r6, r0
 8006f10:	460f      	mov	r7, r1
 8006f12:	d007      	beq.n	8006f24 <__pow5mult+0x20>
 8006f14:	4c25      	ldr	r4, [pc, #148]	; (8006fac <__pow5mult+0xa8>)
 8006f16:	3a01      	subs	r2, #1
 8006f18:	2300      	movs	r3, #0
 8006f1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f1e:	f7ff fe9b 	bl	8006c58 <__multadd>
 8006f22:	4607      	mov	r7, r0
 8006f24:	10ad      	asrs	r5, r5, #2
 8006f26:	d03d      	beq.n	8006fa4 <__pow5mult+0xa0>
 8006f28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f2a:	b97c      	cbnz	r4, 8006f4c <__pow5mult+0x48>
 8006f2c:	2010      	movs	r0, #16
 8006f2e:	f7ff fe29 	bl	8006b84 <malloc>
 8006f32:	4602      	mov	r2, r0
 8006f34:	6270      	str	r0, [r6, #36]	; 0x24
 8006f36:	b928      	cbnz	r0, 8006f44 <__pow5mult+0x40>
 8006f38:	4b1d      	ldr	r3, [pc, #116]	; (8006fb0 <__pow5mult+0xac>)
 8006f3a:	481e      	ldr	r0, [pc, #120]	; (8006fb4 <__pow5mult+0xb0>)
 8006f3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f40:	f000 fbcc 	bl	80076dc <__assert_func>
 8006f44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f48:	6004      	str	r4, [r0, #0]
 8006f4a:	60c4      	str	r4, [r0, #12]
 8006f4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f54:	b94c      	cbnz	r4, 8006f6a <__pow5mult+0x66>
 8006f56:	f240 2171 	movw	r1, #625	; 0x271
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f7ff ff16 	bl	8006d8c <__i2b>
 8006f60:	2300      	movs	r3, #0
 8006f62:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f66:	4604      	mov	r4, r0
 8006f68:	6003      	str	r3, [r0, #0]
 8006f6a:	f04f 0900 	mov.w	r9, #0
 8006f6e:	07eb      	lsls	r3, r5, #31
 8006f70:	d50a      	bpl.n	8006f88 <__pow5mult+0x84>
 8006f72:	4639      	mov	r1, r7
 8006f74:	4622      	mov	r2, r4
 8006f76:	4630      	mov	r0, r6
 8006f78:	f7ff ff1e 	bl	8006db8 <__multiply>
 8006f7c:	4639      	mov	r1, r7
 8006f7e:	4680      	mov	r8, r0
 8006f80:	4630      	mov	r0, r6
 8006f82:	f7ff fe47 	bl	8006c14 <_Bfree>
 8006f86:	4647      	mov	r7, r8
 8006f88:	106d      	asrs	r5, r5, #1
 8006f8a:	d00b      	beq.n	8006fa4 <__pow5mult+0xa0>
 8006f8c:	6820      	ldr	r0, [r4, #0]
 8006f8e:	b938      	cbnz	r0, 8006fa0 <__pow5mult+0x9c>
 8006f90:	4622      	mov	r2, r4
 8006f92:	4621      	mov	r1, r4
 8006f94:	4630      	mov	r0, r6
 8006f96:	f7ff ff0f 	bl	8006db8 <__multiply>
 8006f9a:	6020      	str	r0, [r4, #0]
 8006f9c:	f8c0 9000 	str.w	r9, [r0]
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	e7e4      	b.n	8006f6e <__pow5mult+0x6a>
 8006fa4:	4638      	mov	r0, r7
 8006fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006faa:	bf00      	nop
 8006fac:	080085d8 	.word	0x080085d8
 8006fb0:	080083fd 	.word	0x080083fd
 8006fb4:	08008484 	.word	0x08008484

08006fb8 <__lshift>:
 8006fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	6849      	ldr	r1, [r1, #4]
 8006fc0:	6923      	ldr	r3, [r4, #16]
 8006fc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006fc6:	68a3      	ldr	r3, [r4, #8]
 8006fc8:	4607      	mov	r7, r0
 8006fca:	4691      	mov	r9, r2
 8006fcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fd0:	f108 0601 	add.w	r6, r8, #1
 8006fd4:	42b3      	cmp	r3, r6
 8006fd6:	db0b      	blt.n	8006ff0 <__lshift+0x38>
 8006fd8:	4638      	mov	r0, r7
 8006fda:	f7ff fddb 	bl	8006b94 <_Balloc>
 8006fde:	4605      	mov	r5, r0
 8006fe0:	b948      	cbnz	r0, 8006ff6 <__lshift+0x3e>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	4b28      	ldr	r3, [pc, #160]	; (8007088 <__lshift+0xd0>)
 8006fe6:	4829      	ldr	r0, [pc, #164]	; (800708c <__lshift+0xd4>)
 8006fe8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006fec:	f000 fb76 	bl	80076dc <__assert_func>
 8006ff0:	3101      	adds	r1, #1
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	e7ee      	b.n	8006fd4 <__lshift+0x1c>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	f100 0114 	add.w	r1, r0, #20
 8006ffc:	f100 0210 	add.w	r2, r0, #16
 8007000:	4618      	mov	r0, r3
 8007002:	4553      	cmp	r3, sl
 8007004:	db33      	blt.n	800706e <__lshift+0xb6>
 8007006:	6920      	ldr	r0, [r4, #16]
 8007008:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800700c:	f104 0314 	add.w	r3, r4, #20
 8007010:	f019 091f 	ands.w	r9, r9, #31
 8007014:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007018:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800701c:	d02b      	beq.n	8007076 <__lshift+0xbe>
 800701e:	f1c9 0e20 	rsb	lr, r9, #32
 8007022:	468a      	mov	sl, r1
 8007024:	2200      	movs	r2, #0
 8007026:	6818      	ldr	r0, [r3, #0]
 8007028:	fa00 f009 	lsl.w	r0, r0, r9
 800702c:	4302      	orrs	r2, r0
 800702e:	f84a 2b04 	str.w	r2, [sl], #4
 8007032:	f853 2b04 	ldr.w	r2, [r3], #4
 8007036:	459c      	cmp	ip, r3
 8007038:	fa22 f20e 	lsr.w	r2, r2, lr
 800703c:	d8f3      	bhi.n	8007026 <__lshift+0x6e>
 800703e:	ebac 0304 	sub.w	r3, ip, r4
 8007042:	3b15      	subs	r3, #21
 8007044:	f023 0303 	bic.w	r3, r3, #3
 8007048:	3304      	adds	r3, #4
 800704a:	f104 0015 	add.w	r0, r4, #21
 800704e:	4584      	cmp	ip, r0
 8007050:	bf38      	it	cc
 8007052:	2304      	movcc	r3, #4
 8007054:	50ca      	str	r2, [r1, r3]
 8007056:	b10a      	cbz	r2, 800705c <__lshift+0xa4>
 8007058:	f108 0602 	add.w	r6, r8, #2
 800705c:	3e01      	subs	r6, #1
 800705e:	4638      	mov	r0, r7
 8007060:	612e      	str	r6, [r5, #16]
 8007062:	4621      	mov	r1, r4
 8007064:	f7ff fdd6 	bl	8006c14 <_Bfree>
 8007068:	4628      	mov	r0, r5
 800706a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800706e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007072:	3301      	adds	r3, #1
 8007074:	e7c5      	b.n	8007002 <__lshift+0x4a>
 8007076:	3904      	subs	r1, #4
 8007078:	f853 2b04 	ldr.w	r2, [r3], #4
 800707c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007080:	459c      	cmp	ip, r3
 8007082:	d8f9      	bhi.n	8007078 <__lshift+0xc0>
 8007084:	e7ea      	b.n	800705c <__lshift+0xa4>
 8007086:	bf00      	nop
 8007088:	08008473 	.word	0x08008473
 800708c:	08008484 	.word	0x08008484

08007090 <__mcmp>:
 8007090:	b530      	push	{r4, r5, lr}
 8007092:	6902      	ldr	r2, [r0, #16]
 8007094:	690c      	ldr	r4, [r1, #16]
 8007096:	1b12      	subs	r2, r2, r4
 8007098:	d10e      	bne.n	80070b8 <__mcmp+0x28>
 800709a:	f100 0314 	add.w	r3, r0, #20
 800709e:	3114      	adds	r1, #20
 80070a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80070a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80070a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80070ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80070b0:	42a5      	cmp	r5, r4
 80070b2:	d003      	beq.n	80070bc <__mcmp+0x2c>
 80070b4:	d305      	bcc.n	80070c2 <__mcmp+0x32>
 80070b6:	2201      	movs	r2, #1
 80070b8:	4610      	mov	r0, r2
 80070ba:	bd30      	pop	{r4, r5, pc}
 80070bc:	4283      	cmp	r3, r0
 80070be:	d3f3      	bcc.n	80070a8 <__mcmp+0x18>
 80070c0:	e7fa      	b.n	80070b8 <__mcmp+0x28>
 80070c2:	f04f 32ff 	mov.w	r2, #4294967295
 80070c6:	e7f7      	b.n	80070b8 <__mcmp+0x28>

080070c8 <__mdiff>:
 80070c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070cc:	460c      	mov	r4, r1
 80070ce:	4606      	mov	r6, r0
 80070d0:	4611      	mov	r1, r2
 80070d2:	4620      	mov	r0, r4
 80070d4:	4617      	mov	r7, r2
 80070d6:	f7ff ffdb 	bl	8007090 <__mcmp>
 80070da:	1e05      	subs	r5, r0, #0
 80070dc:	d110      	bne.n	8007100 <__mdiff+0x38>
 80070de:	4629      	mov	r1, r5
 80070e0:	4630      	mov	r0, r6
 80070e2:	f7ff fd57 	bl	8006b94 <_Balloc>
 80070e6:	b930      	cbnz	r0, 80070f6 <__mdiff+0x2e>
 80070e8:	4b39      	ldr	r3, [pc, #228]	; (80071d0 <__mdiff+0x108>)
 80070ea:	4602      	mov	r2, r0
 80070ec:	f240 2132 	movw	r1, #562	; 0x232
 80070f0:	4838      	ldr	r0, [pc, #224]	; (80071d4 <__mdiff+0x10c>)
 80070f2:	f000 faf3 	bl	80076dc <__assert_func>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007100:	bfa4      	itt	ge
 8007102:	463b      	movge	r3, r7
 8007104:	4627      	movge	r7, r4
 8007106:	4630      	mov	r0, r6
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	bfa6      	itte	ge
 800710c:	461c      	movge	r4, r3
 800710e:	2500      	movge	r5, #0
 8007110:	2501      	movlt	r5, #1
 8007112:	f7ff fd3f 	bl	8006b94 <_Balloc>
 8007116:	b920      	cbnz	r0, 8007122 <__mdiff+0x5a>
 8007118:	4b2d      	ldr	r3, [pc, #180]	; (80071d0 <__mdiff+0x108>)
 800711a:	4602      	mov	r2, r0
 800711c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007120:	e7e6      	b.n	80070f0 <__mdiff+0x28>
 8007122:	693e      	ldr	r6, [r7, #16]
 8007124:	60c5      	str	r5, [r0, #12]
 8007126:	6925      	ldr	r5, [r4, #16]
 8007128:	f107 0114 	add.w	r1, r7, #20
 800712c:	f104 0914 	add.w	r9, r4, #20
 8007130:	f100 0e14 	add.w	lr, r0, #20
 8007134:	f107 0210 	add.w	r2, r7, #16
 8007138:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800713c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007140:	46f2      	mov	sl, lr
 8007142:	2700      	movs	r7, #0
 8007144:	f859 3b04 	ldr.w	r3, [r9], #4
 8007148:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800714c:	fa1f f883 	uxth.w	r8, r3
 8007150:	fa17 f78b 	uxtah	r7, r7, fp
 8007154:	0c1b      	lsrs	r3, r3, #16
 8007156:	eba7 0808 	sub.w	r8, r7, r8
 800715a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800715e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007162:	fa1f f888 	uxth.w	r8, r8
 8007166:	141f      	asrs	r7, r3, #16
 8007168:	454d      	cmp	r5, r9
 800716a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800716e:	f84a 3b04 	str.w	r3, [sl], #4
 8007172:	d8e7      	bhi.n	8007144 <__mdiff+0x7c>
 8007174:	1b2b      	subs	r3, r5, r4
 8007176:	3b15      	subs	r3, #21
 8007178:	f023 0303 	bic.w	r3, r3, #3
 800717c:	3304      	adds	r3, #4
 800717e:	3415      	adds	r4, #21
 8007180:	42a5      	cmp	r5, r4
 8007182:	bf38      	it	cc
 8007184:	2304      	movcc	r3, #4
 8007186:	4419      	add	r1, r3
 8007188:	4473      	add	r3, lr
 800718a:	469e      	mov	lr, r3
 800718c:	460d      	mov	r5, r1
 800718e:	4565      	cmp	r5, ip
 8007190:	d30e      	bcc.n	80071b0 <__mdiff+0xe8>
 8007192:	f10c 0203 	add.w	r2, ip, #3
 8007196:	1a52      	subs	r2, r2, r1
 8007198:	f022 0203 	bic.w	r2, r2, #3
 800719c:	3903      	subs	r1, #3
 800719e:	458c      	cmp	ip, r1
 80071a0:	bf38      	it	cc
 80071a2:	2200      	movcc	r2, #0
 80071a4:	441a      	add	r2, r3
 80071a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80071aa:	b17b      	cbz	r3, 80071cc <__mdiff+0x104>
 80071ac:	6106      	str	r6, [r0, #16]
 80071ae:	e7a5      	b.n	80070fc <__mdiff+0x34>
 80071b0:	f855 8b04 	ldr.w	r8, [r5], #4
 80071b4:	fa17 f488 	uxtah	r4, r7, r8
 80071b8:	1422      	asrs	r2, r4, #16
 80071ba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80071be:	b2a4      	uxth	r4, r4
 80071c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80071c4:	f84e 4b04 	str.w	r4, [lr], #4
 80071c8:	1417      	asrs	r7, r2, #16
 80071ca:	e7e0      	b.n	800718e <__mdiff+0xc6>
 80071cc:	3e01      	subs	r6, #1
 80071ce:	e7ea      	b.n	80071a6 <__mdiff+0xde>
 80071d0:	08008473 	.word	0x08008473
 80071d4:	08008484 	.word	0x08008484

080071d8 <__d2b>:
 80071d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80071dc:	4689      	mov	r9, r1
 80071de:	2101      	movs	r1, #1
 80071e0:	ec57 6b10 	vmov	r6, r7, d0
 80071e4:	4690      	mov	r8, r2
 80071e6:	f7ff fcd5 	bl	8006b94 <_Balloc>
 80071ea:	4604      	mov	r4, r0
 80071ec:	b930      	cbnz	r0, 80071fc <__d2b+0x24>
 80071ee:	4602      	mov	r2, r0
 80071f0:	4b25      	ldr	r3, [pc, #148]	; (8007288 <__d2b+0xb0>)
 80071f2:	4826      	ldr	r0, [pc, #152]	; (800728c <__d2b+0xb4>)
 80071f4:	f240 310a 	movw	r1, #778	; 0x30a
 80071f8:	f000 fa70 	bl	80076dc <__assert_func>
 80071fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007200:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007204:	bb35      	cbnz	r5, 8007254 <__d2b+0x7c>
 8007206:	2e00      	cmp	r6, #0
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	d028      	beq.n	800725e <__d2b+0x86>
 800720c:	4668      	mov	r0, sp
 800720e:	9600      	str	r6, [sp, #0]
 8007210:	f7ff fd8c 	bl	8006d2c <__lo0bits>
 8007214:	9900      	ldr	r1, [sp, #0]
 8007216:	b300      	cbz	r0, 800725a <__d2b+0x82>
 8007218:	9a01      	ldr	r2, [sp, #4]
 800721a:	f1c0 0320 	rsb	r3, r0, #32
 800721e:	fa02 f303 	lsl.w	r3, r2, r3
 8007222:	430b      	orrs	r3, r1
 8007224:	40c2      	lsrs	r2, r0
 8007226:	6163      	str	r3, [r4, #20]
 8007228:	9201      	str	r2, [sp, #4]
 800722a:	9b01      	ldr	r3, [sp, #4]
 800722c:	61a3      	str	r3, [r4, #24]
 800722e:	2b00      	cmp	r3, #0
 8007230:	bf14      	ite	ne
 8007232:	2202      	movne	r2, #2
 8007234:	2201      	moveq	r2, #1
 8007236:	6122      	str	r2, [r4, #16]
 8007238:	b1d5      	cbz	r5, 8007270 <__d2b+0x98>
 800723a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800723e:	4405      	add	r5, r0
 8007240:	f8c9 5000 	str.w	r5, [r9]
 8007244:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007248:	f8c8 0000 	str.w	r0, [r8]
 800724c:	4620      	mov	r0, r4
 800724e:	b003      	add	sp, #12
 8007250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007258:	e7d5      	b.n	8007206 <__d2b+0x2e>
 800725a:	6161      	str	r1, [r4, #20]
 800725c:	e7e5      	b.n	800722a <__d2b+0x52>
 800725e:	a801      	add	r0, sp, #4
 8007260:	f7ff fd64 	bl	8006d2c <__lo0bits>
 8007264:	9b01      	ldr	r3, [sp, #4]
 8007266:	6163      	str	r3, [r4, #20]
 8007268:	2201      	movs	r2, #1
 800726a:	6122      	str	r2, [r4, #16]
 800726c:	3020      	adds	r0, #32
 800726e:	e7e3      	b.n	8007238 <__d2b+0x60>
 8007270:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007274:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007278:	f8c9 0000 	str.w	r0, [r9]
 800727c:	6918      	ldr	r0, [r3, #16]
 800727e:	f7ff fd35 	bl	8006cec <__hi0bits>
 8007282:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007286:	e7df      	b.n	8007248 <__d2b+0x70>
 8007288:	08008473 	.word	0x08008473
 800728c:	08008484 	.word	0x08008484

08007290 <_calloc_r>:
 8007290:	b513      	push	{r0, r1, r4, lr}
 8007292:	434a      	muls	r2, r1
 8007294:	4611      	mov	r1, r2
 8007296:	9201      	str	r2, [sp, #4]
 8007298:	f000 f85a 	bl	8007350 <_malloc_r>
 800729c:	4604      	mov	r4, r0
 800729e:	b118      	cbz	r0, 80072a8 <_calloc_r+0x18>
 80072a0:	9a01      	ldr	r2, [sp, #4]
 80072a2:	2100      	movs	r1, #0
 80072a4:	f7fe f9ee 	bl	8005684 <memset>
 80072a8:	4620      	mov	r0, r4
 80072aa:	b002      	add	sp, #8
 80072ac:	bd10      	pop	{r4, pc}
	...

080072b0 <_free_r>:
 80072b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072b2:	2900      	cmp	r1, #0
 80072b4:	d048      	beq.n	8007348 <_free_r+0x98>
 80072b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ba:	9001      	str	r0, [sp, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f1a1 0404 	sub.w	r4, r1, #4
 80072c2:	bfb8      	it	lt
 80072c4:	18e4      	addlt	r4, r4, r3
 80072c6:	f000 fa65 	bl	8007794 <__malloc_lock>
 80072ca:	4a20      	ldr	r2, [pc, #128]	; (800734c <_free_r+0x9c>)
 80072cc:	9801      	ldr	r0, [sp, #4]
 80072ce:	6813      	ldr	r3, [r2, #0]
 80072d0:	4615      	mov	r5, r2
 80072d2:	b933      	cbnz	r3, 80072e2 <_free_r+0x32>
 80072d4:	6063      	str	r3, [r4, #4]
 80072d6:	6014      	str	r4, [r2, #0]
 80072d8:	b003      	add	sp, #12
 80072da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072de:	f000 ba5f 	b.w	80077a0 <__malloc_unlock>
 80072e2:	42a3      	cmp	r3, r4
 80072e4:	d90b      	bls.n	80072fe <_free_r+0x4e>
 80072e6:	6821      	ldr	r1, [r4, #0]
 80072e8:	1862      	adds	r2, r4, r1
 80072ea:	4293      	cmp	r3, r2
 80072ec:	bf04      	itt	eq
 80072ee:	681a      	ldreq	r2, [r3, #0]
 80072f0:	685b      	ldreq	r3, [r3, #4]
 80072f2:	6063      	str	r3, [r4, #4]
 80072f4:	bf04      	itt	eq
 80072f6:	1852      	addeq	r2, r2, r1
 80072f8:	6022      	streq	r2, [r4, #0]
 80072fa:	602c      	str	r4, [r5, #0]
 80072fc:	e7ec      	b.n	80072d8 <_free_r+0x28>
 80072fe:	461a      	mov	r2, r3
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	b10b      	cbz	r3, 8007308 <_free_r+0x58>
 8007304:	42a3      	cmp	r3, r4
 8007306:	d9fa      	bls.n	80072fe <_free_r+0x4e>
 8007308:	6811      	ldr	r1, [r2, #0]
 800730a:	1855      	adds	r5, r2, r1
 800730c:	42a5      	cmp	r5, r4
 800730e:	d10b      	bne.n	8007328 <_free_r+0x78>
 8007310:	6824      	ldr	r4, [r4, #0]
 8007312:	4421      	add	r1, r4
 8007314:	1854      	adds	r4, r2, r1
 8007316:	42a3      	cmp	r3, r4
 8007318:	6011      	str	r1, [r2, #0]
 800731a:	d1dd      	bne.n	80072d8 <_free_r+0x28>
 800731c:	681c      	ldr	r4, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	6053      	str	r3, [r2, #4]
 8007322:	4421      	add	r1, r4
 8007324:	6011      	str	r1, [r2, #0]
 8007326:	e7d7      	b.n	80072d8 <_free_r+0x28>
 8007328:	d902      	bls.n	8007330 <_free_r+0x80>
 800732a:	230c      	movs	r3, #12
 800732c:	6003      	str	r3, [r0, #0]
 800732e:	e7d3      	b.n	80072d8 <_free_r+0x28>
 8007330:	6825      	ldr	r5, [r4, #0]
 8007332:	1961      	adds	r1, r4, r5
 8007334:	428b      	cmp	r3, r1
 8007336:	bf04      	itt	eq
 8007338:	6819      	ldreq	r1, [r3, #0]
 800733a:	685b      	ldreq	r3, [r3, #4]
 800733c:	6063      	str	r3, [r4, #4]
 800733e:	bf04      	itt	eq
 8007340:	1949      	addeq	r1, r1, r5
 8007342:	6021      	streq	r1, [r4, #0]
 8007344:	6054      	str	r4, [r2, #4]
 8007346:	e7c7      	b.n	80072d8 <_free_r+0x28>
 8007348:	b003      	add	sp, #12
 800734a:	bd30      	pop	{r4, r5, pc}
 800734c:	20000268 	.word	0x20000268

08007350 <_malloc_r>:
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007352:	1ccd      	adds	r5, r1, #3
 8007354:	f025 0503 	bic.w	r5, r5, #3
 8007358:	3508      	adds	r5, #8
 800735a:	2d0c      	cmp	r5, #12
 800735c:	bf38      	it	cc
 800735e:	250c      	movcc	r5, #12
 8007360:	2d00      	cmp	r5, #0
 8007362:	4606      	mov	r6, r0
 8007364:	db01      	blt.n	800736a <_malloc_r+0x1a>
 8007366:	42a9      	cmp	r1, r5
 8007368:	d903      	bls.n	8007372 <_malloc_r+0x22>
 800736a:	230c      	movs	r3, #12
 800736c:	6033      	str	r3, [r6, #0]
 800736e:	2000      	movs	r0, #0
 8007370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007372:	f000 fa0f 	bl	8007794 <__malloc_lock>
 8007376:	4921      	ldr	r1, [pc, #132]	; (80073fc <_malloc_r+0xac>)
 8007378:	680a      	ldr	r2, [r1, #0]
 800737a:	4614      	mov	r4, r2
 800737c:	b99c      	cbnz	r4, 80073a6 <_malloc_r+0x56>
 800737e:	4f20      	ldr	r7, [pc, #128]	; (8007400 <_malloc_r+0xb0>)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	b923      	cbnz	r3, 800738e <_malloc_r+0x3e>
 8007384:	4621      	mov	r1, r4
 8007386:	4630      	mov	r0, r6
 8007388:	f000 f998 	bl	80076bc <_sbrk_r>
 800738c:	6038      	str	r0, [r7, #0]
 800738e:	4629      	mov	r1, r5
 8007390:	4630      	mov	r0, r6
 8007392:	f000 f993 	bl	80076bc <_sbrk_r>
 8007396:	1c43      	adds	r3, r0, #1
 8007398:	d123      	bne.n	80073e2 <_malloc_r+0x92>
 800739a:	230c      	movs	r3, #12
 800739c:	6033      	str	r3, [r6, #0]
 800739e:	4630      	mov	r0, r6
 80073a0:	f000 f9fe 	bl	80077a0 <__malloc_unlock>
 80073a4:	e7e3      	b.n	800736e <_malloc_r+0x1e>
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	1b5b      	subs	r3, r3, r5
 80073aa:	d417      	bmi.n	80073dc <_malloc_r+0x8c>
 80073ac:	2b0b      	cmp	r3, #11
 80073ae:	d903      	bls.n	80073b8 <_malloc_r+0x68>
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	441c      	add	r4, r3
 80073b4:	6025      	str	r5, [r4, #0]
 80073b6:	e004      	b.n	80073c2 <_malloc_r+0x72>
 80073b8:	6863      	ldr	r3, [r4, #4]
 80073ba:	42a2      	cmp	r2, r4
 80073bc:	bf0c      	ite	eq
 80073be:	600b      	streq	r3, [r1, #0]
 80073c0:	6053      	strne	r3, [r2, #4]
 80073c2:	4630      	mov	r0, r6
 80073c4:	f000 f9ec 	bl	80077a0 <__malloc_unlock>
 80073c8:	f104 000b 	add.w	r0, r4, #11
 80073cc:	1d23      	adds	r3, r4, #4
 80073ce:	f020 0007 	bic.w	r0, r0, #7
 80073d2:	1ac2      	subs	r2, r0, r3
 80073d4:	d0cc      	beq.n	8007370 <_malloc_r+0x20>
 80073d6:	1a1b      	subs	r3, r3, r0
 80073d8:	50a3      	str	r3, [r4, r2]
 80073da:	e7c9      	b.n	8007370 <_malloc_r+0x20>
 80073dc:	4622      	mov	r2, r4
 80073de:	6864      	ldr	r4, [r4, #4]
 80073e0:	e7cc      	b.n	800737c <_malloc_r+0x2c>
 80073e2:	1cc4      	adds	r4, r0, #3
 80073e4:	f024 0403 	bic.w	r4, r4, #3
 80073e8:	42a0      	cmp	r0, r4
 80073ea:	d0e3      	beq.n	80073b4 <_malloc_r+0x64>
 80073ec:	1a21      	subs	r1, r4, r0
 80073ee:	4630      	mov	r0, r6
 80073f0:	f000 f964 	bl	80076bc <_sbrk_r>
 80073f4:	3001      	adds	r0, #1
 80073f6:	d1dd      	bne.n	80073b4 <_malloc_r+0x64>
 80073f8:	e7cf      	b.n	800739a <_malloc_r+0x4a>
 80073fa:	bf00      	nop
 80073fc:	20000268 	.word	0x20000268
 8007400:	2000026c 	.word	0x2000026c

08007404 <__ssputs_r>:
 8007404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007408:	688e      	ldr	r6, [r1, #8]
 800740a:	429e      	cmp	r6, r3
 800740c:	4682      	mov	sl, r0
 800740e:	460c      	mov	r4, r1
 8007410:	4690      	mov	r8, r2
 8007412:	461f      	mov	r7, r3
 8007414:	d838      	bhi.n	8007488 <__ssputs_r+0x84>
 8007416:	898a      	ldrh	r2, [r1, #12]
 8007418:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800741c:	d032      	beq.n	8007484 <__ssputs_r+0x80>
 800741e:	6825      	ldr	r5, [r4, #0]
 8007420:	6909      	ldr	r1, [r1, #16]
 8007422:	eba5 0901 	sub.w	r9, r5, r1
 8007426:	6965      	ldr	r5, [r4, #20]
 8007428:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800742c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007430:	3301      	adds	r3, #1
 8007432:	444b      	add	r3, r9
 8007434:	106d      	asrs	r5, r5, #1
 8007436:	429d      	cmp	r5, r3
 8007438:	bf38      	it	cc
 800743a:	461d      	movcc	r5, r3
 800743c:	0553      	lsls	r3, r2, #21
 800743e:	d531      	bpl.n	80074a4 <__ssputs_r+0xa0>
 8007440:	4629      	mov	r1, r5
 8007442:	f7ff ff85 	bl	8007350 <_malloc_r>
 8007446:	4606      	mov	r6, r0
 8007448:	b950      	cbnz	r0, 8007460 <__ssputs_r+0x5c>
 800744a:	230c      	movs	r3, #12
 800744c:	f8ca 3000 	str.w	r3, [sl]
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007456:	81a3      	strh	r3, [r4, #12]
 8007458:	f04f 30ff 	mov.w	r0, #4294967295
 800745c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007460:	6921      	ldr	r1, [r4, #16]
 8007462:	464a      	mov	r2, r9
 8007464:	f7fe f900 	bl	8005668 <memcpy>
 8007468:	89a3      	ldrh	r3, [r4, #12]
 800746a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800746e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007472:	81a3      	strh	r3, [r4, #12]
 8007474:	6126      	str	r6, [r4, #16]
 8007476:	6165      	str	r5, [r4, #20]
 8007478:	444e      	add	r6, r9
 800747a:	eba5 0509 	sub.w	r5, r5, r9
 800747e:	6026      	str	r6, [r4, #0]
 8007480:	60a5      	str	r5, [r4, #8]
 8007482:	463e      	mov	r6, r7
 8007484:	42be      	cmp	r6, r7
 8007486:	d900      	bls.n	800748a <__ssputs_r+0x86>
 8007488:	463e      	mov	r6, r7
 800748a:	4632      	mov	r2, r6
 800748c:	6820      	ldr	r0, [r4, #0]
 800748e:	4641      	mov	r1, r8
 8007490:	f000 f966 	bl	8007760 <memmove>
 8007494:	68a3      	ldr	r3, [r4, #8]
 8007496:	6822      	ldr	r2, [r4, #0]
 8007498:	1b9b      	subs	r3, r3, r6
 800749a:	4432      	add	r2, r6
 800749c:	60a3      	str	r3, [r4, #8]
 800749e:	6022      	str	r2, [r4, #0]
 80074a0:	2000      	movs	r0, #0
 80074a2:	e7db      	b.n	800745c <__ssputs_r+0x58>
 80074a4:	462a      	mov	r2, r5
 80074a6:	f000 f981 	bl	80077ac <_realloc_r>
 80074aa:	4606      	mov	r6, r0
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d1e1      	bne.n	8007474 <__ssputs_r+0x70>
 80074b0:	6921      	ldr	r1, [r4, #16]
 80074b2:	4650      	mov	r0, sl
 80074b4:	f7ff fefc 	bl	80072b0 <_free_r>
 80074b8:	e7c7      	b.n	800744a <__ssputs_r+0x46>
	...

080074bc <_svfiprintf_r>:
 80074bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c0:	4698      	mov	r8, r3
 80074c2:	898b      	ldrh	r3, [r1, #12]
 80074c4:	061b      	lsls	r3, r3, #24
 80074c6:	b09d      	sub	sp, #116	; 0x74
 80074c8:	4607      	mov	r7, r0
 80074ca:	460d      	mov	r5, r1
 80074cc:	4614      	mov	r4, r2
 80074ce:	d50e      	bpl.n	80074ee <_svfiprintf_r+0x32>
 80074d0:	690b      	ldr	r3, [r1, #16]
 80074d2:	b963      	cbnz	r3, 80074ee <_svfiprintf_r+0x32>
 80074d4:	2140      	movs	r1, #64	; 0x40
 80074d6:	f7ff ff3b 	bl	8007350 <_malloc_r>
 80074da:	6028      	str	r0, [r5, #0]
 80074dc:	6128      	str	r0, [r5, #16]
 80074de:	b920      	cbnz	r0, 80074ea <_svfiprintf_r+0x2e>
 80074e0:	230c      	movs	r3, #12
 80074e2:	603b      	str	r3, [r7, #0]
 80074e4:	f04f 30ff 	mov.w	r0, #4294967295
 80074e8:	e0d1      	b.n	800768e <_svfiprintf_r+0x1d2>
 80074ea:	2340      	movs	r3, #64	; 0x40
 80074ec:	616b      	str	r3, [r5, #20]
 80074ee:	2300      	movs	r3, #0
 80074f0:	9309      	str	r3, [sp, #36]	; 0x24
 80074f2:	2320      	movs	r3, #32
 80074f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80074fc:	2330      	movs	r3, #48	; 0x30
 80074fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80076a8 <_svfiprintf_r+0x1ec>
 8007502:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007506:	f04f 0901 	mov.w	r9, #1
 800750a:	4623      	mov	r3, r4
 800750c:	469a      	mov	sl, r3
 800750e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007512:	b10a      	cbz	r2, 8007518 <_svfiprintf_r+0x5c>
 8007514:	2a25      	cmp	r2, #37	; 0x25
 8007516:	d1f9      	bne.n	800750c <_svfiprintf_r+0x50>
 8007518:	ebba 0b04 	subs.w	fp, sl, r4
 800751c:	d00b      	beq.n	8007536 <_svfiprintf_r+0x7a>
 800751e:	465b      	mov	r3, fp
 8007520:	4622      	mov	r2, r4
 8007522:	4629      	mov	r1, r5
 8007524:	4638      	mov	r0, r7
 8007526:	f7ff ff6d 	bl	8007404 <__ssputs_r>
 800752a:	3001      	adds	r0, #1
 800752c:	f000 80aa 	beq.w	8007684 <_svfiprintf_r+0x1c8>
 8007530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007532:	445a      	add	r2, fp
 8007534:	9209      	str	r2, [sp, #36]	; 0x24
 8007536:	f89a 3000 	ldrb.w	r3, [sl]
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 80a2 	beq.w	8007684 <_svfiprintf_r+0x1c8>
 8007540:	2300      	movs	r3, #0
 8007542:	f04f 32ff 	mov.w	r2, #4294967295
 8007546:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800754a:	f10a 0a01 	add.w	sl, sl, #1
 800754e:	9304      	str	r3, [sp, #16]
 8007550:	9307      	str	r3, [sp, #28]
 8007552:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007556:	931a      	str	r3, [sp, #104]	; 0x68
 8007558:	4654      	mov	r4, sl
 800755a:	2205      	movs	r2, #5
 800755c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007560:	4851      	ldr	r0, [pc, #324]	; (80076a8 <_svfiprintf_r+0x1ec>)
 8007562:	f7f8 fe75 	bl	8000250 <memchr>
 8007566:	9a04      	ldr	r2, [sp, #16]
 8007568:	b9d8      	cbnz	r0, 80075a2 <_svfiprintf_r+0xe6>
 800756a:	06d0      	lsls	r0, r2, #27
 800756c:	bf44      	itt	mi
 800756e:	2320      	movmi	r3, #32
 8007570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007574:	0711      	lsls	r1, r2, #28
 8007576:	bf44      	itt	mi
 8007578:	232b      	movmi	r3, #43	; 0x2b
 800757a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800757e:	f89a 3000 	ldrb.w	r3, [sl]
 8007582:	2b2a      	cmp	r3, #42	; 0x2a
 8007584:	d015      	beq.n	80075b2 <_svfiprintf_r+0xf6>
 8007586:	9a07      	ldr	r2, [sp, #28]
 8007588:	4654      	mov	r4, sl
 800758a:	2000      	movs	r0, #0
 800758c:	f04f 0c0a 	mov.w	ip, #10
 8007590:	4621      	mov	r1, r4
 8007592:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007596:	3b30      	subs	r3, #48	; 0x30
 8007598:	2b09      	cmp	r3, #9
 800759a:	d94e      	bls.n	800763a <_svfiprintf_r+0x17e>
 800759c:	b1b0      	cbz	r0, 80075cc <_svfiprintf_r+0x110>
 800759e:	9207      	str	r2, [sp, #28]
 80075a0:	e014      	b.n	80075cc <_svfiprintf_r+0x110>
 80075a2:	eba0 0308 	sub.w	r3, r0, r8
 80075a6:	fa09 f303 	lsl.w	r3, r9, r3
 80075aa:	4313      	orrs	r3, r2
 80075ac:	9304      	str	r3, [sp, #16]
 80075ae:	46a2      	mov	sl, r4
 80075b0:	e7d2      	b.n	8007558 <_svfiprintf_r+0x9c>
 80075b2:	9b03      	ldr	r3, [sp, #12]
 80075b4:	1d19      	adds	r1, r3, #4
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	9103      	str	r1, [sp, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	bfbb      	ittet	lt
 80075be:	425b      	neglt	r3, r3
 80075c0:	f042 0202 	orrlt.w	r2, r2, #2
 80075c4:	9307      	strge	r3, [sp, #28]
 80075c6:	9307      	strlt	r3, [sp, #28]
 80075c8:	bfb8      	it	lt
 80075ca:	9204      	strlt	r2, [sp, #16]
 80075cc:	7823      	ldrb	r3, [r4, #0]
 80075ce:	2b2e      	cmp	r3, #46	; 0x2e
 80075d0:	d10c      	bne.n	80075ec <_svfiprintf_r+0x130>
 80075d2:	7863      	ldrb	r3, [r4, #1]
 80075d4:	2b2a      	cmp	r3, #42	; 0x2a
 80075d6:	d135      	bne.n	8007644 <_svfiprintf_r+0x188>
 80075d8:	9b03      	ldr	r3, [sp, #12]
 80075da:	1d1a      	adds	r2, r3, #4
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	9203      	str	r2, [sp, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	bfb8      	it	lt
 80075e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80075e8:	3402      	adds	r4, #2
 80075ea:	9305      	str	r3, [sp, #20]
 80075ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80076b8 <_svfiprintf_r+0x1fc>
 80075f0:	7821      	ldrb	r1, [r4, #0]
 80075f2:	2203      	movs	r2, #3
 80075f4:	4650      	mov	r0, sl
 80075f6:	f7f8 fe2b 	bl	8000250 <memchr>
 80075fa:	b140      	cbz	r0, 800760e <_svfiprintf_r+0x152>
 80075fc:	2340      	movs	r3, #64	; 0x40
 80075fe:	eba0 000a 	sub.w	r0, r0, sl
 8007602:	fa03 f000 	lsl.w	r0, r3, r0
 8007606:	9b04      	ldr	r3, [sp, #16]
 8007608:	4303      	orrs	r3, r0
 800760a:	3401      	adds	r4, #1
 800760c:	9304      	str	r3, [sp, #16]
 800760e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007612:	4826      	ldr	r0, [pc, #152]	; (80076ac <_svfiprintf_r+0x1f0>)
 8007614:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007618:	2206      	movs	r2, #6
 800761a:	f7f8 fe19 	bl	8000250 <memchr>
 800761e:	2800      	cmp	r0, #0
 8007620:	d038      	beq.n	8007694 <_svfiprintf_r+0x1d8>
 8007622:	4b23      	ldr	r3, [pc, #140]	; (80076b0 <_svfiprintf_r+0x1f4>)
 8007624:	bb1b      	cbnz	r3, 800766e <_svfiprintf_r+0x1b2>
 8007626:	9b03      	ldr	r3, [sp, #12]
 8007628:	3307      	adds	r3, #7
 800762a:	f023 0307 	bic.w	r3, r3, #7
 800762e:	3308      	adds	r3, #8
 8007630:	9303      	str	r3, [sp, #12]
 8007632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007634:	4433      	add	r3, r6
 8007636:	9309      	str	r3, [sp, #36]	; 0x24
 8007638:	e767      	b.n	800750a <_svfiprintf_r+0x4e>
 800763a:	fb0c 3202 	mla	r2, ip, r2, r3
 800763e:	460c      	mov	r4, r1
 8007640:	2001      	movs	r0, #1
 8007642:	e7a5      	b.n	8007590 <_svfiprintf_r+0xd4>
 8007644:	2300      	movs	r3, #0
 8007646:	3401      	adds	r4, #1
 8007648:	9305      	str	r3, [sp, #20]
 800764a:	4619      	mov	r1, r3
 800764c:	f04f 0c0a 	mov.w	ip, #10
 8007650:	4620      	mov	r0, r4
 8007652:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007656:	3a30      	subs	r2, #48	; 0x30
 8007658:	2a09      	cmp	r2, #9
 800765a:	d903      	bls.n	8007664 <_svfiprintf_r+0x1a8>
 800765c:	2b00      	cmp	r3, #0
 800765e:	d0c5      	beq.n	80075ec <_svfiprintf_r+0x130>
 8007660:	9105      	str	r1, [sp, #20]
 8007662:	e7c3      	b.n	80075ec <_svfiprintf_r+0x130>
 8007664:	fb0c 2101 	mla	r1, ip, r1, r2
 8007668:	4604      	mov	r4, r0
 800766a:	2301      	movs	r3, #1
 800766c:	e7f0      	b.n	8007650 <_svfiprintf_r+0x194>
 800766e:	ab03      	add	r3, sp, #12
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	462a      	mov	r2, r5
 8007674:	4b0f      	ldr	r3, [pc, #60]	; (80076b4 <_svfiprintf_r+0x1f8>)
 8007676:	a904      	add	r1, sp, #16
 8007678:	4638      	mov	r0, r7
 800767a:	f7fe f89d 	bl	80057b8 <_printf_float>
 800767e:	1c42      	adds	r2, r0, #1
 8007680:	4606      	mov	r6, r0
 8007682:	d1d6      	bne.n	8007632 <_svfiprintf_r+0x176>
 8007684:	89ab      	ldrh	r3, [r5, #12]
 8007686:	065b      	lsls	r3, r3, #25
 8007688:	f53f af2c 	bmi.w	80074e4 <_svfiprintf_r+0x28>
 800768c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800768e:	b01d      	add	sp, #116	; 0x74
 8007690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007694:	ab03      	add	r3, sp, #12
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	462a      	mov	r2, r5
 800769a:	4b06      	ldr	r3, [pc, #24]	; (80076b4 <_svfiprintf_r+0x1f8>)
 800769c:	a904      	add	r1, sp, #16
 800769e:	4638      	mov	r0, r7
 80076a0:	f7fe fb16 	bl	8005cd0 <_printf_i>
 80076a4:	e7eb      	b.n	800767e <_svfiprintf_r+0x1c2>
 80076a6:	bf00      	nop
 80076a8:	080085e4 	.word	0x080085e4
 80076ac:	080085ee 	.word	0x080085ee
 80076b0:	080057b9 	.word	0x080057b9
 80076b4:	08007405 	.word	0x08007405
 80076b8:	080085ea 	.word	0x080085ea

080076bc <_sbrk_r>:
 80076bc:	b538      	push	{r3, r4, r5, lr}
 80076be:	4d06      	ldr	r5, [pc, #24]	; (80076d8 <_sbrk_r+0x1c>)
 80076c0:	2300      	movs	r3, #0
 80076c2:	4604      	mov	r4, r0
 80076c4:	4608      	mov	r0, r1
 80076c6:	602b      	str	r3, [r5, #0]
 80076c8:	f7fa fa2a 	bl	8001b20 <_sbrk>
 80076cc:	1c43      	adds	r3, r0, #1
 80076ce:	d102      	bne.n	80076d6 <_sbrk_r+0x1a>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	b103      	cbz	r3, 80076d6 <_sbrk_r+0x1a>
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	bd38      	pop	{r3, r4, r5, pc}
 80076d8:	20000524 	.word	0x20000524

080076dc <__assert_func>:
 80076dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076de:	4614      	mov	r4, r2
 80076e0:	461a      	mov	r2, r3
 80076e2:	4b09      	ldr	r3, [pc, #36]	; (8007708 <__assert_func+0x2c>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4605      	mov	r5, r0
 80076e8:	68d8      	ldr	r0, [r3, #12]
 80076ea:	b14c      	cbz	r4, 8007700 <__assert_func+0x24>
 80076ec:	4b07      	ldr	r3, [pc, #28]	; (800770c <__assert_func+0x30>)
 80076ee:	9100      	str	r1, [sp, #0]
 80076f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076f4:	4906      	ldr	r1, [pc, #24]	; (8007710 <__assert_func+0x34>)
 80076f6:	462b      	mov	r3, r5
 80076f8:	f000 f80e 	bl	8007718 <fiprintf>
 80076fc:	f000 faa4 	bl	8007c48 <abort>
 8007700:	4b04      	ldr	r3, [pc, #16]	; (8007714 <__assert_func+0x38>)
 8007702:	461c      	mov	r4, r3
 8007704:	e7f3      	b.n	80076ee <__assert_func+0x12>
 8007706:	bf00      	nop
 8007708:	20000040 	.word	0x20000040
 800770c:	080085f5 	.word	0x080085f5
 8007710:	08008602 	.word	0x08008602
 8007714:	08008630 	.word	0x08008630

08007718 <fiprintf>:
 8007718:	b40e      	push	{r1, r2, r3}
 800771a:	b503      	push	{r0, r1, lr}
 800771c:	4601      	mov	r1, r0
 800771e:	ab03      	add	r3, sp, #12
 8007720:	4805      	ldr	r0, [pc, #20]	; (8007738 <fiprintf+0x20>)
 8007722:	f853 2b04 	ldr.w	r2, [r3], #4
 8007726:	6800      	ldr	r0, [r0, #0]
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	f000 f88f 	bl	800784c <_vfiprintf_r>
 800772e:	b002      	add	sp, #8
 8007730:	f85d eb04 	ldr.w	lr, [sp], #4
 8007734:	b003      	add	sp, #12
 8007736:	4770      	bx	lr
 8007738:	20000040 	.word	0x20000040

0800773c <__ascii_mbtowc>:
 800773c:	b082      	sub	sp, #8
 800773e:	b901      	cbnz	r1, 8007742 <__ascii_mbtowc+0x6>
 8007740:	a901      	add	r1, sp, #4
 8007742:	b142      	cbz	r2, 8007756 <__ascii_mbtowc+0x1a>
 8007744:	b14b      	cbz	r3, 800775a <__ascii_mbtowc+0x1e>
 8007746:	7813      	ldrb	r3, [r2, #0]
 8007748:	600b      	str	r3, [r1, #0]
 800774a:	7812      	ldrb	r2, [r2, #0]
 800774c:	1e10      	subs	r0, r2, #0
 800774e:	bf18      	it	ne
 8007750:	2001      	movne	r0, #1
 8007752:	b002      	add	sp, #8
 8007754:	4770      	bx	lr
 8007756:	4610      	mov	r0, r2
 8007758:	e7fb      	b.n	8007752 <__ascii_mbtowc+0x16>
 800775a:	f06f 0001 	mvn.w	r0, #1
 800775e:	e7f8      	b.n	8007752 <__ascii_mbtowc+0x16>

08007760 <memmove>:
 8007760:	4288      	cmp	r0, r1
 8007762:	b510      	push	{r4, lr}
 8007764:	eb01 0402 	add.w	r4, r1, r2
 8007768:	d902      	bls.n	8007770 <memmove+0x10>
 800776a:	4284      	cmp	r4, r0
 800776c:	4623      	mov	r3, r4
 800776e:	d807      	bhi.n	8007780 <memmove+0x20>
 8007770:	1e43      	subs	r3, r0, #1
 8007772:	42a1      	cmp	r1, r4
 8007774:	d008      	beq.n	8007788 <memmove+0x28>
 8007776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800777a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800777e:	e7f8      	b.n	8007772 <memmove+0x12>
 8007780:	4402      	add	r2, r0
 8007782:	4601      	mov	r1, r0
 8007784:	428a      	cmp	r2, r1
 8007786:	d100      	bne.n	800778a <memmove+0x2a>
 8007788:	bd10      	pop	{r4, pc}
 800778a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800778e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007792:	e7f7      	b.n	8007784 <memmove+0x24>

08007794 <__malloc_lock>:
 8007794:	4801      	ldr	r0, [pc, #4]	; (800779c <__malloc_lock+0x8>)
 8007796:	f000 bc17 	b.w	8007fc8 <__retarget_lock_acquire_recursive>
 800779a:	bf00      	nop
 800779c:	2000052c 	.word	0x2000052c

080077a0 <__malloc_unlock>:
 80077a0:	4801      	ldr	r0, [pc, #4]	; (80077a8 <__malloc_unlock+0x8>)
 80077a2:	f000 bc12 	b.w	8007fca <__retarget_lock_release_recursive>
 80077a6:	bf00      	nop
 80077a8:	2000052c 	.word	0x2000052c

080077ac <_realloc_r>:
 80077ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ae:	4607      	mov	r7, r0
 80077b0:	4614      	mov	r4, r2
 80077b2:	460e      	mov	r6, r1
 80077b4:	b921      	cbnz	r1, 80077c0 <_realloc_r+0x14>
 80077b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80077ba:	4611      	mov	r1, r2
 80077bc:	f7ff bdc8 	b.w	8007350 <_malloc_r>
 80077c0:	b922      	cbnz	r2, 80077cc <_realloc_r+0x20>
 80077c2:	f7ff fd75 	bl	80072b0 <_free_r>
 80077c6:	4625      	mov	r5, r4
 80077c8:	4628      	mov	r0, r5
 80077ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077cc:	f000 fc62 	bl	8008094 <_malloc_usable_size_r>
 80077d0:	42a0      	cmp	r0, r4
 80077d2:	d20f      	bcs.n	80077f4 <_realloc_r+0x48>
 80077d4:	4621      	mov	r1, r4
 80077d6:	4638      	mov	r0, r7
 80077d8:	f7ff fdba 	bl	8007350 <_malloc_r>
 80077dc:	4605      	mov	r5, r0
 80077de:	2800      	cmp	r0, #0
 80077e0:	d0f2      	beq.n	80077c8 <_realloc_r+0x1c>
 80077e2:	4631      	mov	r1, r6
 80077e4:	4622      	mov	r2, r4
 80077e6:	f7fd ff3f 	bl	8005668 <memcpy>
 80077ea:	4631      	mov	r1, r6
 80077ec:	4638      	mov	r0, r7
 80077ee:	f7ff fd5f 	bl	80072b0 <_free_r>
 80077f2:	e7e9      	b.n	80077c8 <_realloc_r+0x1c>
 80077f4:	4635      	mov	r5, r6
 80077f6:	e7e7      	b.n	80077c8 <_realloc_r+0x1c>

080077f8 <__sfputc_r>:
 80077f8:	6893      	ldr	r3, [r2, #8]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	b410      	push	{r4}
 8007800:	6093      	str	r3, [r2, #8]
 8007802:	da08      	bge.n	8007816 <__sfputc_r+0x1e>
 8007804:	6994      	ldr	r4, [r2, #24]
 8007806:	42a3      	cmp	r3, r4
 8007808:	db01      	blt.n	800780e <__sfputc_r+0x16>
 800780a:	290a      	cmp	r1, #10
 800780c:	d103      	bne.n	8007816 <__sfputc_r+0x1e>
 800780e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007812:	f000 b94b 	b.w	8007aac <__swbuf_r>
 8007816:	6813      	ldr	r3, [r2, #0]
 8007818:	1c58      	adds	r0, r3, #1
 800781a:	6010      	str	r0, [r2, #0]
 800781c:	7019      	strb	r1, [r3, #0]
 800781e:	4608      	mov	r0, r1
 8007820:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007824:	4770      	bx	lr

08007826 <__sfputs_r>:
 8007826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007828:	4606      	mov	r6, r0
 800782a:	460f      	mov	r7, r1
 800782c:	4614      	mov	r4, r2
 800782e:	18d5      	adds	r5, r2, r3
 8007830:	42ac      	cmp	r4, r5
 8007832:	d101      	bne.n	8007838 <__sfputs_r+0x12>
 8007834:	2000      	movs	r0, #0
 8007836:	e007      	b.n	8007848 <__sfputs_r+0x22>
 8007838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800783c:	463a      	mov	r2, r7
 800783e:	4630      	mov	r0, r6
 8007840:	f7ff ffda 	bl	80077f8 <__sfputc_r>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d1f3      	bne.n	8007830 <__sfputs_r+0xa>
 8007848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800784c <_vfiprintf_r>:
 800784c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007850:	460d      	mov	r5, r1
 8007852:	b09d      	sub	sp, #116	; 0x74
 8007854:	4614      	mov	r4, r2
 8007856:	4698      	mov	r8, r3
 8007858:	4606      	mov	r6, r0
 800785a:	b118      	cbz	r0, 8007864 <_vfiprintf_r+0x18>
 800785c:	6983      	ldr	r3, [r0, #24]
 800785e:	b90b      	cbnz	r3, 8007864 <_vfiprintf_r+0x18>
 8007860:	f000 fb14 	bl	8007e8c <__sinit>
 8007864:	4b89      	ldr	r3, [pc, #548]	; (8007a8c <_vfiprintf_r+0x240>)
 8007866:	429d      	cmp	r5, r3
 8007868:	d11b      	bne.n	80078a2 <_vfiprintf_r+0x56>
 800786a:	6875      	ldr	r5, [r6, #4]
 800786c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800786e:	07d9      	lsls	r1, r3, #31
 8007870:	d405      	bmi.n	800787e <_vfiprintf_r+0x32>
 8007872:	89ab      	ldrh	r3, [r5, #12]
 8007874:	059a      	lsls	r2, r3, #22
 8007876:	d402      	bmi.n	800787e <_vfiprintf_r+0x32>
 8007878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800787a:	f000 fba5 	bl	8007fc8 <__retarget_lock_acquire_recursive>
 800787e:	89ab      	ldrh	r3, [r5, #12]
 8007880:	071b      	lsls	r3, r3, #28
 8007882:	d501      	bpl.n	8007888 <_vfiprintf_r+0x3c>
 8007884:	692b      	ldr	r3, [r5, #16]
 8007886:	b9eb      	cbnz	r3, 80078c4 <_vfiprintf_r+0x78>
 8007888:	4629      	mov	r1, r5
 800788a:	4630      	mov	r0, r6
 800788c:	f000 f96e 	bl	8007b6c <__swsetup_r>
 8007890:	b1c0      	cbz	r0, 80078c4 <_vfiprintf_r+0x78>
 8007892:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007894:	07dc      	lsls	r4, r3, #31
 8007896:	d50e      	bpl.n	80078b6 <_vfiprintf_r+0x6a>
 8007898:	f04f 30ff 	mov.w	r0, #4294967295
 800789c:	b01d      	add	sp, #116	; 0x74
 800789e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a2:	4b7b      	ldr	r3, [pc, #492]	; (8007a90 <_vfiprintf_r+0x244>)
 80078a4:	429d      	cmp	r5, r3
 80078a6:	d101      	bne.n	80078ac <_vfiprintf_r+0x60>
 80078a8:	68b5      	ldr	r5, [r6, #8]
 80078aa:	e7df      	b.n	800786c <_vfiprintf_r+0x20>
 80078ac:	4b79      	ldr	r3, [pc, #484]	; (8007a94 <_vfiprintf_r+0x248>)
 80078ae:	429d      	cmp	r5, r3
 80078b0:	bf08      	it	eq
 80078b2:	68f5      	ldreq	r5, [r6, #12]
 80078b4:	e7da      	b.n	800786c <_vfiprintf_r+0x20>
 80078b6:	89ab      	ldrh	r3, [r5, #12]
 80078b8:	0598      	lsls	r0, r3, #22
 80078ba:	d4ed      	bmi.n	8007898 <_vfiprintf_r+0x4c>
 80078bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078be:	f000 fb84 	bl	8007fca <__retarget_lock_release_recursive>
 80078c2:	e7e9      	b.n	8007898 <_vfiprintf_r+0x4c>
 80078c4:	2300      	movs	r3, #0
 80078c6:	9309      	str	r3, [sp, #36]	; 0x24
 80078c8:	2320      	movs	r3, #32
 80078ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80078d2:	2330      	movs	r3, #48	; 0x30
 80078d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a98 <_vfiprintf_r+0x24c>
 80078d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078dc:	f04f 0901 	mov.w	r9, #1
 80078e0:	4623      	mov	r3, r4
 80078e2:	469a      	mov	sl, r3
 80078e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078e8:	b10a      	cbz	r2, 80078ee <_vfiprintf_r+0xa2>
 80078ea:	2a25      	cmp	r2, #37	; 0x25
 80078ec:	d1f9      	bne.n	80078e2 <_vfiprintf_r+0x96>
 80078ee:	ebba 0b04 	subs.w	fp, sl, r4
 80078f2:	d00b      	beq.n	800790c <_vfiprintf_r+0xc0>
 80078f4:	465b      	mov	r3, fp
 80078f6:	4622      	mov	r2, r4
 80078f8:	4629      	mov	r1, r5
 80078fa:	4630      	mov	r0, r6
 80078fc:	f7ff ff93 	bl	8007826 <__sfputs_r>
 8007900:	3001      	adds	r0, #1
 8007902:	f000 80aa 	beq.w	8007a5a <_vfiprintf_r+0x20e>
 8007906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007908:	445a      	add	r2, fp
 800790a:	9209      	str	r2, [sp, #36]	; 0x24
 800790c:	f89a 3000 	ldrb.w	r3, [sl]
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 80a2 	beq.w	8007a5a <_vfiprintf_r+0x20e>
 8007916:	2300      	movs	r3, #0
 8007918:	f04f 32ff 	mov.w	r2, #4294967295
 800791c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007920:	f10a 0a01 	add.w	sl, sl, #1
 8007924:	9304      	str	r3, [sp, #16]
 8007926:	9307      	str	r3, [sp, #28]
 8007928:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800792c:	931a      	str	r3, [sp, #104]	; 0x68
 800792e:	4654      	mov	r4, sl
 8007930:	2205      	movs	r2, #5
 8007932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007936:	4858      	ldr	r0, [pc, #352]	; (8007a98 <_vfiprintf_r+0x24c>)
 8007938:	f7f8 fc8a 	bl	8000250 <memchr>
 800793c:	9a04      	ldr	r2, [sp, #16]
 800793e:	b9d8      	cbnz	r0, 8007978 <_vfiprintf_r+0x12c>
 8007940:	06d1      	lsls	r1, r2, #27
 8007942:	bf44      	itt	mi
 8007944:	2320      	movmi	r3, #32
 8007946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800794a:	0713      	lsls	r3, r2, #28
 800794c:	bf44      	itt	mi
 800794e:	232b      	movmi	r3, #43	; 0x2b
 8007950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007954:	f89a 3000 	ldrb.w	r3, [sl]
 8007958:	2b2a      	cmp	r3, #42	; 0x2a
 800795a:	d015      	beq.n	8007988 <_vfiprintf_r+0x13c>
 800795c:	9a07      	ldr	r2, [sp, #28]
 800795e:	4654      	mov	r4, sl
 8007960:	2000      	movs	r0, #0
 8007962:	f04f 0c0a 	mov.w	ip, #10
 8007966:	4621      	mov	r1, r4
 8007968:	f811 3b01 	ldrb.w	r3, [r1], #1
 800796c:	3b30      	subs	r3, #48	; 0x30
 800796e:	2b09      	cmp	r3, #9
 8007970:	d94e      	bls.n	8007a10 <_vfiprintf_r+0x1c4>
 8007972:	b1b0      	cbz	r0, 80079a2 <_vfiprintf_r+0x156>
 8007974:	9207      	str	r2, [sp, #28]
 8007976:	e014      	b.n	80079a2 <_vfiprintf_r+0x156>
 8007978:	eba0 0308 	sub.w	r3, r0, r8
 800797c:	fa09 f303 	lsl.w	r3, r9, r3
 8007980:	4313      	orrs	r3, r2
 8007982:	9304      	str	r3, [sp, #16]
 8007984:	46a2      	mov	sl, r4
 8007986:	e7d2      	b.n	800792e <_vfiprintf_r+0xe2>
 8007988:	9b03      	ldr	r3, [sp, #12]
 800798a:	1d19      	adds	r1, r3, #4
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	9103      	str	r1, [sp, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	bfbb      	ittet	lt
 8007994:	425b      	neglt	r3, r3
 8007996:	f042 0202 	orrlt.w	r2, r2, #2
 800799a:	9307      	strge	r3, [sp, #28]
 800799c:	9307      	strlt	r3, [sp, #28]
 800799e:	bfb8      	it	lt
 80079a0:	9204      	strlt	r2, [sp, #16]
 80079a2:	7823      	ldrb	r3, [r4, #0]
 80079a4:	2b2e      	cmp	r3, #46	; 0x2e
 80079a6:	d10c      	bne.n	80079c2 <_vfiprintf_r+0x176>
 80079a8:	7863      	ldrb	r3, [r4, #1]
 80079aa:	2b2a      	cmp	r3, #42	; 0x2a
 80079ac:	d135      	bne.n	8007a1a <_vfiprintf_r+0x1ce>
 80079ae:	9b03      	ldr	r3, [sp, #12]
 80079b0:	1d1a      	adds	r2, r3, #4
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	9203      	str	r2, [sp, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	bfb8      	it	lt
 80079ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80079be:	3402      	adds	r4, #2
 80079c0:	9305      	str	r3, [sp, #20]
 80079c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007aa8 <_vfiprintf_r+0x25c>
 80079c6:	7821      	ldrb	r1, [r4, #0]
 80079c8:	2203      	movs	r2, #3
 80079ca:	4650      	mov	r0, sl
 80079cc:	f7f8 fc40 	bl	8000250 <memchr>
 80079d0:	b140      	cbz	r0, 80079e4 <_vfiprintf_r+0x198>
 80079d2:	2340      	movs	r3, #64	; 0x40
 80079d4:	eba0 000a 	sub.w	r0, r0, sl
 80079d8:	fa03 f000 	lsl.w	r0, r3, r0
 80079dc:	9b04      	ldr	r3, [sp, #16]
 80079de:	4303      	orrs	r3, r0
 80079e0:	3401      	adds	r4, #1
 80079e2:	9304      	str	r3, [sp, #16]
 80079e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e8:	482c      	ldr	r0, [pc, #176]	; (8007a9c <_vfiprintf_r+0x250>)
 80079ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079ee:	2206      	movs	r2, #6
 80079f0:	f7f8 fc2e 	bl	8000250 <memchr>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d03f      	beq.n	8007a78 <_vfiprintf_r+0x22c>
 80079f8:	4b29      	ldr	r3, [pc, #164]	; (8007aa0 <_vfiprintf_r+0x254>)
 80079fa:	bb1b      	cbnz	r3, 8007a44 <_vfiprintf_r+0x1f8>
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	3307      	adds	r3, #7
 8007a00:	f023 0307 	bic.w	r3, r3, #7
 8007a04:	3308      	adds	r3, #8
 8007a06:	9303      	str	r3, [sp, #12]
 8007a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0a:	443b      	add	r3, r7
 8007a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a0e:	e767      	b.n	80078e0 <_vfiprintf_r+0x94>
 8007a10:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a14:	460c      	mov	r4, r1
 8007a16:	2001      	movs	r0, #1
 8007a18:	e7a5      	b.n	8007966 <_vfiprintf_r+0x11a>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	3401      	adds	r4, #1
 8007a1e:	9305      	str	r3, [sp, #20]
 8007a20:	4619      	mov	r1, r3
 8007a22:	f04f 0c0a 	mov.w	ip, #10
 8007a26:	4620      	mov	r0, r4
 8007a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a2c:	3a30      	subs	r2, #48	; 0x30
 8007a2e:	2a09      	cmp	r2, #9
 8007a30:	d903      	bls.n	8007a3a <_vfiprintf_r+0x1ee>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0c5      	beq.n	80079c2 <_vfiprintf_r+0x176>
 8007a36:	9105      	str	r1, [sp, #20]
 8007a38:	e7c3      	b.n	80079c2 <_vfiprintf_r+0x176>
 8007a3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a3e:	4604      	mov	r4, r0
 8007a40:	2301      	movs	r3, #1
 8007a42:	e7f0      	b.n	8007a26 <_vfiprintf_r+0x1da>
 8007a44:	ab03      	add	r3, sp, #12
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	462a      	mov	r2, r5
 8007a4a:	4b16      	ldr	r3, [pc, #88]	; (8007aa4 <_vfiprintf_r+0x258>)
 8007a4c:	a904      	add	r1, sp, #16
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f7fd feb2 	bl	80057b8 <_printf_float>
 8007a54:	4607      	mov	r7, r0
 8007a56:	1c78      	adds	r0, r7, #1
 8007a58:	d1d6      	bne.n	8007a08 <_vfiprintf_r+0x1bc>
 8007a5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a5c:	07d9      	lsls	r1, r3, #31
 8007a5e:	d405      	bmi.n	8007a6c <_vfiprintf_r+0x220>
 8007a60:	89ab      	ldrh	r3, [r5, #12]
 8007a62:	059a      	lsls	r2, r3, #22
 8007a64:	d402      	bmi.n	8007a6c <_vfiprintf_r+0x220>
 8007a66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a68:	f000 faaf 	bl	8007fca <__retarget_lock_release_recursive>
 8007a6c:	89ab      	ldrh	r3, [r5, #12]
 8007a6e:	065b      	lsls	r3, r3, #25
 8007a70:	f53f af12 	bmi.w	8007898 <_vfiprintf_r+0x4c>
 8007a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a76:	e711      	b.n	800789c <_vfiprintf_r+0x50>
 8007a78:	ab03      	add	r3, sp, #12
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	462a      	mov	r2, r5
 8007a7e:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <_vfiprintf_r+0x258>)
 8007a80:	a904      	add	r1, sp, #16
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7fe f924 	bl	8005cd0 <_printf_i>
 8007a88:	e7e4      	b.n	8007a54 <_vfiprintf_r+0x208>
 8007a8a:	bf00      	nop
 8007a8c:	0800875c 	.word	0x0800875c
 8007a90:	0800877c 	.word	0x0800877c
 8007a94:	0800873c 	.word	0x0800873c
 8007a98:	080085e4 	.word	0x080085e4
 8007a9c:	080085ee 	.word	0x080085ee
 8007aa0:	080057b9 	.word	0x080057b9
 8007aa4:	08007827 	.word	0x08007827
 8007aa8:	080085ea 	.word	0x080085ea

08007aac <__swbuf_r>:
 8007aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aae:	460e      	mov	r6, r1
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	b118      	cbz	r0, 8007abe <__swbuf_r+0x12>
 8007ab6:	6983      	ldr	r3, [r0, #24]
 8007ab8:	b90b      	cbnz	r3, 8007abe <__swbuf_r+0x12>
 8007aba:	f000 f9e7 	bl	8007e8c <__sinit>
 8007abe:	4b21      	ldr	r3, [pc, #132]	; (8007b44 <__swbuf_r+0x98>)
 8007ac0:	429c      	cmp	r4, r3
 8007ac2:	d12b      	bne.n	8007b1c <__swbuf_r+0x70>
 8007ac4:	686c      	ldr	r4, [r5, #4]
 8007ac6:	69a3      	ldr	r3, [r4, #24]
 8007ac8:	60a3      	str	r3, [r4, #8]
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	071a      	lsls	r2, r3, #28
 8007ace:	d52f      	bpl.n	8007b30 <__swbuf_r+0x84>
 8007ad0:	6923      	ldr	r3, [r4, #16]
 8007ad2:	b36b      	cbz	r3, 8007b30 <__swbuf_r+0x84>
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	6820      	ldr	r0, [r4, #0]
 8007ad8:	1ac0      	subs	r0, r0, r3
 8007ada:	6963      	ldr	r3, [r4, #20]
 8007adc:	b2f6      	uxtb	r6, r6
 8007ade:	4283      	cmp	r3, r0
 8007ae0:	4637      	mov	r7, r6
 8007ae2:	dc04      	bgt.n	8007aee <__swbuf_r+0x42>
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f000 f93c 	bl	8007d64 <_fflush_r>
 8007aec:	bb30      	cbnz	r0, 8007b3c <__swbuf_r+0x90>
 8007aee:	68a3      	ldr	r3, [r4, #8]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	60a3      	str	r3, [r4, #8]
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	6022      	str	r2, [r4, #0]
 8007afa:	701e      	strb	r6, [r3, #0]
 8007afc:	6963      	ldr	r3, [r4, #20]
 8007afe:	3001      	adds	r0, #1
 8007b00:	4283      	cmp	r3, r0
 8007b02:	d004      	beq.n	8007b0e <__swbuf_r+0x62>
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	07db      	lsls	r3, r3, #31
 8007b08:	d506      	bpl.n	8007b18 <__swbuf_r+0x6c>
 8007b0a:	2e0a      	cmp	r6, #10
 8007b0c:	d104      	bne.n	8007b18 <__swbuf_r+0x6c>
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4628      	mov	r0, r5
 8007b12:	f000 f927 	bl	8007d64 <_fflush_r>
 8007b16:	b988      	cbnz	r0, 8007b3c <__swbuf_r+0x90>
 8007b18:	4638      	mov	r0, r7
 8007b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b1c:	4b0a      	ldr	r3, [pc, #40]	; (8007b48 <__swbuf_r+0x9c>)
 8007b1e:	429c      	cmp	r4, r3
 8007b20:	d101      	bne.n	8007b26 <__swbuf_r+0x7a>
 8007b22:	68ac      	ldr	r4, [r5, #8]
 8007b24:	e7cf      	b.n	8007ac6 <__swbuf_r+0x1a>
 8007b26:	4b09      	ldr	r3, [pc, #36]	; (8007b4c <__swbuf_r+0xa0>)
 8007b28:	429c      	cmp	r4, r3
 8007b2a:	bf08      	it	eq
 8007b2c:	68ec      	ldreq	r4, [r5, #12]
 8007b2e:	e7ca      	b.n	8007ac6 <__swbuf_r+0x1a>
 8007b30:	4621      	mov	r1, r4
 8007b32:	4628      	mov	r0, r5
 8007b34:	f000 f81a 	bl	8007b6c <__swsetup_r>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d0cb      	beq.n	8007ad4 <__swbuf_r+0x28>
 8007b3c:	f04f 37ff 	mov.w	r7, #4294967295
 8007b40:	e7ea      	b.n	8007b18 <__swbuf_r+0x6c>
 8007b42:	bf00      	nop
 8007b44:	0800875c 	.word	0x0800875c
 8007b48:	0800877c 	.word	0x0800877c
 8007b4c:	0800873c 	.word	0x0800873c

08007b50 <__ascii_wctomb>:
 8007b50:	b149      	cbz	r1, 8007b66 <__ascii_wctomb+0x16>
 8007b52:	2aff      	cmp	r2, #255	; 0xff
 8007b54:	bf85      	ittet	hi
 8007b56:	238a      	movhi	r3, #138	; 0x8a
 8007b58:	6003      	strhi	r3, [r0, #0]
 8007b5a:	700a      	strbls	r2, [r1, #0]
 8007b5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007b60:	bf98      	it	ls
 8007b62:	2001      	movls	r0, #1
 8007b64:	4770      	bx	lr
 8007b66:	4608      	mov	r0, r1
 8007b68:	4770      	bx	lr
	...

08007b6c <__swsetup_r>:
 8007b6c:	4b32      	ldr	r3, [pc, #200]	; (8007c38 <__swsetup_r+0xcc>)
 8007b6e:	b570      	push	{r4, r5, r6, lr}
 8007b70:	681d      	ldr	r5, [r3, #0]
 8007b72:	4606      	mov	r6, r0
 8007b74:	460c      	mov	r4, r1
 8007b76:	b125      	cbz	r5, 8007b82 <__swsetup_r+0x16>
 8007b78:	69ab      	ldr	r3, [r5, #24]
 8007b7a:	b913      	cbnz	r3, 8007b82 <__swsetup_r+0x16>
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	f000 f985 	bl	8007e8c <__sinit>
 8007b82:	4b2e      	ldr	r3, [pc, #184]	; (8007c3c <__swsetup_r+0xd0>)
 8007b84:	429c      	cmp	r4, r3
 8007b86:	d10f      	bne.n	8007ba8 <__swsetup_r+0x3c>
 8007b88:	686c      	ldr	r4, [r5, #4]
 8007b8a:	89a3      	ldrh	r3, [r4, #12]
 8007b8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b90:	0719      	lsls	r1, r3, #28
 8007b92:	d42c      	bmi.n	8007bee <__swsetup_r+0x82>
 8007b94:	06dd      	lsls	r5, r3, #27
 8007b96:	d411      	bmi.n	8007bbc <__swsetup_r+0x50>
 8007b98:	2309      	movs	r3, #9
 8007b9a:	6033      	str	r3, [r6, #0]
 8007b9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ba0:	81a3      	strh	r3, [r4, #12]
 8007ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba6:	e03e      	b.n	8007c26 <__swsetup_r+0xba>
 8007ba8:	4b25      	ldr	r3, [pc, #148]	; (8007c40 <__swsetup_r+0xd4>)
 8007baa:	429c      	cmp	r4, r3
 8007bac:	d101      	bne.n	8007bb2 <__swsetup_r+0x46>
 8007bae:	68ac      	ldr	r4, [r5, #8]
 8007bb0:	e7eb      	b.n	8007b8a <__swsetup_r+0x1e>
 8007bb2:	4b24      	ldr	r3, [pc, #144]	; (8007c44 <__swsetup_r+0xd8>)
 8007bb4:	429c      	cmp	r4, r3
 8007bb6:	bf08      	it	eq
 8007bb8:	68ec      	ldreq	r4, [r5, #12]
 8007bba:	e7e6      	b.n	8007b8a <__swsetup_r+0x1e>
 8007bbc:	0758      	lsls	r0, r3, #29
 8007bbe:	d512      	bpl.n	8007be6 <__swsetup_r+0x7a>
 8007bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bc2:	b141      	cbz	r1, 8007bd6 <__swsetup_r+0x6a>
 8007bc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bc8:	4299      	cmp	r1, r3
 8007bca:	d002      	beq.n	8007bd2 <__swsetup_r+0x66>
 8007bcc:	4630      	mov	r0, r6
 8007bce:	f7ff fb6f 	bl	80072b0 <_free_r>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	6363      	str	r3, [r4, #52]	; 0x34
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bdc:	81a3      	strh	r3, [r4, #12]
 8007bde:	2300      	movs	r3, #0
 8007be0:	6063      	str	r3, [r4, #4]
 8007be2:	6923      	ldr	r3, [r4, #16]
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	f043 0308 	orr.w	r3, r3, #8
 8007bec:	81a3      	strh	r3, [r4, #12]
 8007bee:	6923      	ldr	r3, [r4, #16]
 8007bf0:	b94b      	cbnz	r3, 8007c06 <__swsetup_r+0x9a>
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bfc:	d003      	beq.n	8007c06 <__swsetup_r+0x9a>
 8007bfe:	4621      	mov	r1, r4
 8007c00:	4630      	mov	r0, r6
 8007c02:	f000 fa07 	bl	8008014 <__smakebuf_r>
 8007c06:	89a0      	ldrh	r0, [r4, #12]
 8007c08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c0c:	f010 0301 	ands.w	r3, r0, #1
 8007c10:	d00a      	beq.n	8007c28 <__swsetup_r+0xbc>
 8007c12:	2300      	movs	r3, #0
 8007c14:	60a3      	str	r3, [r4, #8]
 8007c16:	6963      	ldr	r3, [r4, #20]
 8007c18:	425b      	negs	r3, r3
 8007c1a:	61a3      	str	r3, [r4, #24]
 8007c1c:	6923      	ldr	r3, [r4, #16]
 8007c1e:	b943      	cbnz	r3, 8007c32 <__swsetup_r+0xc6>
 8007c20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c24:	d1ba      	bne.n	8007b9c <__swsetup_r+0x30>
 8007c26:	bd70      	pop	{r4, r5, r6, pc}
 8007c28:	0781      	lsls	r1, r0, #30
 8007c2a:	bf58      	it	pl
 8007c2c:	6963      	ldrpl	r3, [r4, #20]
 8007c2e:	60a3      	str	r3, [r4, #8]
 8007c30:	e7f4      	b.n	8007c1c <__swsetup_r+0xb0>
 8007c32:	2000      	movs	r0, #0
 8007c34:	e7f7      	b.n	8007c26 <__swsetup_r+0xba>
 8007c36:	bf00      	nop
 8007c38:	20000040 	.word	0x20000040
 8007c3c:	0800875c 	.word	0x0800875c
 8007c40:	0800877c 	.word	0x0800877c
 8007c44:	0800873c 	.word	0x0800873c

08007c48 <abort>:
 8007c48:	b508      	push	{r3, lr}
 8007c4a:	2006      	movs	r0, #6
 8007c4c:	f000 fa52 	bl	80080f4 <raise>
 8007c50:	2001      	movs	r0, #1
 8007c52:	f7f9 feed 	bl	8001a30 <_exit>
	...

08007c58 <__sflush_r>:
 8007c58:	898a      	ldrh	r2, [r1, #12]
 8007c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5e:	4605      	mov	r5, r0
 8007c60:	0710      	lsls	r0, r2, #28
 8007c62:	460c      	mov	r4, r1
 8007c64:	d458      	bmi.n	8007d18 <__sflush_r+0xc0>
 8007c66:	684b      	ldr	r3, [r1, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	dc05      	bgt.n	8007c78 <__sflush_r+0x20>
 8007c6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	dc02      	bgt.n	8007c78 <__sflush_r+0x20>
 8007c72:	2000      	movs	r0, #0
 8007c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c7a:	2e00      	cmp	r6, #0
 8007c7c:	d0f9      	beq.n	8007c72 <__sflush_r+0x1a>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c84:	682f      	ldr	r7, [r5, #0]
 8007c86:	602b      	str	r3, [r5, #0]
 8007c88:	d032      	beq.n	8007cf0 <__sflush_r+0x98>
 8007c8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	075a      	lsls	r2, r3, #29
 8007c90:	d505      	bpl.n	8007c9e <__sflush_r+0x46>
 8007c92:	6863      	ldr	r3, [r4, #4]
 8007c94:	1ac0      	subs	r0, r0, r3
 8007c96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c98:	b10b      	cbz	r3, 8007c9e <__sflush_r+0x46>
 8007c9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c9c:	1ac0      	subs	r0, r0, r3
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ca4:	6a21      	ldr	r1, [r4, #32]
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	47b0      	blx	r6
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	d106      	bne.n	8007cbe <__sflush_r+0x66>
 8007cb0:	6829      	ldr	r1, [r5, #0]
 8007cb2:	291d      	cmp	r1, #29
 8007cb4:	d82c      	bhi.n	8007d10 <__sflush_r+0xb8>
 8007cb6:	4a2a      	ldr	r2, [pc, #168]	; (8007d60 <__sflush_r+0x108>)
 8007cb8:	40ca      	lsrs	r2, r1
 8007cba:	07d6      	lsls	r6, r2, #31
 8007cbc:	d528      	bpl.n	8007d10 <__sflush_r+0xb8>
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	6062      	str	r2, [r4, #4]
 8007cc2:	04d9      	lsls	r1, r3, #19
 8007cc4:	6922      	ldr	r2, [r4, #16]
 8007cc6:	6022      	str	r2, [r4, #0]
 8007cc8:	d504      	bpl.n	8007cd4 <__sflush_r+0x7c>
 8007cca:	1c42      	adds	r2, r0, #1
 8007ccc:	d101      	bne.n	8007cd2 <__sflush_r+0x7a>
 8007cce:	682b      	ldr	r3, [r5, #0]
 8007cd0:	b903      	cbnz	r3, 8007cd4 <__sflush_r+0x7c>
 8007cd2:	6560      	str	r0, [r4, #84]	; 0x54
 8007cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cd6:	602f      	str	r7, [r5, #0]
 8007cd8:	2900      	cmp	r1, #0
 8007cda:	d0ca      	beq.n	8007c72 <__sflush_r+0x1a>
 8007cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ce0:	4299      	cmp	r1, r3
 8007ce2:	d002      	beq.n	8007cea <__sflush_r+0x92>
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f7ff fae3 	bl	80072b0 <_free_r>
 8007cea:	2000      	movs	r0, #0
 8007cec:	6360      	str	r0, [r4, #52]	; 0x34
 8007cee:	e7c1      	b.n	8007c74 <__sflush_r+0x1c>
 8007cf0:	6a21      	ldr	r1, [r4, #32]
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	47b0      	blx	r6
 8007cf8:	1c41      	adds	r1, r0, #1
 8007cfa:	d1c7      	bne.n	8007c8c <__sflush_r+0x34>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d0c4      	beq.n	8007c8c <__sflush_r+0x34>
 8007d02:	2b1d      	cmp	r3, #29
 8007d04:	d001      	beq.n	8007d0a <__sflush_r+0xb2>
 8007d06:	2b16      	cmp	r3, #22
 8007d08:	d101      	bne.n	8007d0e <__sflush_r+0xb6>
 8007d0a:	602f      	str	r7, [r5, #0]
 8007d0c:	e7b1      	b.n	8007c72 <__sflush_r+0x1a>
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d14:	81a3      	strh	r3, [r4, #12]
 8007d16:	e7ad      	b.n	8007c74 <__sflush_r+0x1c>
 8007d18:	690f      	ldr	r7, [r1, #16]
 8007d1a:	2f00      	cmp	r7, #0
 8007d1c:	d0a9      	beq.n	8007c72 <__sflush_r+0x1a>
 8007d1e:	0793      	lsls	r3, r2, #30
 8007d20:	680e      	ldr	r6, [r1, #0]
 8007d22:	bf08      	it	eq
 8007d24:	694b      	ldreq	r3, [r1, #20]
 8007d26:	600f      	str	r7, [r1, #0]
 8007d28:	bf18      	it	ne
 8007d2a:	2300      	movne	r3, #0
 8007d2c:	eba6 0807 	sub.w	r8, r6, r7
 8007d30:	608b      	str	r3, [r1, #8]
 8007d32:	f1b8 0f00 	cmp.w	r8, #0
 8007d36:	dd9c      	ble.n	8007c72 <__sflush_r+0x1a>
 8007d38:	6a21      	ldr	r1, [r4, #32]
 8007d3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d3c:	4643      	mov	r3, r8
 8007d3e:	463a      	mov	r2, r7
 8007d40:	4628      	mov	r0, r5
 8007d42:	47b0      	blx	r6
 8007d44:	2800      	cmp	r0, #0
 8007d46:	dc06      	bgt.n	8007d56 <__sflush_r+0xfe>
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d4e:	81a3      	strh	r3, [r4, #12]
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	e78e      	b.n	8007c74 <__sflush_r+0x1c>
 8007d56:	4407      	add	r7, r0
 8007d58:	eba8 0800 	sub.w	r8, r8, r0
 8007d5c:	e7e9      	b.n	8007d32 <__sflush_r+0xda>
 8007d5e:	bf00      	nop
 8007d60:	20400001 	.word	0x20400001

08007d64 <_fflush_r>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	690b      	ldr	r3, [r1, #16]
 8007d68:	4605      	mov	r5, r0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	b913      	cbnz	r3, 8007d74 <_fflush_r+0x10>
 8007d6e:	2500      	movs	r5, #0
 8007d70:	4628      	mov	r0, r5
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	b118      	cbz	r0, 8007d7e <_fflush_r+0x1a>
 8007d76:	6983      	ldr	r3, [r0, #24]
 8007d78:	b90b      	cbnz	r3, 8007d7e <_fflush_r+0x1a>
 8007d7a:	f000 f887 	bl	8007e8c <__sinit>
 8007d7e:	4b14      	ldr	r3, [pc, #80]	; (8007dd0 <_fflush_r+0x6c>)
 8007d80:	429c      	cmp	r4, r3
 8007d82:	d11b      	bne.n	8007dbc <_fflush_r+0x58>
 8007d84:	686c      	ldr	r4, [r5, #4]
 8007d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0ef      	beq.n	8007d6e <_fflush_r+0xa>
 8007d8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d90:	07d0      	lsls	r0, r2, #31
 8007d92:	d404      	bmi.n	8007d9e <_fflush_r+0x3a>
 8007d94:	0599      	lsls	r1, r3, #22
 8007d96:	d402      	bmi.n	8007d9e <_fflush_r+0x3a>
 8007d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d9a:	f000 f915 	bl	8007fc8 <__retarget_lock_acquire_recursive>
 8007d9e:	4628      	mov	r0, r5
 8007da0:	4621      	mov	r1, r4
 8007da2:	f7ff ff59 	bl	8007c58 <__sflush_r>
 8007da6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007da8:	07da      	lsls	r2, r3, #31
 8007daa:	4605      	mov	r5, r0
 8007dac:	d4e0      	bmi.n	8007d70 <_fflush_r+0xc>
 8007dae:	89a3      	ldrh	r3, [r4, #12]
 8007db0:	059b      	lsls	r3, r3, #22
 8007db2:	d4dd      	bmi.n	8007d70 <_fflush_r+0xc>
 8007db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007db6:	f000 f908 	bl	8007fca <__retarget_lock_release_recursive>
 8007dba:	e7d9      	b.n	8007d70 <_fflush_r+0xc>
 8007dbc:	4b05      	ldr	r3, [pc, #20]	; (8007dd4 <_fflush_r+0x70>)
 8007dbe:	429c      	cmp	r4, r3
 8007dc0:	d101      	bne.n	8007dc6 <_fflush_r+0x62>
 8007dc2:	68ac      	ldr	r4, [r5, #8]
 8007dc4:	e7df      	b.n	8007d86 <_fflush_r+0x22>
 8007dc6:	4b04      	ldr	r3, [pc, #16]	; (8007dd8 <_fflush_r+0x74>)
 8007dc8:	429c      	cmp	r4, r3
 8007dca:	bf08      	it	eq
 8007dcc:	68ec      	ldreq	r4, [r5, #12]
 8007dce:	e7da      	b.n	8007d86 <_fflush_r+0x22>
 8007dd0:	0800875c 	.word	0x0800875c
 8007dd4:	0800877c 	.word	0x0800877c
 8007dd8:	0800873c 	.word	0x0800873c

08007ddc <std>:
 8007ddc:	2300      	movs	r3, #0
 8007dde:	b510      	push	{r4, lr}
 8007de0:	4604      	mov	r4, r0
 8007de2:	e9c0 3300 	strd	r3, r3, [r0]
 8007de6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dea:	6083      	str	r3, [r0, #8]
 8007dec:	8181      	strh	r1, [r0, #12]
 8007dee:	6643      	str	r3, [r0, #100]	; 0x64
 8007df0:	81c2      	strh	r2, [r0, #14]
 8007df2:	6183      	str	r3, [r0, #24]
 8007df4:	4619      	mov	r1, r3
 8007df6:	2208      	movs	r2, #8
 8007df8:	305c      	adds	r0, #92	; 0x5c
 8007dfa:	f7fd fc43 	bl	8005684 <memset>
 8007dfe:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <std+0x38>)
 8007e00:	6263      	str	r3, [r4, #36]	; 0x24
 8007e02:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <std+0x3c>)
 8007e04:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e06:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <std+0x40>)
 8007e08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e0a:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <std+0x44>)
 8007e0c:	6224      	str	r4, [r4, #32]
 8007e0e:	6323      	str	r3, [r4, #48]	; 0x30
 8007e10:	bd10      	pop	{r4, pc}
 8007e12:	bf00      	nop
 8007e14:	0800812d 	.word	0x0800812d
 8007e18:	0800814f 	.word	0x0800814f
 8007e1c:	08008187 	.word	0x08008187
 8007e20:	080081ab 	.word	0x080081ab

08007e24 <_cleanup_r>:
 8007e24:	4901      	ldr	r1, [pc, #4]	; (8007e2c <_cleanup_r+0x8>)
 8007e26:	f000 b8af 	b.w	8007f88 <_fwalk_reent>
 8007e2a:	bf00      	nop
 8007e2c:	08007d65 	.word	0x08007d65

08007e30 <__sfmoreglue>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	1e4a      	subs	r2, r1, #1
 8007e34:	2568      	movs	r5, #104	; 0x68
 8007e36:	4355      	muls	r5, r2
 8007e38:	460e      	mov	r6, r1
 8007e3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e3e:	f7ff fa87 	bl	8007350 <_malloc_r>
 8007e42:	4604      	mov	r4, r0
 8007e44:	b140      	cbz	r0, 8007e58 <__sfmoreglue+0x28>
 8007e46:	2100      	movs	r1, #0
 8007e48:	e9c0 1600 	strd	r1, r6, [r0]
 8007e4c:	300c      	adds	r0, #12
 8007e4e:	60a0      	str	r0, [r4, #8]
 8007e50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e54:	f7fd fc16 	bl	8005684 <memset>
 8007e58:	4620      	mov	r0, r4
 8007e5a:	bd70      	pop	{r4, r5, r6, pc}

08007e5c <__sfp_lock_acquire>:
 8007e5c:	4801      	ldr	r0, [pc, #4]	; (8007e64 <__sfp_lock_acquire+0x8>)
 8007e5e:	f000 b8b3 	b.w	8007fc8 <__retarget_lock_acquire_recursive>
 8007e62:	bf00      	nop
 8007e64:	20000530 	.word	0x20000530

08007e68 <__sfp_lock_release>:
 8007e68:	4801      	ldr	r0, [pc, #4]	; (8007e70 <__sfp_lock_release+0x8>)
 8007e6a:	f000 b8ae 	b.w	8007fca <__retarget_lock_release_recursive>
 8007e6e:	bf00      	nop
 8007e70:	20000530 	.word	0x20000530

08007e74 <__sinit_lock_acquire>:
 8007e74:	4801      	ldr	r0, [pc, #4]	; (8007e7c <__sinit_lock_acquire+0x8>)
 8007e76:	f000 b8a7 	b.w	8007fc8 <__retarget_lock_acquire_recursive>
 8007e7a:	bf00      	nop
 8007e7c:	2000052b 	.word	0x2000052b

08007e80 <__sinit_lock_release>:
 8007e80:	4801      	ldr	r0, [pc, #4]	; (8007e88 <__sinit_lock_release+0x8>)
 8007e82:	f000 b8a2 	b.w	8007fca <__retarget_lock_release_recursive>
 8007e86:	bf00      	nop
 8007e88:	2000052b 	.word	0x2000052b

08007e8c <__sinit>:
 8007e8c:	b510      	push	{r4, lr}
 8007e8e:	4604      	mov	r4, r0
 8007e90:	f7ff fff0 	bl	8007e74 <__sinit_lock_acquire>
 8007e94:	69a3      	ldr	r3, [r4, #24]
 8007e96:	b11b      	cbz	r3, 8007ea0 <__sinit+0x14>
 8007e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e9c:	f7ff bff0 	b.w	8007e80 <__sinit_lock_release>
 8007ea0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ea4:	6523      	str	r3, [r4, #80]	; 0x50
 8007ea6:	4b13      	ldr	r3, [pc, #76]	; (8007ef4 <__sinit+0x68>)
 8007ea8:	4a13      	ldr	r2, [pc, #76]	; (8007ef8 <__sinit+0x6c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	62a2      	str	r2, [r4, #40]	; 0x28
 8007eae:	42a3      	cmp	r3, r4
 8007eb0:	bf04      	itt	eq
 8007eb2:	2301      	moveq	r3, #1
 8007eb4:	61a3      	streq	r3, [r4, #24]
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f000 f820 	bl	8007efc <__sfp>
 8007ebc:	6060      	str	r0, [r4, #4]
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f000 f81c 	bl	8007efc <__sfp>
 8007ec4:	60a0      	str	r0, [r4, #8]
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f000 f818 	bl	8007efc <__sfp>
 8007ecc:	2200      	movs	r2, #0
 8007ece:	60e0      	str	r0, [r4, #12]
 8007ed0:	2104      	movs	r1, #4
 8007ed2:	6860      	ldr	r0, [r4, #4]
 8007ed4:	f7ff ff82 	bl	8007ddc <std>
 8007ed8:	68a0      	ldr	r0, [r4, #8]
 8007eda:	2201      	movs	r2, #1
 8007edc:	2109      	movs	r1, #9
 8007ede:	f7ff ff7d 	bl	8007ddc <std>
 8007ee2:	68e0      	ldr	r0, [r4, #12]
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	2112      	movs	r1, #18
 8007ee8:	f7ff ff78 	bl	8007ddc <std>
 8007eec:	2301      	movs	r3, #1
 8007eee:	61a3      	str	r3, [r4, #24]
 8007ef0:	e7d2      	b.n	8007e98 <__sinit+0xc>
 8007ef2:	bf00      	nop
 8007ef4:	080083b8 	.word	0x080083b8
 8007ef8:	08007e25 	.word	0x08007e25

08007efc <__sfp>:
 8007efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efe:	4607      	mov	r7, r0
 8007f00:	f7ff ffac 	bl	8007e5c <__sfp_lock_acquire>
 8007f04:	4b1e      	ldr	r3, [pc, #120]	; (8007f80 <__sfp+0x84>)
 8007f06:	681e      	ldr	r6, [r3, #0]
 8007f08:	69b3      	ldr	r3, [r6, #24]
 8007f0a:	b913      	cbnz	r3, 8007f12 <__sfp+0x16>
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f7ff ffbd 	bl	8007e8c <__sinit>
 8007f12:	3648      	adds	r6, #72	; 0x48
 8007f14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	d503      	bpl.n	8007f24 <__sfp+0x28>
 8007f1c:	6833      	ldr	r3, [r6, #0]
 8007f1e:	b30b      	cbz	r3, 8007f64 <__sfp+0x68>
 8007f20:	6836      	ldr	r6, [r6, #0]
 8007f22:	e7f7      	b.n	8007f14 <__sfp+0x18>
 8007f24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f28:	b9d5      	cbnz	r5, 8007f60 <__sfp+0x64>
 8007f2a:	4b16      	ldr	r3, [pc, #88]	; (8007f84 <__sfp+0x88>)
 8007f2c:	60e3      	str	r3, [r4, #12]
 8007f2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f32:	6665      	str	r5, [r4, #100]	; 0x64
 8007f34:	f000 f847 	bl	8007fc6 <__retarget_lock_init_recursive>
 8007f38:	f7ff ff96 	bl	8007e68 <__sfp_lock_release>
 8007f3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f44:	6025      	str	r5, [r4, #0]
 8007f46:	61a5      	str	r5, [r4, #24]
 8007f48:	2208      	movs	r2, #8
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f50:	f7fd fb98 	bl	8005684 <memset>
 8007f54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f60:	3468      	adds	r4, #104	; 0x68
 8007f62:	e7d9      	b.n	8007f18 <__sfp+0x1c>
 8007f64:	2104      	movs	r1, #4
 8007f66:	4638      	mov	r0, r7
 8007f68:	f7ff ff62 	bl	8007e30 <__sfmoreglue>
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	6030      	str	r0, [r6, #0]
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d1d5      	bne.n	8007f20 <__sfp+0x24>
 8007f74:	f7ff ff78 	bl	8007e68 <__sfp_lock_release>
 8007f78:	230c      	movs	r3, #12
 8007f7a:	603b      	str	r3, [r7, #0]
 8007f7c:	e7ee      	b.n	8007f5c <__sfp+0x60>
 8007f7e:	bf00      	nop
 8007f80:	080083b8 	.word	0x080083b8
 8007f84:	ffff0001 	.word	0xffff0001

08007f88 <_fwalk_reent>:
 8007f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	4688      	mov	r8, r1
 8007f90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f94:	2700      	movs	r7, #0
 8007f96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f9a:	f1b9 0901 	subs.w	r9, r9, #1
 8007f9e:	d505      	bpl.n	8007fac <_fwalk_reent+0x24>
 8007fa0:	6824      	ldr	r4, [r4, #0]
 8007fa2:	2c00      	cmp	r4, #0
 8007fa4:	d1f7      	bne.n	8007f96 <_fwalk_reent+0xe>
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fac:	89ab      	ldrh	r3, [r5, #12]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d907      	bls.n	8007fc2 <_fwalk_reent+0x3a>
 8007fb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	d003      	beq.n	8007fc2 <_fwalk_reent+0x3a>
 8007fba:	4629      	mov	r1, r5
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	47c0      	blx	r8
 8007fc0:	4307      	orrs	r7, r0
 8007fc2:	3568      	adds	r5, #104	; 0x68
 8007fc4:	e7e9      	b.n	8007f9a <_fwalk_reent+0x12>

08007fc6 <__retarget_lock_init_recursive>:
 8007fc6:	4770      	bx	lr

08007fc8 <__retarget_lock_acquire_recursive>:
 8007fc8:	4770      	bx	lr

08007fca <__retarget_lock_release_recursive>:
 8007fca:	4770      	bx	lr

08007fcc <__swhatbuf_r>:
 8007fcc:	b570      	push	{r4, r5, r6, lr}
 8007fce:	460e      	mov	r6, r1
 8007fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fd4:	2900      	cmp	r1, #0
 8007fd6:	b096      	sub	sp, #88	; 0x58
 8007fd8:	4614      	mov	r4, r2
 8007fda:	461d      	mov	r5, r3
 8007fdc:	da07      	bge.n	8007fee <__swhatbuf_r+0x22>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	602b      	str	r3, [r5, #0]
 8007fe2:	89b3      	ldrh	r3, [r6, #12]
 8007fe4:	061a      	lsls	r2, r3, #24
 8007fe6:	d410      	bmi.n	800800a <__swhatbuf_r+0x3e>
 8007fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fec:	e00e      	b.n	800800c <__swhatbuf_r+0x40>
 8007fee:	466a      	mov	r2, sp
 8007ff0:	f000 f902 	bl	80081f8 <_fstat_r>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	dbf2      	blt.n	8007fde <__swhatbuf_r+0x12>
 8007ff8:	9a01      	ldr	r2, [sp, #4]
 8007ffa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ffe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008002:	425a      	negs	r2, r3
 8008004:	415a      	adcs	r2, r3
 8008006:	602a      	str	r2, [r5, #0]
 8008008:	e7ee      	b.n	8007fe8 <__swhatbuf_r+0x1c>
 800800a:	2340      	movs	r3, #64	; 0x40
 800800c:	2000      	movs	r0, #0
 800800e:	6023      	str	r3, [r4, #0]
 8008010:	b016      	add	sp, #88	; 0x58
 8008012:	bd70      	pop	{r4, r5, r6, pc}

08008014 <__smakebuf_r>:
 8008014:	898b      	ldrh	r3, [r1, #12]
 8008016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008018:	079d      	lsls	r5, r3, #30
 800801a:	4606      	mov	r6, r0
 800801c:	460c      	mov	r4, r1
 800801e:	d507      	bpl.n	8008030 <__smakebuf_r+0x1c>
 8008020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	6123      	str	r3, [r4, #16]
 8008028:	2301      	movs	r3, #1
 800802a:	6163      	str	r3, [r4, #20]
 800802c:	b002      	add	sp, #8
 800802e:	bd70      	pop	{r4, r5, r6, pc}
 8008030:	ab01      	add	r3, sp, #4
 8008032:	466a      	mov	r2, sp
 8008034:	f7ff ffca 	bl	8007fcc <__swhatbuf_r>
 8008038:	9900      	ldr	r1, [sp, #0]
 800803a:	4605      	mov	r5, r0
 800803c:	4630      	mov	r0, r6
 800803e:	f7ff f987 	bl	8007350 <_malloc_r>
 8008042:	b948      	cbnz	r0, 8008058 <__smakebuf_r+0x44>
 8008044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008048:	059a      	lsls	r2, r3, #22
 800804a:	d4ef      	bmi.n	800802c <__smakebuf_r+0x18>
 800804c:	f023 0303 	bic.w	r3, r3, #3
 8008050:	f043 0302 	orr.w	r3, r3, #2
 8008054:	81a3      	strh	r3, [r4, #12]
 8008056:	e7e3      	b.n	8008020 <__smakebuf_r+0xc>
 8008058:	4b0d      	ldr	r3, [pc, #52]	; (8008090 <__smakebuf_r+0x7c>)
 800805a:	62b3      	str	r3, [r6, #40]	; 0x28
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	6020      	str	r0, [r4, #0]
 8008060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008064:	81a3      	strh	r3, [r4, #12]
 8008066:	9b00      	ldr	r3, [sp, #0]
 8008068:	6163      	str	r3, [r4, #20]
 800806a:	9b01      	ldr	r3, [sp, #4]
 800806c:	6120      	str	r0, [r4, #16]
 800806e:	b15b      	cbz	r3, 8008088 <__smakebuf_r+0x74>
 8008070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008074:	4630      	mov	r0, r6
 8008076:	f000 f8d1 	bl	800821c <_isatty_r>
 800807a:	b128      	cbz	r0, 8008088 <__smakebuf_r+0x74>
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	f023 0303 	bic.w	r3, r3, #3
 8008082:	f043 0301 	orr.w	r3, r3, #1
 8008086:	81a3      	strh	r3, [r4, #12]
 8008088:	89a0      	ldrh	r0, [r4, #12]
 800808a:	4305      	orrs	r5, r0
 800808c:	81a5      	strh	r5, [r4, #12]
 800808e:	e7cd      	b.n	800802c <__smakebuf_r+0x18>
 8008090:	08007e25 	.word	0x08007e25

08008094 <_malloc_usable_size_r>:
 8008094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008098:	1f18      	subs	r0, r3, #4
 800809a:	2b00      	cmp	r3, #0
 800809c:	bfbc      	itt	lt
 800809e:	580b      	ldrlt	r3, [r1, r0]
 80080a0:	18c0      	addlt	r0, r0, r3
 80080a2:	4770      	bx	lr

080080a4 <_raise_r>:
 80080a4:	291f      	cmp	r1, #31
 80080a6:	b538      	push	{r3, r4, r5, lr}
 80080a8:	4604      	mov	r4, r0
 80080aa:	460d      	mov	r5, r1
 80080ac:	d904      	bls.n	80080b8 <_raise_r+0x14>
 80080ae:	2316      	movs	r3, #22
 80080b0:	6003      	str	r3, [r0, #0]
 80080b2:	f04f 30ff 	mov.w	r0, #4294967295
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080ba:	b112      	cbz	r2, 80080c2 <_raise_r+0x1e>
 80080bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080c0:	b94b      	cbnz	r3, 80080d6 <_raise_r+0x32>
 80080c2:	4620      	mov	r0, r4
 80080c4:	f000 f830 	bl	8008128 <_getpid_r>
 80080c8:	462a      	mov	r2, r5
 80080ca:	4601      	mov	r1, r0
 80080cc:	4620      	mov	r0, r4
 80080ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080d2:	f000 b817 	b.w	8008104 <_kill_r>
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d00a      	beq.n	80080f0 <_raise_r+0x4c>
 80080da:	1c59      	adds	r1, r3, #1
 80080dc:	d103      	bne.n	80080e6 <_raise_r+0x42>
 80080de:	2316      	movs	r3, #22
 80080e0:	6003      	str	r3, [r0, #0]
 80080e2:	2001      	movs	r0, #1
 80080e4:	e7e7      	b.n	80080b6 <_raise_r+0x12>
 80080e6:	2400      	movs	r4, #0
 80080e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080ec:	4628      	mov	r0, r5
 80080ee:	4798      	blx	r3
 80080f0:	2000      	movs	r0, #0
 80080f2:	e7e0      	b.n	80080b6 <_raise_r+0x12>

080080f4 <raise>:
 80080f4:	4b02      	ldr	r3, [pc, #8]	; (8008100 <raise+0xc>)
 80080f6:	4601      	mov	r1, r0
 80080f8:	6818      	ldr	r0, [r3, #0]
 80080fa:	f7ff bfd3 	b.w	80080a4 <_raise_r>
 80080fe:	bf00      	nop
 8008100:	20000040 	.word	0x20000040

08008104 <_kill_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4d07      	ldr	r5, [pc, #28]	; (8008124 <_kill_r+0x20>)
 8008108:	2300      	movs	r3, #0
 800810a:	4604      	mov	r4, r0
 800810c:	4608      	mov	r0, r1
 800810e:	4611      	mov	r1, r2
 8008110:	602b      	str	r3, [r5, #0]
 8008112:	f7f9 fc7d 	bl	8001a10 <_kill>
 8008116:	1c43      	adds	r3, r0, #1
 8008118:	d102      	bne.n	8008120 <_kill_r+0x1c>
 800811a:	682b      	ldr	r3, [r5, #0]
 800811c:	b103      	cbz	r3, 8008120 <_kill_r+0x1c>
 800811e:	6023      	str	r3, [r4, #0]
 8008120:	bd38      	pop	{r3, r4, r5, pc}
 8008122:	bf00      	nop
 8008124:	20000524 	.word	0x20000524

08008128 <_getpid_r>:
 8008128:	f7f9 bc6a 	b.w	8001a00 <_getpid>

0800812c <__sread>:
 800812c:	b510      	push	{r4, lr}
 800812e:	460c      	mov	r4, r1
 8008130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008134:	f000 f894 	bl	8008260 <_read_r>
 8008138:	2800      	cmp	r0, #0
 800813a:	bfab      	itete	ge
 800813c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800813e:	89a3      	ldrhlt	r3, [r4, #12]
 8008140:	181b      	addge	r3, r3, r0
 8008142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008146:	bfac      	ite	ge
 8008148:	6563      	strge	r3, [r4, #84]	; 0x54
 800814a:	81a3      	strhlt	r3, [r4, #12]
 800814c:	bd10      	pop	{r4, pc}

0800814e <__swrite>:
 800814e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008152:	461f      	mov	r7, r3
 8008154:	898b      	ldrh	r3, [r1, #12]
 8008156:	05db      	lsls	r3, r3, #23
 8008158:	4605      	mov	r5, r0
 800815a:	460c      	mov	r4, r1
 800815c:	4616      	mov	r6, r2
 800815e:	d505      	bpl.n	800816c <__swrite+0x1e>
 8008160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008164:	2302      	movs	r3, #2
 8008166:	2200      	movs	r2, #0
 8008168:	f000 f868 	bl	800823c <_lseek_r>
 800816c:	89a3      	ldrh	r3, [r4, #12]
 800816e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008176:	81a3      	strh	r3, [r4, #12]
 8008178:	4632      	mov	r2, r6
 800817a:	463b      	mov	r3, r7
 800817c:	4628      	mov	r0, r5
 800817e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008182:	f000 b817 	b.w	80081b4 <_write_r>

08008186 <__sseek>:
 8008186:	b510      	push	{r4, lr}
 8008188:	460c      	mov	r4, r1
 800818a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818e:	f000 f855 	bl	800823c <_lseek_r>
 8008192:	1c43      	adds	r3, r0, #1
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	bf15      	itete	ne
 8008198:	6560      	strne	r0, [r4, #84]	; 0x54
 800819a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800819e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081a2:	81a3      	strheq	r3, [r4, #12]
 80081a4:	bf18      	it	ne
 80081a6:	81a3      	strhne	r3, [r4, #12]
 80081a8:	bd10      	pop	{r4, pc}

080081aa <__sclose>:
 80081aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ae:	f000 b813 	b.w	80081d8 <_close_r>
	...

080081b4 <_write_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	4d07      	ldr	r5, [pc, #28]	; (80081d4 <_write_r+0x20>)
 80081b8:	4604      	mov	r4, r0
 80081ba:	4608      	mov	r0, r1
 80081bc:	4611      	mov	r1, r2
 80081be:	2200      	movs	r2, #0
 80081c0:	602a      	str	r2, [r5, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	f7f9 fc5b 	bl	8001a7e <_write>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d102      	bne.n	80081d2 <_write_r+0x1e>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	b103      	cbz	r3, 80081d2 <_write_r+0x1e>
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	20000524 	.word	0x20000524

080081d8 <_close_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d06      	ldr	r5, [pc, #24]	; (80081f4 <_close_r+0x1c>)
 80081dc:	2300      	movs	r3, #0
 80081de:	4604      	mov	r4, r0
 80081e0:	4608      	mov	r0, r1
 80081e2:	602b      	str	r3, [r5, #0]
 80081e4:	f7f9 fc67 	bl	8001ab6 <_close>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d102      	bne.n	80081f2 <_close_r+0x1a>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	b103      	cbz	r3, 80081f2 <_close_r+0x1a>
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	20000524 	.word	0x20000524

080081f8 <_fstat_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4d07      	ldr	r5, [pc, #28]	; (8008218 <_fstat_r+0x20>)
 80081fc:	2300      	movs	r3, #0
 80081fe:	4604      	mov	r4, r0
 8008200:	4608      	mov	r0, r1
 8008202:	4611      	mov	r1, r2
 8008204:	602b      	str	r3, [r5, #0]
 8008206:	f7f9 fc62 	bl	8001ace <_fstat>
 800820a:	1c43      	adds	r3, r0, #1
 800820c:	d102      	bne.n	8008214 <_fstat_r+0x1c>
 800820e:	682b      	ldr	r3, [r5, #0]
 8008210:	b103      	cbz	r3, 8008214 <_fstat_r+0x1c>
 8008212:	6023      	str	r3, [r4, #0]
 8008214:	bd38      	pop	{r3, r4, r5, pc}
 8008216:	bf00      	nop
 8008218:	20000524 	.word	0x20000524

0800821c <_isatty_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4d06      	ldr	r5, [pc, #24]	; (8008238 <_isatty_r+0x1c>)
 8008220:	2300      	movs	r3, #0
 8008222:	4604      	mov	r4, r0
 8008224:	4608      	mov	r0, r1
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	f7f9 fc61 	bl	8001aee <_isatty>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_isatty_r+0x1a>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_isatty_r+0x1a>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	20000524 	.word	0x20000524

0800823c <_lseek_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	4d07      	ldr	r5, [pc, #28]	; (800825c <_lseek_r+0x20>)
 8008240:	4604      	mov	r4, r0
 8008242:	4608      	mov	r0, r1
 8008244:	4611      	mov	r1, r2
 8008246:	2200      	movs	r2, #0
 8008248:	602a      	str	r2, [r5, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	f7f9 fc5a 	bl	8001b04 <_lseek>
 8008250:	1c43      	adds	r3, r0, #1
 8008252:	d102      	bne.n	800825a <_lseek_r+0x1e>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	b103      	cbz	r3, 800825a <_lseek_r+0x1e>
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	bd38      	pop	{r3, r4, r5, pc}
 800825c:	20000524 	.word	0x20000524

08008260 <_read_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4d07      	ldr	r5, [pc, #28]	; (8008280 <_read_r+0x20>)
 8008264:	4604      	mov	r4, r0
 8008266:	4608      	mov	r0, r1
 8008268:	4611      	mov	r1, r2
 800826a:	2200      	movs	r2, #0
 800826c:	602a      	str	r2, [r5, #0]
 800826e:	461a      	mov	r2, r3
 8008270:	f7f9 fbe8 	bl	8001a44 <_read>
 8008274:	1c43      	adds	r3, r0, #1
 8008276:	d102      	bne.n	800827e <_read_r+0x1e>
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	b103      	cbz	r3, 800827e <_read_r+0x1e>
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	20000524 	.word	0x20000524

08008284 <_init>:
 8008284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008286:	bf00      	nop
 8008288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800828a:	bc08      	pop	{r3}
 800828c:	469e      	mov	lr, r3
 800828e:	4770      	bx	lr

08008290 <_fini>:
 8008290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008292:	bf00      	nop
 8008294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008296:	bc08      	pop	{r3}
 8008298:	469e      	mov	lr, r3
 800829a:	4770      	bx	lr
